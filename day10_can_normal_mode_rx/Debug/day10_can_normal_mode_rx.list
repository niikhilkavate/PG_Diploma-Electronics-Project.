
day10_can_normal_mode_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006980  08006980  00007980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d40  08006d40  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d40  08006d40  00007d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d48  08006d48  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006d50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          0000023c  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000410  20000410  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097b8  00000000  00000000  000081fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192f  00000000  00000000  000119b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  000132e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064c  00000000  00000000  00013b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021337  00000000  00000000  00014184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000930b  00000000  00000000  000354bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e84  00000000  00000000  0003e7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010564a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033e0  00000000  00000000  00105690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00108a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006968 	.word	0x08006968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006968 	.word	0x08006968

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__gesf2>:
 8000dc4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000dc8:	e006      	b.n	8000dd8 <__cmpsf2+0x4>
 8000dca:	bf00      	nop

08000dcc <__lesf2>:
 8000dcc:	f04f 0c01 	mov.w	ip, #1
 8000dd0:	e002      	b.n	8000dd8 <__cmpsf2+0x4>
 8000dd2:	bf00      	nop

08000dd4 <__cmpsf2>:
 8000dd4:	f04f 0c01 	mov.w	ip, #1
 8000dd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ddc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de8:	bf18      	it	ne
 8000dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dee:	d011      	beq.n	8000e14 <__cmpsf2+0x40>
 8000df0:	b001      	add	sp, #4
 8000df2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000df6:	bf18      	it	ne
 8000df8:	ea90 0f01 	teqne	r0, r1
 8000dfc:	bf58      	it	pl
 8000dfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e02:	bf88      	it	hi
 8000e04:	17c8      	asrhi	r0, r1, #31
 8000e06:	bf38      	it	cc
 8000e08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e0c:	bf18      	it	ne
 8000e0e:	f040 0001 	orrne.w	r0, r0, #1
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	d102      	bne.n	8000e20 <__cmpsf2+0x4c>
 8000e1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e1e:	d105      	bne.n	8000e2c <__cmpsf2+0x58>
 8000e20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e24:	d1e4      	bne.n	8000df0 <__cmpsf2+0x1c>
 8000e26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2a:	d0e1      	beq.n	8000df0 <__cmpsf2+0x1c>
 8000e2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <__aeabi_cfrcmple>:
 8000e34:	4684      	mov	ip, r0
 8000e36:	4608      	mov	r0, r1
 8000e38:	4661      	mov	r1, ip
 8000e3a:	e7ff      	b.n	8000e3c <__aeabi_cfcmpeq>

08000e3c <__aeabi_cfcmpeq>:
 8000e3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e3e:	f7ff ffc9 	bl	8000dd4 <__cmpsf2>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	bf48      	it	mi
 8000e46:	f110 0f00 	cmnmi.w	r0, #0
 8000e4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e4c <__aeabi_fcmpeq>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff fff4 	bl	8000e3c <__aeabi_cfcmpeq>
 8000e54:	bf0c      	ite	eq
 8000e56:	2001      	moveq	r0, #1
 8000e58:	2000      	movne	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_fcmplt>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff ffea 	bl	8000e3c <__aeabi_cfcmpeq>
 8000e68:	bf34      	ite	cc
 8000e6a:	2001      	movcc	r0, #1
 8000e6c:	2000      	movcs	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_fcmple>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff ffe0 	bl	8000e3c <__aeabi_cfcmpeq>
 8000e7c:	bf94      	ite	ls
 8000e7e:	2001      	movls	r0, #1
 8000e80:	2000      	movhi	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_fcmpge>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff ffd2 	bl	8000e34 <__aeabi_cfrcmple>
 8000e90:	bf94      	ite	ls
 8000e92:	2001      	movls	r0, #1
 8000e94:	2000      	movhi	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmpgt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffc8 	bl	8000e34 <__aeabi_cfrcmple>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_uldivmod>:
 8000eb0:	b953      	cbnz	r3, 8000ec8 <__aeabi_uldivmod+0x18>
 8000eb2:	b94a      	cbnz	r2, 8000ec8 <__aeabi_uldivmod+0x18>
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	bf08      	it	eq
 8000eb8:	2800      	cmpeq	r0, #0
 8000eba:	bf1c      	itt	ne
 8000ebc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ec0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ec4:	f000 b96a 	b.w	800119c <__aeabi_idiv0>
 8000ec8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ecc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed0:	f000 f806 	bl	8000ee0 <__udivmoddi4>
 8000ed4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000edc:	b004      	add	sp, #16
 8000ede:	4770      	bx	lr

08000ee0 <__udivmoddi4>:
 8000ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	9d08      	ldr	r5, [sp, #32]
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d14e      	bne.n	8000f8a <__udivmoddi4+0xaa>
 8000eec:	4694      	mov	ip, r2
 8000eee:	458c      	cmp	ip, r1
 8000ef0:	4686      	mov	lr, r0
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	d962      	bls.n	8000fbe <__udivmoddi4+0xde>
 8000ef8:	b14a      	cbz	r2, 8000f0e <__udivmoddi4+0x2e>
 8000efa:	f1c2 0320 	rsb	r3, r2, #32
 8000efe:	4091      	lsls	r1, r2
 8000f00:	fa20 f303 	lsr.w	r3, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	4319      	orrs	r1, r3
 8000f0a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f f68c 	uxth.w	r6, ip
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f26:	fb04 f106 	mul.w	r1, r4, r6
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d90a      	bls.n	8000f44 <__udivmoddi4+0x64>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000f36:	f080 8112 	bcs.w	800115e <__udivmoddi4+0x27e>
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	f240 810f 	bls.w	800115e <__udivmoddi4+0x27e>
 8000f40:	3c02      	subs	r4, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a59      	subs	r1, r3, r1
 8000f46:	fa1f f38e 	uxth.w	r3, lr
 8000f4a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f4e:	fb07 1110 	mls	r1, r7, r0, r1
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f606 	mul.w	r6, r0, r6
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	d90a      	bls.n	8000f74 <__udivmoddi4+0x94>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000f66:	f080 80fc 	bcs.w	8001162 <__udivmoddi4+0x282>
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	f240 80f9 	bls.w	8001162 <__udivmoddi4+0x282>
 8000f70:	4463      	add	r3, ip
 8000f72:	3802      	subs	r0, #2
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	b11d      	cbz	r5, 8000f86 <__udivmoddi4+0xa6>
 8000f7e:	40d3      	lsrs	r3, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	e9c5 3200 	strd	r3, r2, [r5]
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d905      	bls.n	8000f9a <__udivmoddi4+0xba>
 8000f8e:	b10d      	cbz	r5, 8000f94 <__udivmoddi4+0xb4>
 8000f90:	e9c5 0100 	strd	r0, r1, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4608      	mov	r0, r1
 8000f98:	e7f5      	b.n	8000f86 <__udivmoddi4+0xa6>
 8000f9a:	fab3 f183 	clz	r1, r3
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	d146      	bne.n	8001030 <__udivmoddi4+0x150>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d302      	bcc.n	8000fac <__udivmoddi4+0xcc>
 8000fa6:	4290      	cmp	r0, r2
 8000fa8:	f0c0 80f0 	bcc.w	800118c <__udivmoddi4+0x2ac>
 8000fac:	1a86      	subs	r6, r0, r2
 8000fae:	eb64 0303 	sbc.w	r3, r4, r3
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d0e6      	beq.n	8000f86 <__udivmoddi4+0xa6>
 8000fb8:	e9c5 6300 	strd	r6, r3, [r5]
 8000fbc:	e7e3      	b.n	8000f86 <__udivmoddi4+0xa6>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	f040 8090 	bne.w	80010e4 <__udivmoddi4+0x204>
 8000fc4:	eba1 040c 	sub.w	r4, r1, ip
 8000fc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fcc:	fa1f f78c 	uxth.w	r7, ip
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fda:	fb08 4416 	mls	r4, r8, r6, r4
 8000fde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fe2:	fb07 f006 	mul.w	r0, r7, r6
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x11c>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ff2:	d202      	bcs.n	8000ffa <__udivmoddi4+0x11a>
 8000ff4:	4298      	cmp	r0, r3
 8000ff6:	f200 80cd 	bhi.w	8001194 <__udivmoddi4+0x2b4>
 8000ffa:	4626      	mov	r6, r4
 8000ffc:	1a1c      	subs	r4, r3, r0
 8000ffe:	fa1f f38e 	uxth.w	r3, lr
 8001002:	fbb4 f0f8 	udiv	r0, r4, r8
 8001006:	fb08 4410 	mls	r4, r8, r0, r4
 800100a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800100e:	fb00 f707 	mul.w	r7, r0, r7
 8001012:	429f      	cmp	r7, r3
 8001014:	d908      	bls.n	8001028 <__udivmoddi4+0x148>
 8001016:	eb1c 0303 	adds.w	r3, ip, r3
 800101a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800101e:	d202      	bcs.n	8001026 <__udivmoddi4+0x146>
 8001020:	429f      	cmp	r7, r3
 8001022:	f200 80b0 	bhi.w	8001186 <__udivmoddi4+0x2a6>
 8001026:	4620      	mov	r0, r4
 8001028:	1bdb      	subs	r3, r3, r7
 800102a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800102e:	e7a5      	b.n	8000f7c <__udivmoddi4+0x9c>
 8001030:	f1c1 0620 	rsb	r6, r1, #32
 8001034:	408b      	lsls	r3, r1
 8001036:	fa22 f706 	lsr.w	r7, r2, r6
 800103a:	431f      	orrs	r7, r3
 800103c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001040:	fa04 f301 	lsl.w	r3, r4, r1
 8001044:	ea43 030c 	orr.w	r3, r3, ip
 8001048:	40f4      	lsrs	r4, r6
 800104a:	fa00 f801 	lsl.w	r8, r0, r1
 800104e:	0c38      	lsrs	r0, r7, #16
 8001050:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001054:	fbb4 fef0 	udiv	lr, r4, r0
 8001058:	fa1f fc87 	uxth.w	ip, r7
 800105c:	fb00 441e 	mls	r4, r0, lr, r4
 8001060:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001064:	fb0e f90c 	mul.w	r9, lr, ip
 8001068:	45a1      	cmp	r9, r4
 800106a:	fa02 f201 	lsl.w	r2, r2, r1
 800106e:	d90a      	bls.n	8001086 <__udivmoddi4+0x1a6>
 8001070:	193c      	adds	r4, r7, r4
 8001072:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001076:	f080 8084 	bcs.w	8001182 <__udivmoddi4+0x2a2>
 800107a:	45a1      	cmp	r9, r4
 800107c:	f240 8081 	bls.w	8001182 <__udivmoddi4+0x2a2>
 8001080:	f1ae 0e02 	sub.w	lr, lr, #2
 8001084:	443c      	add	r4, r7
 8001086:	eba4 0409 	sub.w	r4, r4, r9
 800108a:	fa1f f983 	uxth.w	r9, r3
 800108e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001092:	fb00 4413 	mls	r4, r0, r3, r4
 8001096:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800109a:	fb03 fc0c 	mul.w	ip, r3, ip
 800109e:	45a4      	cmp	ip, r4
 80010a0:	d907      	bls.n	80010b2 <__udivmoddi4+0x1d2>
 80010a2:	193c      	adds	r4, r7, r4
 80010a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80010a8:	d267      	bcs.n	800117a <__udivmoddi4+0x29a>
 80010aa:	45a4      	cmp	ip, r4
 80010ac:	d965      	bls.n	800117a <__udivmoddi4+0x29a>
 80010ae:	3b02      	subs	r3, #2
 80010b0:	443c      	add	r4, r7
 80010b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010b6:	fba0 9302 	umull	r9, r3, r0, r2
 80010ba:	eba4 040c 	sub.w	r4, r4, ip
 80010be:	429c      	cmp	r4, r3
 80010c0:	46ce      	mov	lr, r9
 80010c2:	469c      	mov	ip, r3
 80010c4:	d351      	bcc.n	800116a <__udivmoddi4+0x28a>
 80010c6:	d04e      	beq.n	8001166 <__udivmoddi4+0x286>
 80010c8:	b155      	cbz	r5, 80010e0 <__udivmoddi4+0x200>
 80010ca:	ebb8 030e 	subs.w	r3, r8, lr
 80010ce:	eb64 040c 	sbc.w	r4, r4, ip
 80010d2:	fa04 f606 	lsl.w	r6, r4, r6
 80010d6:	40cb      	lsrs	r3, r1
 80010d8:	431e      	orrs	r6, r3
 80010da:	40cc      	lsrs	r4, r1
 80010dc:	e9c5 6400 	strd	r6, r4, [r5]
 80010e0:	2100      	movs	r1, #0
 80010e2:	e750      	b.n	8000f86 <__udivmoddi4+0xa6>
 80010e4:	f1c2 0320 	rsb	r3, r2, #32
 80010e8:	fa20 f103 	lsr.w	r1, r0, r3
 80010ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f0:	fa24 f303 	lsr.w	r3, r4, r3
 80010f4:	4094      	lsls	r4, r2
 80010f6:	430c      	orrs	r4, r1
 80010f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001100:	fa1f f78c 	uxth.w	r7, ip
 8001104:	fbb3 f0f8 	udiv	r0, r3, r8
 8001108:	fb08 3110 	mls	r1, r8, r0, r3
 800110c:	0c23      	lsrs	r3, r4, #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb00 f107 	mul.w	r1, r0, r7
 8001116:	4299      	cmp	r1, r3
 8001118:	d908      	bls.n	800112c <__udivmoddi4+0x24c>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001122:	d22c      	bcs.n	800117e <__udivmoddi4+0x29e>
 8001124:	4299      	cmp	r1, r3
 8001126:	d92a      	bls.n	800117e <__udivmoddi4+0x29e>
 8001128:	3802      	subs	r0, #2
 800112a:	4463      	add	r3, ip
 800112c:	1a5b      	subs	r3, r3, r1
 800112e:	b2a4      	uxth	r4, r4
 8001130:	fbb3 f1f8 	udiv	r1, r3, r8
 8001134:	fb08 3311 	mls	r3, r8, r1, r3
 8001138:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800113c:	fb01 f307 	mul.w	r3, r1, r7
 8001140:	42a3      	cmp	r3, r4
 8001142:	d908      	bls.n	8001156 <__udivmoddi4+0x276>
 8001144:	eb1c 0404 	adds.w	r4, ip, r4
 8001148:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800114c:	d213      	bcs.n	8001176 <__udivmoddi4+0x296>
 800114e:	42a3      	cmp	r3, r4
 8001150:	d911      	bls.n	8001176 <__udivmoddi4+0x296>
 8001152:	3902      	subs	r1, #2
 8001154:	4464      	add	r4, ip
 8001156:	1ae4      	subs	r4, r4, r3
 8001158:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800115c:	e739      	b.n	8000fd2 <__udivmoddi4+0xf2>
 800115e:	4604      	mov	r4, r0
 8001160:	e6f0      	b.n	8000f44 <__udivmoddi4+0x64>
 8001162:	4608      	mov	r0, r1
 8001164:	e706      	b.n	8000f74 <__udivmoddi4+0x94>
 8001166:	45c8      	cmp	r8, r9
 8001168:	d2ae      	bcs.n	80010c8 <__udivmoddi4+0x1e8>
 800116a:	ebb9 0e02 	subs.w	lr, r9, r2
 800116e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001172:	3801      	subs	r0, #1
 8001174:	e7a8      	b.n	80010c8 <__udivmoddi4+0x1e8>
 8001176:	4631      	mov	r1, r6
 8001178:	e7ed      	b.n	8001156 <__udivmoddi4+0x276>
 800117a:	4603      	mov	r3, r0
 800117c:	e799      	b.n	80010b2 <__udivmoddi4+0x1d2>
 800117e:	4630      	mov	r0, r6
 8001180:	e7d4      	b.n	800112c <__udivmoddi4+0x24c>
 8001182:	46d6      	mov	lr, sl
 8001184:	e77f      	b.n	8001086 <__udivmoddi4+0x1a6>
 8001186:	4463      	add	r3, ip
 8001188:	3802      	subs	r0, #2
 800118a:	e74d      	b.n	8001028 <__udivmoddi4+0x148>
 800118c:	4606      	mov	r6, r0
 800118e:	4623      	mov	r3, r4
 8001190:	4608      	mov	r0, r1
 8001192:	e70f      	b.n	8000fb4 <__udivmoddi4+0xd4>
 8001194:	3e02      	subs	r6, #2
 8001196:	4463      	add	r3, ip
 8001198:	e730      	b.n	8000ffc <__udivmoddi4+0x11c>
 800119a:	bf00      	nop

0800119c <__aeabi_idiv0>:
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
char uartDataBuffer[50];
//uint8_t sensor_val;//val1
float sensor_val;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80011a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ac:	4829      	ldr	r0, [pc, #164]	@ (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80011ae:	f001 fcd1 	bl	8002b54 <HAL_GPIO_TogglePin>

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, (uint8_t*)RxData) == HAL_OK)
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80011b4:	4a29      	ldr	r2, [pc, #164]	@ (800125c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fea1 	bl	8001f00 <HAL_CAN_GetRxMessage>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d142      	bne.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
	{
		sensor_val = RxData[0];
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fda3 	bl	8000d14 <__aeabi_ui2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80011d2:	6013      	str	r3, [r2, #0]

		if(RxHeader.StdId == 0x0AB){ // 171
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2bab      	cmp	r3, #171	@ 0xab
 80011da:	d036      	beq.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);*/

			// action: ...
		}
		else if(RxHeader.StdId == 0x0AC){
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2bac      	cmp	r3, #172	@ 0xac
 80011e2:	d032      	beq.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			/*sprintf(uartDataBuffer,"ldr value = %d \r\n",sensor_val);
			HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);*/

			// action: ...
		}else if(RxHeader.StdId == 0x0AD){
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2bad      	cmp	r3, #173	@ 0xad
 80011ea:	d12e      	bne.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			sprintf(uartDataBuffer,"alcohol value = %f \r\n",sensor_val);
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9a9 	bl	8000548 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	491a      	ldr	r1, [pc, #104]	@ (8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80011fc:	481a      	ldr	r0, [pc, #104]	@ (8001268 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80011fe:	f003 fa8b 	bl	8004718 <siprintf>
			HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);
 8001202:	4819      	ldr	r0, [pc, #100]	@ (8001268 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001204:	f7ff f834 	bl	8000270 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001210:	4915      	ldr	r1, [pc, #84]	@ (8001268 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001214:	f002 f9a4 	bl	8003560 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001218:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800121e:	f001 fc99 	bl	8002b54 <HAL_GPIO_TogglePin>

			if(sensor_val<200)
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4912      	ldr	r1, [pc, #72]	@ (8001270 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fe19 	bl	8000e60 <__aeabi_fcmplt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2102      	movs	r1, #2
 8001238:	480e      	ldr	r0, [pc, #56]	@ (8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800123a:	f001 fc73 	bl	8002b24 <HAL_GPIO_WritePin>
			// action: Send this info(calculated % of alcohol consumption) to ESP8266 over UART
			//sprintf(uartDataBuffer,"%d",sensor_val);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);
		}
	}
}
 800123e:	e004      	b.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8001246:	f001 fc6d 	bl	8002b24 <HAL_GPIO_WritePin>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020c00 	.word	0x40020c00
 8001258:	2000027c 	.word	0x2000027c
 800125c:	20000260 	.word	0x20000260
 8001260:	200002b8 	.word	0x200002b8
 8001264:	08006980 	.word	0x08006980
 8001268:	20000284 	.word	0x20000284
 800126c:	20000218 	.word	0x20000218
 8001270:	43480000 	.word	0x43480000
 8001274:	40020800 	.word	0x40020800

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fb8e 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f826 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f000 f90e 	bl	80014a4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001288:	f000 f88c 	bl	80013a4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f8e0 	bl	8001450 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <main+0x48>)
 8001292:	f000 fdf1 	bl	8001e78 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001296:	2102      	movs	r1, #2
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <main+0x48>)
 800129a:	f000 ff52 	bl	8002142 <HAL_CAN_ActivateNotification>

  sprintf(uartDataBuffer,"waiting for CAN Messages ...\n\r");
 800129e:	4909      	ldr	r1, [pc, #36]	@ (80012c4 <main+0x4c>)
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <main+0x50>)
 80012a2:	f003 fa39 	bl	8004718 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);
 80012a6:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <main+0x50>)
 80012a8:	f7fe ffe2 	bl	8000270 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b4:	4904      	ldr	r1, [pc, #16]	@ (80012c8 <main+0x50>)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <main+0x54>)
 80012b8:	f002 f952 	bl	8003560 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <main+0x44>
 80012c0:	200001f0 	.word	0x200001f0
 80012c4:	08006998 	.word	0x08006998
 80012c8:	20000284 	.word	0x20000284
 80012cc:	20000218 	.word	0x20000218

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2230      	movs	r2, #48	@ 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fa7d 	bl	80047de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <SystemClock_Config+0xcc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a27      	ldr	r2, [pc, #156]	@ (800139c <SystemClock_Config+0xcc>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <SystemClock_Config+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <SystemClock_Config+0xd0>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001344:	2348      	movs	r3, #72	@ 0x48
 8001346:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fc17 	bl	8002b88 <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001360:	f000 f924 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fe78 	bl	8003078 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800138e:	f000 f90d 	bl	80015ac <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	@ 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013aa:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <MX_CAN1_Init+0xa8>)
 80013ae:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013b2:	2212      	movs	r2, #18
 80013b4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013c8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013f4:	4814      	ldr	r0, [pc, #80]	@ (8001448 <MX_CAN1_Init+0xa4>)
 80013f6:	f000 fb63 	bl	8001ac0 <HAL_CAN_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001400:	f000 f8d4 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
 8001404:	2309      	movs	r3, #9
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 5; // Use any Filter from 0 to 8
 800140c:	2305      	movs	r3, #5
 800140e:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  /*FilterConfig.FilterMaskIdHigh = 0xFF00;
  FilterConfig.FilterMaskIdLow = 0x0000;
  FilterConfig.FilterIdHigh = 0x1500;
  FilterConfig.FilterIdLow = 0x0000;*/
  FilterConfig.FilterMaskIdHigh = 0x0000;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x0000;
 8001420:	2300      	movs	r3, #0
 8001422:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_CAN1_Init+0xa4>)
 8001432:	f000 fc41 	bl	8001cb8 <HAL_CAN_ConfigFilter>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_CAN1_Init+0x9c>
    Error_Handler();
 800143c:	f000 f8b6 	bl	80015ac <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001f0 	.word	0x200001f0
 800144c:	40006400 	.word	0x40006400

08001450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_USART2_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001488:	f002 f81a 	bl	80034c0 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f88b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000218 	.word	0x20000218
 80014a0:	40004400 	.word	0x40004400

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a37      	ldr	r2, [pc, #220]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a30      	ldr	r2, [pc, #192]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_GPIO_Init+0xfc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2102      	movs	r1, #2
 800154a:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <MX_GPIO_Init+0x100>)
 800154c:	f001 faea 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001556:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_GPIO_Init+0x104>)
 8001558:	f001 fae4 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <MX_GPIO_Init+0x100>)
 8001574:	f001 f93c 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001578:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_GPIO_Init+0x104>)
 8001592:	f001 f92d 	bl	80027f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80015b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <Error_Handler+0x1c>)
 80015ba:	f001 facb 	bl	8002b54 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80015be:	2064      	movs	r0, #100	@ 0x64
 80015c0:	f000 fa5a 	bl	8001a78 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80015c4:	bf00      	nop
 80015c6:	e7f5      	b.n	80015b4 <Error_Handler+0x8>
 80015c8:	40020c00 	.word	0x40020c00

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <HAL_MspInit+0x4c>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <HAL_MspInit+0x4c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800160a:	2007      	movs	r0, #7
 800160c:	f001 f8ae 	bl	800276c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <HAL_CAN_MspInit+0x94>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d134      	bne.n	80016a8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 8001648:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_CAN_MspInit+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001688:	2309      	movs	r3, #9
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <HAL_CAN_MspInit+0x9c>)
 8001694:	f001 f8ac 	bl	80027f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2014      	movs	r0, #20
 800169e:	f001 f870 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016a2:	2014      	movs	r0, #20
 80016a4:	f001 f889 	bl	80027ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	@ 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40006400 	.word	0x40006400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12b      	bne.n	8001736 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_UART_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001716:	230c      	movs	r3, #12
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001726:	2307      	movs	r3, #7
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_UART_MspInit+0x8c>)
 8001732:	f001 f85d 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40004400 	.word	0x40004400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <MemManage_Handler+0x4>

08001764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <UsageFault_Handler+0x4>

08001774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f950 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <CAN1_RX0_IRQHandler+0x10>)
 80017aa:	f000 fcef 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001f0 	.word	0x200001f0

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <_kill>:

int _kill(int pid, int sig)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d0:	f003 f858 	bl	8004884 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2216      	movs	r2, #22
 80017d8:	601a      	str	r2, [r3, #0]
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_exit>:

void _exit (int status)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffe7 	bl	80017c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <_exit+0x12>

080017fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
  }

  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf1      	blt.n	8001848 <_write+0x12>
  }
  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f002 ffc0 	bl	8004884 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20020000 	.word	0x20020000
 8001930:	00000400 	.word	0x00000400
 8001934:	200002bc 	.word	0x200002bc
 8001938:	20000410 	.word	0x20000410

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001980 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800194c:	f7ff fff6 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	@ (8001988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	@ (8001994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f002 ff8b 	bl	8004890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff fc7d 	bl	8001278 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800198c:	08006d50 	.word	0x08006d50
  ldr r2, =_sbss
 8001990:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001994:	20000410 	.word	0x20000410

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fed1 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fdfc 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fee9 	bl	80027d6 <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a1c:	f000 feb1 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a03      	ldr	r2, [pc, #12]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	200002c0 	.word	0x200002c0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200002c0 	.word	0x200002c0

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffe0 	bl	8001a64 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0ed      	b.n	8001cae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd9c 	bl	800161c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af4:	f7ff ffb6 	bl	8001a64 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001afa:	e012      	b.n	8001b22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001afc:	f7ff ffb2 	bl	8001a64 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d90b      	bls.n	8001b22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2205      	movs	r2, #5
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0c5      	b.n	8001cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0e5      	beq.n	8001afc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0202 	bic.w	r2, r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff ff90 	bl	8001a64 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b46:	e012      	b.n	8001b6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b48:	f7ff ff8c 	bl	8001a64 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d90b      	bls.n	8001b6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2205      	movs	r2, #5
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e09f      	b.n	8001cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e5      	bne.n	8001b48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7e1b      	ldrb	r3, [r3, #24]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d108      	bne.n	8001b96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e007      	b.n	8001ba6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e5b      	ldrb	r3, [r3, #25]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e9b      	ldrb	r3, [r3, #26]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e007      	b.n	8001bfa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0220 	bic.w	r2, r2, #32
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7edb      	ldrb	r3, [r3, #27]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0210 	bic.w	r2, r2, #16
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e007      	b.n	8001c24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0210 	orr.w	r2, r2, #16
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7f1b      	ldrb	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0208 	orr.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e007      	b.n	8001c4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0208 	bic.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7f5b      	ldrb	r3, [r3, #29]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0204 	orr.w	r2, r2, #4
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e007      	b.n	8001c78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0204 	bic.w	r2, r2, #4
 8001c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cd0:	7cfb      	ldrb	r3, [r7, #19]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <HAL_CAN_ConfigFilter+0x26>
 8001cd6:	7cfb      	ldrb	r3, [r7, #19]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	f040 80be 	bne.w	8001e5a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001cde:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <HAL_CAN_ConfigFilter+0x1bc>)
 8001ce0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cf8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2201      	movs	r2, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	401a      	ands	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d123      	bne.n	8001d88 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3248      	adds	r2, #72	@ 0x48
 8001d68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d7e:	6979      	ldr	r1, [r7, #20]
 8001d80:	3348      	adds	r3, #72	@ 0x48
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d122      	bne.n	8001dd6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001db0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3248      	adds	r2, #72	@ 0x48
 8001db6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	3348      	adds	r3, #72	@ 0x48
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e4c:	f023 0201 	bic.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e006      	b.n	8001e68 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40006400 	.word	0x40006400

08001e78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d12e      	bne.n	8001eea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fdde 	bl	8001a64 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eaa:	e012      	b.n	8001ed2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eac:	f7ff fdda 	bl	8001a64 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d90b      	bls.n	8001ed2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2205      	movs	r2, #5
 8001eca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e012      	b.n	8001ef8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e5      	bne.n	8001eac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e006      	b.n	8001ef8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d003      	beq.n	8001f24 <HAL_CAN_GetRxMessage+0x24>
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f040 8103 	bne.w	800212a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10e      	bne.n	8001f48 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d116      	bne.n	8001f66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0f7      	b.n	8002138 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e8      	b.n	8002138 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0204 	and.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10c      	bne.n	8001f9e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	331b      	adds	r3, #27
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	331b      	adds	r3, #27
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4413      	add	r3, r2
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0202 	and.w	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	331b      	adds	r3, #27
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e00b      	b.n	8002004 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	331b      	adds	r3, #27
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	331b      	adds	r3, #27
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b2da      	uxtb	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	331b      	adds	r3, #27
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0a1a      	lsrs	r2, r3, #8
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0c1a      	lsrs	r2, r3, #16
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3302      	adds	r3, #2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e1a      	lsrs	r2, r3, #24
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	3303      	adds	r3, #3
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3304      	adds	r3, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0a1a      	lsrs	r2, r3, #8
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3305      	adds	r3, #5
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0c1a      	lsrs	r2, r3, #16
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3306      	adds	r3, #6
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e1a      	lsrs	r2, r3, #24
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	3307      	adds	r3, #7
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d108      	bne.n	8002116 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	e007      	b.n	8002126 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0220 	orr.w	r2, r2, #32
 8002124:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e006      	b.n	8002138 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002152:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d002      	beq.n	8002160 <HAL_CAN_ActivateNotification+0x1e>
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d109      	bne.n	8002174 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6959      	ldr	r1, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e006      	b.n	8002182 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
  }
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07c      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f983 	bl	80024fa <HAL_CAN_TxMailbox0CompleteCallback>
 80021f4:	e016      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
 8002208:	e00c      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	e002      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f986 	bl	8002530 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f962 	bl	800250c <HAL_CAN_TxMailbox1CompleteCallback>
 8002248:	e016      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
 800225c:	e00c      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	e002      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f965 	bl	8002542 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800228a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f941 	bl	800251e <HAL_CAN_TxMailbox2CompleteCallback>
 800229c:	e016      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	e00c      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c4:	e002      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f944 	bl	8002554 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f92a 	bl	8002566 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe ff38 	bl	80011a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2208      	movs	r2, #8
 800236e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f90a 	bl	800258a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8f2 	bl	8002578 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8f3 	bl	800259c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8eb 	bl	80025ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07b      	beq.n	80024da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d072      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002446:	2b00      	cmp	r3, #0
 8002448:	d043      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03e      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800245a:	2b60      	cmp	r3, #96	@ 0x60
 800245c:	d02b      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
 800245e:	2b60      	cmp	r3, #96	@ 0x60
 8002460:	d82e      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 8002462:	2b50      	cmp	r3, #80	@ 0x50
 8002464:	d022      	beq.n	80024ac <HAL_CAN_IRQHandler+0x320>
 8002466:	2b50      	cmp	r3, #80	@ 0x50
 8002468:	d82a      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 800246a:	2b40      	cmp	r3, #64	@ 0x40
 800246c:	d019      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x316>
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d826      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 8002472:	2b30      	cmp	r3, #48	@ 0x30
 8002474:	d010      	beq.n	8002498 <HAL_CAN_IRQHandler+0x30c>
 8002476:	2b30      	cmp	r3, #48	@ 0x30
 8002478:	d822      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 800247a:	2b10      	cmp	r3, #16
 800247c:	d002      	beq.n	8002484 <HAL_CAN_IRQHandler+0x2f8>
 800247e:	2b20      	cmp	r3, #32
 8002480:	d005      	beq.n	800248e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002482:	e01d      	b.n	80024c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800248c:	e019      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002496:	e014      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024a0:	e00f      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024aa:	e00a      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024b4:	e005      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024be:	e000      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80024c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f867 	bl	80025c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4906      	ldr	r1, [pc, #24]	@ (800266c <__NVIC_EnableIRQ+0x34>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800274c:	f7ff ff90 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff2d 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff42 	bl	800261c <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff90 	bl	80026c4 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5f 	bl	8002670 <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff35 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e16b      	b.n	8002ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 815a 	bne.w	8002ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b4 	beq.w	8002ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <HAL_GPIO_Init+0x308>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	4a5e      	ldr	r2, [pc, #376]	@ (8002af8 <HAL_GPIO_Init+0x308>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_GPIO_Init+0x308>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a5a      	ldr	r2, [pc, #360]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a51      	ldr	r2, [pc, #324]	@ (8002b00 <HAL_GPIO_Init+0x310>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	@ (8002b04 <HAL_GPIO_Init+0x314>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b08 <HAL_GPIO_Init+0x318>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b0c <HAL_GPIO_Init+0x31c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_GPIO_Init+0x324>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_GPIO_Init+0x328>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_GPIO_Init+0x32c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4934      	ldr	r1, [pc, #208]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a31      	ldr	r2, [pc, #196]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a26      	ldr	r2, [pc, #152]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a11      	ldr	r2, [pc, #68]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae90 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021400 	.word	0x40021400
 8002b18:	40021800 	.word	0x40021800
 8002b1c:	40021c00 	.word	0x40021c00
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43d9      	mvns	r1, r3
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	400b      	ands	r3, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e267      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ba6:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4b85      	ldr	r3, [pc, #532]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d112      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b82      	ldr	r3, [pc, #520]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d157      	bne.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e242      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x74>
 8002bee:	4b76      	ldr	r3, [pc, #472]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b70      	ldr	r3, [pc, #448]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002c20:	4b69      	ldr	r3, [pc, #420]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a68      	ldr	r2, [pc, #416]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b66      	ldr	r3, [pc, #408]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a65      	ldr	r2, [pc, #404]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe ff10 	bl	8001a64 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe ff0c 	bl	8001a64 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e207      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fefc 	bl	8001a64 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fef8 	bl	8001a64 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1f3      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b51      	ldr	r3, [pc, #324]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1c7      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4937      	ldr	r1, [pc, #220]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe feb1 	bl	8001a64 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe fead 	bl	8001a64 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1a8      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4925      	ldr	r1, [pc, #148]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe90 	bl	8001a64 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fe8c 	bl	8001a64 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e187      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d036      	beq.n	8002de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe fe70 	bl	8001a64 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fe6c 	bl	8001a64 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e167      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x200>
 8002da6:	e01b      	b.n	8002de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fe59 	bl	8001a64 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e00e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe fe55 	bl	8001a64 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d907      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e150      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	42470000 	.word	0x42470000
 8002dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b88      	ldr	r3, [pc, #544]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ea      	bne.n	8002db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b81      	ldr	r3, [pc, #516]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b77      	ldr	r3, [pc, #476]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b74      	ldr	r3, [pc, #464]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fe15 	bl	8001a64 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe fe11 	bl	8001a64 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2ea>
 8002e64:	4b64      	ldr	r3, [pc, #400]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4a63      	ldr	r2, [pc, #396]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e70:	e01c      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x30c>
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e86:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e94:	4b58      	ldr	r3, [pc, #352]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a57      	ldr	r2, [pc, #348]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	4b55      	ldr	r3, [pc, #340]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a54      	ldr	r2, [pc, #336]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fdd6 	bl	8001a64 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fdd2 	bl	8001a64 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0cb      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ee      	beq.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fdc0 	bl	8001a64 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fdbc 	bl	8001a64 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0b5      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ee      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	4a38      	ldr	r2, [pc, #224]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a1 	beq.w	8003068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f26:	4b34      	ldr	r3, [pc, #208]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d05c      	beq.n	8002fec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d141      	bne.n	8002fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b31      	ldr	r3, [pc, #196]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fd90 	bl	8001a64 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fd8c 	bl	8001a64 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e087      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	491b      	ldr	r1, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fd65 	bl	8001a64 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe fd61 	bl	8001a64 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e05c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x416>
 8002fbc:	e054      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fd4e 	bl	8001a64 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fd4a 	bl	8001a64 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e045      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
 8002fea:	e03d      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e038      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
 8003000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d028      	beq.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d121      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800303a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fc7c 	bl	8001a64 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fc78 	bl	8001a64 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490a      	ldr	r1, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fbde 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	080069b8 	.word	0x080069b8
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b094      	sub	sp, #80	@ 0x50
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325c:	4b7c      	ldr	r3, [pc, #496]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d00d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x40>
 8003268:	2b08      	cmp	r3, #8
 800326a:	f200 80e7 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x1f8>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 8003272:	2b04      	cmp	r3, #4
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3a>
 8003276:	e0e1      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b76      	ldr	r3, [pc, #472]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x210>)
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800327c:	e0e1      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b76      	ldr	r3, [pc, #472]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x214>)
 8003280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003282:	e0de      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b72      	ldr	r3, [pc, #456]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328e:	4b70      	ldr	r3, [pc, #448]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d065      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b6d      	ldr	r3, [pc, #436]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ae:	2300      	movs	r3, #0
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	0159      	lsls	r1, r3, #5
 80032c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c8:	0150      	lsls	r0, r2, #5
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4621      	mov	r1, r4
 80032d0:	1a51      	subs	r1, r2, r1
 80032d2:	6139      	str	r1, [r7, #16]
 80032d4:	4629      	mov	r1, r5
 80032d6:	eb63 0301 	sbc.w	r3, r3, r1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e8:	4659      	mov	r1, fp
 80032ea:	018b      	lsls	r3, r1, #6
 80032ec:	4651      	mov	r1, sl
 80032ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f2:	4651      	mov	r1, sl
 80032f4:	018a      	lsls	r2, r1, #6
 80032f6:	46d4      	mov	ip, sl
 80032f8:	ebb2 080c 	subs.w	r8, r2, ip
 80032fc:	4659      	mov	r1, fp
 80032fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003316:	4690      	mov	r8, r2
 8003318:	4699      	mov	r9, r3
 800331a:	4623      	mov	r3, r4
 800331c:	eb18 0303 	adds.w	r3, r8, r3
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	462b      	mov	r3, r5
 8003324:	eb49 0303 	adc.w	r3, r9, r3
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003336:	4629      	mov	r1, r5
 8003338:	024b      	lsls	r3, r1, #9
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	4604      	mov	r4, r0
 8003340:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003344:	4601      	mov	r1, r0
 8003346:	024a      	lsls	r2, r1, #9
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003358:	f7fd fdaa 	bl	8000eb0 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003364:	e05c      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	2200      	movs	r2, #0
 800336e:	4618      	mov	r0, r3
 8003370:	4611      	mov	r1, r2
 8003372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
 800337c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0159      	lsls	r1, r3, #5
 800338e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003392:	0150      	lsls	r0, r2, #5
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	46c4      	mov	ip, r8
 800339a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	468c      	mov	ip, r1
 80033a4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033bc:	ebb2 040a 	subs.w	r4, r2, sl
 80033c0:	eb63 050b 	sbc.w	r5, r3, fp
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4603      	mov	r3, r0
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	460b      	mov	r3, r1
 80033e0:	eb45 0303 	adc.w	r3, r5, r3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4620      	mov	r0, r4
 80033f8:	4629      	mov	r1, r5
 80033fa:	4604      	mov	r4, r0
 80033fc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003400:	4601      	mov	r1, r0
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003414:	f7fd fd4c 	bl	8000eb0 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x210>)
 800343e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003444:	4618      	mov	r0, r3
 8003446:	3750      	adds	r7, #80	@ 0x50
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b02      	ldr	r3, [pc, #8]	@ (800346c <HAL_RCC_GetHCLKFreq+0x10>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000000 	.word	0x20000000

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff2 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	080069c8 	.word	0x080069c8

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffde 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	080069c8 	.word	0x080069c8

080034c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e042      	b.n	8003558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe f8e8 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	@ 0x24
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f971 	bl	80037ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	d175      	bne.n	800366c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Transmit+0x2c>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e06e      	b.n	800366e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	@ 0x21
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359e:	f7fe fa61 	bl	8001a64 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x6c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d4:	e02e      	b.n	8003634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	@ 0x80
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f848 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e03a      	b.n	800366e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3302      	adds	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e007      	b.n	8003626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cb      	bne.n	80035d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	@ 0x40
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f814 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e006      	b.n	800366e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	e03b      	b.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368e:	d037      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe f9e8 	bl	8001a64 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e03a      	b.n	8003720 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d023      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b80      	cmp	r3, #128	@ 0x80
 80036bc:	d020      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b40      	cmp	r3, #64	@ 0x40
 80036c2:	d01d      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d116      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f81d 	bl	8003728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2208      	movs	r2, #8
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00f      	b.n	8003720 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	429a      	cmp	r2, r3
 800371c:	d0b4      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b095      	sub	sp, #84	@ 0x54
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003750:	643a      	str	r2, [r7, #64]	@ 0x40
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	61fb      	str	r3, [r7, #28]
   return(result);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	2b01      	cmp	r3, #1
 800379e:	d119      	bne.n	80037d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c0:	61ba      	str	r2, [r7, #24]
 80037c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	613b      	str	r3, [r7, #16]
   return(result);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037e2:	bf00      	nop
 80037e4:	3754      	adds	r7, #84	@ 0x54
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b0c0      	sub	sp, #256	@ 0x100
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	68d9      	ldr	r1, [r3, #12]
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	ea40 0301 	orr.w	r3, r0, r1
 8003814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003844:	f021 010c 	bic.w	r1, r1, #12
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	6999      	ldr	r1, [r3, #24]
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	ea40 0301 	orr.w	r3, r0, r1
 8003872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b91      	ldr	r3, [pc, #580]	@ (8003ac0 <UART_SetConfig+0x2d4>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <UART_SetConfig+0xa0>
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b8f      	ldr	r3, [pc, #572]	@ (8003ac4 <UART_SetConfig+0x2d8>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7ff fe04 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8003890:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003894:	e003      	b.n	800389e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003896:	f7ff fdeb 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 800389a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	f040 8110 	bne.w	8003acc <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038c6:	415b      	adcs	r3, r3
 80038c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	4604      	mov	r4, r0
 80038d4:	eb12 0804 	adds.w	r8, r2, r4
 80038d8:	460c      	mov	r4, r1
 80038da:	eb43 0904 	adc.w	r9, r3, r4
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	eb18 0303 	adds.w	r3, r8, r3
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003900:	460b      	mov	r3, r1
 8003902:	eb49 0303 	adc.w	r3, r9, r3
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003916:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800391a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800391e:	460b      	mov	r3, r1
 8003920:	18db      	adds	r3, r3, r3
 8003922:	653b      	str	r3, [r7, #80]	@ 0x50
 8003924:	4613      	mov	r3, r2
 8003926:	eb42 0303 	adc.w	r3, r2, r3
 800392a:	657b      	str	r3, [r7, #84]	@ 0x54
 800392c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003934:	f7fd fabc 	bl	8000eb0 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b62      	ldr	r3, [pc, #392]	@ (8003ac8 <UART_SetConfig+0x2dc>)
 800393e:	fba3 2302 	umull	r2, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	011c      	lsls	r4, r3, #4
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003950:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003960:	415b      	adcs	r3, r3
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003968:	4645      	mov	r5, r8
 800396a:	eb12 0a05 	adds.w	sl, r2, r5
 800396e:	4640      	mov	r0, r8
 8003970:	4649      	mov	r1, r9
 8003972:	460d      	mov	r5, r1
 8003974:	eb43 0b05 	adc.w	fp, r3, r5
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800398c:	4692      	mov	sl, r2
 800398e:	469b      	mov	fp, r3
 8003990:	4603      	mov	r3, r0
 8003992:	eb1a 0303 	adds.w	r3, sl, r3
 8003996:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800399a:	460b      	mov	r3, r1
 800399c:	eb4b 0303 	adc.w	r3, fp, r3
 80039a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039b8:	460b      	mov	r3, r1
 80039ba:	18db      	adds	r3, r3, r3
 80039bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039be:	4613      	mov	r3, r2
 80039c0:	eb42 0303 	adc.w	r3, r2, r3
 80039c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ce:	f7fd fa6f 	bl	8000eb0 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <UART_SetConfig+0x2dc>)
 80039da:	fba3 2301 	umull	r2, r3, r3, r1
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2264      	movs	r2, #100	@ 0x64
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	1acb      	subs	r3, r1, r3
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <UART_SetConfig+0x2dc>)
 80039f0:	fba3 2302 	umull	r2, r3, r3, r2
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039fc:	441c      	add	r4, r3
 80039fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4655      	mov	r5, sl
 8003a3e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a54:	464b      	mov	r3, r9
 8003a56:	460a      	mov	r2, r1
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a74:	460b      	mov	r3, r1
 8003a76:	18db      	adds	r3, r3, r3
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a8a:	f7fd fa11 	bl	8000eb0 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <UART_SetConfig+0x2dc>)
 8003a94:	fba3 1302 	umull	r1, r3, r3, r2
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	2164      	movs	r1, #100	@ 0x64
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	3332      	adds	r3, #50	@ 0x32
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <UART_SetConfig+0x2dc>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	f003 0207 	and.w	r2, r3, #7
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4422      	add	r2, r4
 8003aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003abc:	e10a      	b.n	8003cd4 <UART_SetConfig+0x4e8>
 8003abe:	bf00      	nop
 8003ac0:	40011000 	.word	0x40011000
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ad6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ade:	4642      	mov	r2, r8
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	1891      	adds	r1, r2, r2
 8003ae4:	6239      	str	r1, [r7, #32]
 8003ae6:	415b      	adcs	r3, r3
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aee:	4641      	mov	r1, r8
 8003af0:	1854      	adds	r4, r2, r1
 8003af2:	46cc      	mov	ip, r9
 8003af4:	eb43 050c 	adc.w	r5, r3, ip
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	00eb      	lsls	r3, r5, #3
 8003b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b06:	00e2      	lsls	r2, r4, #3
 8003b08:	4614      	mov	r4, r2
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4603      	mov	r3, r0
 8003b12:	18e3      	adds	r3, r4, r3
 8003b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b18:	460b      	mov	r3, r1
 8003b1a:	eb45 0303 	adc.w	r3, r5, r3
 8003b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b3e:	4629      	mov	r1, r5
 8003b40:	008b      	lsls	r3, r1, #2
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	4604      	mov	r4, r0
 8003b48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	008a      	lsls	r2, r1, #2
 8003b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b54:	f7fd f9ac 	bl	8000eb0 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4b60      	ldr	r3, [pc, #384]	@ (8003ce0 <UART_SetConfig+0x4f4>)
 8003b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	011c      	lsls	r4, r3, #4
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	61b9      	str	r1, [r7, #24]
 8003b80:	415b      	adcs	r3, r3
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6139      	str	r1, [r7, #16]
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4655      	mov	r5, sl
 8003ba6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003be0:	4649      	mov	r1, r9
 8003be2:	008b      	lsls	r3, r1, #2
 8003be4:	4645      	mov	r5, r8
 8003be6:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003bea:	4641      	mov	r1, r8
 8003bec:	008a      	lsls	r2, r1, #2
 8003bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bf2:	f7fd f95d 	bl	8000eb0 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <UART_SetConfig+0x4f4>)
 8003bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2264      	movs	r2, #100	@ 0x64
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	@ 0x32
 8003c10:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <UART_SetConfig+0x4f4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	1851      	adds	r1, r2, r1
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	4649      	mov	r1, r9
 8003c44:	414b      	adcs	r3, r1
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c54:	4659      	mov	r1, fp
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	4655      	mov	r5, sl
 8003c5a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003c5e:	4651      	mov	r1, sl
 8003c60:	00ca      	lsls	r2, r1, #3
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c6e:	464b      	mov	r3, r9
 8003c70:	460a      	mov	r2, r1
 8003c72:	eb42 0303 	adc.w	r3, r2, r3
 8003c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c90:	4649      	mov	r1, r9
 8003c92:	008b      	lsls	r3, r1, #2
 8003c94:	4645      	mov	r5, r8
 8003c96:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	008a      	lsls	r2, r1, #2
 8003c9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ca2:	f7fd f905 	bl	8000eb0 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <UART_SetConfig+0x4f4>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	@ 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	3332      	adds	r3, #50	@ 0x32
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <UART_SetConfig+0x4f4>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4422      	add	r2, r4
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce0:	51eb851f 	.word	0x51eb851f

08003ce4 <__cvt>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	b088      	sub	sp, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	461d      	mov	r5, r3
 8003cee:	4614      	mov	r4, r2
 8003cf0:	bfbc      	itt	lt
 8003cf2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003cf6:	4614      	movlt	r4, r2
 8003cf8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003cfa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003cfc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d00:	bfb6      	itet	lt
 8003d02:	461d      	movlt	r5, r3
 8003d04:	2300      	movge	r3, #0
 8003d06:	232d      	movlt	r3, #45	@ 0x2d
 8003d08:	7013      	strb	r3, [r2, #0]
 8003d0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d0c:	f023 0820 	bic.w	r8, r3, #32
 8003d10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d14:	d005      	beq.n	8003d22 <__cvt+0x3e>
 8003d16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d1a:	d100      	bne.n	8003d1e <__cvt+0x3a>
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e000      	b.n	8003d24 <__cvt+0x40>
 8003d22:	2303      	movs	r3, #3
 8003d24:	aa07      	add	r2, sp, #28
 8003d26:	9204      	str	r2, [sp, #16]
 8003d28:	aa06      	add	r2, sp, #24
 8003d2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d2e:	e9cd 3600 	strd	r3, r6, [sp]
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f000 fe5b 	bl	80049f0 <_dtoa_r>
 8003d3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d3e:	4607      	mov	r7, r0
 8003d40:	d119      	bne.n	8003d76 <__cvt+0x92>
 8003d42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d44:	07db      	lsls	r3, r3, #31
 8003d46:	d50e      	bpl.n	8003d66 <__cvt+0x82>
 8003d48:	eb00 0906 	add.w	r9, r0, r6
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2300      	movs	r3, #0
 8003d50:	4620      	mov	r0, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	f7fc feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d58:	b108      	cbz	r0, 8003d5e <__cvt+0x7a>
 8003d5a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d5e:	2230      	movs	r2, #48	@ 0x30
 8003d60:	9b07      	ldr	r3, [sp, #28]
 8003d62:	454b      	cmp	r3, r9
 8003d64:	d31e      	bcc.n	8003da4 <__cvt+0xc0>
 8003d66:	9b07      	ldr	r3, [sp, #28]
 8003d68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003d6a:	1bdb      	subs	r3, r3, r7
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	b008      	add	sp, #32
 8003d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d7a:	eb00 0906 	add.w	r9, r0, r6
 8003d7e:	d1e5      	bne.n	8003d4c <__cvt+0x68>
 8003d80:	7803      	ldrb	r3, [r0, #0]
 8003d82:	2b30      	cmp	r3, #48	@ 0x30
 8003d84:	d10a      	bne.n	8003d9c <__cvt+0xb8>
 8003d86:	2200      	movs	r2, #0
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d92:	b918      	cbnz	r0, 8003d9c <__cvt+0xb8>
 8003d94:	f1c6 0601 	rsb	r6, r6, #1
 8003d98:	f8ca 6000 	str.w	r6, [sl]
 8003d9c:	f8da 3000 	ldr.w	r3, [sl]
 8003da0:	4499      	add	r9, r3
 8003da2:	e7d3      	b.n	8003d4c <__cvt+0x68>
 8003da4:	1c59      	adds	r1, r3, #1
 8003da6:	9107      	str	r1, [sp, #28]
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e7d9      	b.n	8003d60 <__cvt+0x7c>

08003dac <__exponent>:
 8003dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dae:	2900      	cmp	r1, #0
 8003db0:	bfba      	itte	lt
 8003db2:	4249      	neglt	r1, r1
 8003db4:	232d      	movlt	r3, #45	@ 0x2d
 8003db6:	232b      	movge	r3, #43	@ 0x2b
 8003db8:	2909      	cmp	r1, #9
 8003dba:	7002      	strb	r2, [r0, #0]
 8003dbc:	7043      	strb	r3, [r0, #1]
 8003dbe:	dd29      	ble.n	8003e14 <__exponent+0x68>
 8003dc0:	f10d 0307 	add.w	r3, sp, #7
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	270a      	movs	r7, #10
 8003dc8:	461a      	mov	r2, r3
 8003dca:	fbb1 f6f7 	udiv	r6, r1, r7
 8003dce:	fb07 1416 	mls	r4, r7, r6, r1
 8003dd2:	3430      	adds	r4, #48	@ 0x30
 8003dd4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003dd8:	460c      	mov	r4, r1
 8003dda:	2c63      	cmp	r4, #99	@ 0x63
 8003ddc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003de0:	4631      	mov	r1, r6
 8003de2:	dcf1      	bgt.n	8003dc8 <__exponent+0x1c>
 8003de4:	3130      	adds	r1, #48	@ 0x30
 8003de6:	1e94      	subs	r4, r2, #2
 8003de8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003dec:	1c41      	adds	r1, r0, #1
 8003dee:	4623      	mov	r3, r4
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	d30a      	bcc.n	8003e0a <__exponent+0x5e>
 8003df4:	f10d 0309 	add.w	r3, sp, #9
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	42ac      	cmp	r4, r5
 8003dfc:	bf88      	it	hi
 8003dfe:	2300      	movhi	r3, #0
 8003e00:	3302      	adds	r3, #2
 8003e02:	4403      	add	r3, r0
 8003e04:	1a18      	subs	r0, r3, r0
 8003e06:	b003      	add	sp, #12
 8003e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e12:	e7ed      	b.n	8003df0 <__exponent+0x44>
 8003e14:	2330      	movs	r3, #48	@ 0x30
 8003e16:	3130      	adds	r1, #48	@ 0x30
 8003e18:	7083      	strb	r3, [r0, #2]
 8003e1a:	70c1      	strb	r1, [r0, #3]
 8003e1c:	1d03      	adds	r3, r0, #4
 8003e1e:	e7f1      	b.n	8003e04 <__exponent+0x58>

08003e20 <_printf_float>:
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e24:	b091      	sub	sp, #68	@ 0x44
 8003e26:	460c      	mov	r4, r1
 8003e28:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e2c:	4616      	mov	r6, r2
 8003e2e:	461f      	mov	r7, r3
 8003e30:	4605      	mov	r5, r0
 8003e32:	f000 fcdd 	bl	80047f0 <_localeconv_r>
 8003e36:	6803      	ldr	r3, [r0, #0]
 8003e38:	9308      	str	r3, [sp, #32]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fa18 	bl	8000270 <strlen>
 8003e40:	2300      	movs	r3, #0
 8003e42:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e44:	f8d8 3000 	ldr.w	r3, [r8]
 8003e48:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	f023 0307 	bic.w	r3, r3, #7
 8003e50:	f103 0208 	add.w	r2, r3, #8
 8003e54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e58:	f8d4 b000 	ldr.w	fp, [r4]
 8003e5c:	f8c8 2000 	str.w	r2, [r8]
 8003e60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e6a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003e6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e76:	4b9d      	ldr	r3, [pc, #628]	@ (80040ec <_printf_float+0x2cc>)
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e7c:	f7fc fe56 	bl	8000b2c <__aeabi_dcmpun>
 8003e80:	bb70      	cbnz	r0, 8003ee0 <_printf_float+0xc0>
 8003e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e86:	4b99      	ldr	r3, [pc, #612]	@ (80040ec <_printf_float+0x2cc>)
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e8c:	f7fc fe30 	bl	8000af0 <__aeabi_dcmple>
 8003e90:	bb30      	cbnz	r0, 8003ee0 <_printf_float+0xc0>
 8003e92:	2200      	movs	r2, #0
 8003e94:	2300      	movs	r3, #0
 8003e96:	4640      	mov	r0, r8
 8003e98:	4649      	mov	r1, r9
 8003e9a:	f7fc fe1f 	bl	8000adc <__aeabi_dcmplt>
 8003e9e:	b110      	cbz	r0, 8003ea6 <_printf_float+0x86>
 8003ea0:	232d      	movs	r3, #45	@ 0x2d
 8003ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ea6:	4a92      	ldr	r2, [pc, #584]	@ (80040f0 <_printf_float+0x2d0>)
 8003ea8:	4b92      	ldr	r3, [pc, #584]	@ (80040f4 <_printf_float+0x2d4>)
 8003eaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003eae:	bf94      	ite	ls
 8003eb0:	4690      	movls	r8, r2
 8003eb2:	4698      	movhi	r8, r3
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	f02b 0304 	bic.w	r3, fp, #4
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	f04f 0900 	mov.w	r9, #0
 8003ec2:	9700      	str	r7, [sp, #0]
 8003ec4:	4633      	mov	r3, r6
 8003ec6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f000 f9d4 	bl	8004278 <_printf_common>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	f040 808f 	bne.w	8003ff4 <_printf_float+0x1d4>
 8003ed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eda:	b011      	add	sp, #68	@ 0x44
 8003edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	f7fc fe20 	bl	8000b2c <__aeabi_dcmpun>
 8003eec:	b140      	cbz	r0, 8003f00 <_printf_float+0xe0>
 8003eee:	464b      	mov	r3, r9
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bfbc      	itt	lt
 8003ef4:	232d      	movlt	r3, #45	@ 0x2d
 8003ef6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003efa:	4a7f      	ldr	r2, [pc, #508]	@ (80040f8 <_printf_float+0x2d8>)
 8003efc:	4b7f      	ldr	r3, [pc, #508]	@ (80040fc <_printf_float+0x2dc>)
 8003efe:	e7d4      	b.n	8003eaa <_printf_float+0x8a>
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f08:	d13f      	bne.n	8003f8a <_printf_float+0x16a>
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	6063      	str	r3, [r4, #4]
 8003f0e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f12:	2200      	movs	r2, #0
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	9206      	str	r2, [sp, #24]
 8003f18:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f1a:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f1e:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f20:	9203      	str	r2, [sp, #12]
 8003f22:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	4628      	mov	r0, r5
 8003f34:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f36:	f7ff fed5 	bl	8003ce4 <__cvt>
 8003f3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f3c:	2947      	cmp	r1, #71	@ 0x47
 8003f3e:	4680      	mov	r8, r0
 8003f40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f42:	d128      	bne.n	8003f96 <_printf_float+0x176>
 8003f44:	1cc8      	adds	r0, r1, #3
 8003f46:	db02      	blt.n	8003f4e <_printf_float+0x12e>
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	dd40      	ble.n	8003fd0 <_printf_float+0x1b0>
 8003f4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f52:	fa5f fa8a 	uxtb.w	sl, sl
 8003f56:	3901      	subs	r1, #1
 8003f58:	4652      	mov	r2, sl
 8003f5a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f5e:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f60:	f7ff ff24 	bl	8003dac <__exponent>
 8003f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f66:	1813      	adds	r3, r2, r0
 8003f68:	2a01      	cmp	r2, #1
 8003f6a:	4681      	mov	r9, r0
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	dc02      	bgt.n	8003f76 <_printf_float+0x156>
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	07d2      	lsls	r2, r2, #31
 8003f74:	d501      	bpl.n	8003f7a <_printf_float+0x15a>
 8003f76:	3301      	adds	r3, #1
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d09f      	beq.n	8003ec2 <_printf_float+0xa2>
 8003f82:	232d      	movs	r3, #45	@ 0x2d
 8003f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f88:	e79b      	b.n	8003ec2 <_printf_float+0xa2>
 8003f8a:	2947      	cmp	r1, #71	@ 0x47
 8003f8c:	d1bf      	bne.n	8003f0e <_printf_float+0xee>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1bd      	bne.n	8003f0e <_printf_float+0xee>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e7ba      	b.n	8003f0c <_printf_float+0xec>
 8003f96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f9a:	d9dc      	bls.n	8003f56 <_printf_float+0x136>
 8003f9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003fa0:	d118      	bne.n	8003fd4 <_printf_float+0x1b4>
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	dd0b      	ble.n	8003fc0 <_printf_float+0x1a0>
 8003fa8:	6121      	str	r1, [r4, #16]
 8003faa:	b913      	cbnz	r3, 8003fb2 <_printf_float+0x192>
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	07d0      	lsls	r0, r2, #31
 8003fb0:	d502      	bpl.n	8003fb8 <_printf_float+0x198>
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	440b      	add	r3, r1
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003fba:	f04f 0900 	mov.w	r9, #0
 8003fbe:	e7dc      	b.n	8003f7a <_printf_float+0x15a>
 8003fc0:	b913      	cbnz	r3, 8003fc8 <_printf_float+0x1a8>
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	07d2      	lsls	r2, r2, #31
 8003fc6:	d501      	bpl.n	8003fcc <_printf_float+0x1ac>
 8003fc8:	3302      	adds	r3, #2
 8003fca:	e7f4      	b.n	8003fb6 <_printf_float+0x196>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e7f2      	b.n	8003fb6 <_printf_float+0x196>
 8003fd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	db05      	blt.n	8003fe6 <_printf_float+0x1c6>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	6121      	str	r1, [r4, #16]
 8003fde:	07d8      	lsls	r0, r3, #31
 8003fe0:	d5ea      	bpl.n	8003fb8 <_printf_float+0x198>
 8003fe2:	1c4b      	adds	r3, r1, #1
 8003fe4:	e7e7      	b.n	8003fb6 <_printf_float+0x196>
 8003fe6:	2900      	cmp	r1, #0
 8003fe8:	bfd4      	ite	le
 8003fea:	f1c1 0202 	rsble	r2, r1, #2
 8003fee:	2201      	movgt	r2, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	e7e0      	b.n	8003fb6 <_printf_float+0x196>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	055a      	lsls	r2, r3, #21
 8003ff8:	d407      	bmi.n	800400a <_printf_float+0x1ea>
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	d12b      	bne.n	8004060 <_printf_float+0x240>
 8004008:	e765      	b.n	8003ed6 <_printf_float+0xb6>
 800400a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800400e:	f240 80dd 	bls.w	80041cc <_printf_float+0x3ac>
 8004012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004016:	2200      	movs	r2, #0
 8004018:	2300      	movs	r3, #0
 800401a:	f7fc fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800401e:	2800      	cmp	r0, #0
 8004020:	d033      	beq.n	800408a <_printf_float+0x26a>
 8004022:	4a37      	ldr	r2, [pc, #220]	@ (8004100 <_printf_float+0x2e0>)
 8004024:	2301      	movs	r3, #1
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	f43f af52 	beq.w	8003ed6 <_printf_float+0xb6>
 8004032:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004036:	4543      	cmp	r3, r8
 8004038:	db02      	blt.n	8004040 <_printf_float+0x220>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	07d8      	lsls	r0, r3, #31
 800403e:	d50f      	bpl.n	8004060 <_printf_float+0x240>
 8004040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	f43f af43 	beq.w	8003ed6 <_printf_float+0xb6>
 8004050:	f04f 0900 	mov.w	r9, #0
 8004054:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004058:	f104 0a1a 	add.w	sl, r4, #26
 800405c:	45c8      	cmp	r8, r9
 800405e:	dc09      	bgt.n	8004074 <_printf_float+0x254>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	079b      	lsls	r3, r3, #30
 8004064:	f100 8103 	bmi.w	800426e <_printf_float+0x44e>
 8004068:	68e0      	ldr	r0, [r4, #12]
 800406a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800406c:	4298      	cmp	r0, r3
 800406e:	bfb8      	it	lt
 8004070:	4618      	movlt	r0, r3
 8004072:	e732      	b.n	8003eda <_printf_float+0xba>
 8004074:	2301      	movs	r3, #1
 8004076:	4652      	mov	r2, sl
 8004078:	4631      	mov	r1, r6
 800407a:	4628      	mov	r0, r5
 800407c:	47b8      	blx	r7
 800407e:	3001      	adds	r0, #1
 8004080:	f43f af29 	beq.w	8003ed6 <_printf_float+0xb6>
 8004084:	f109 0901 	add.w	r9, r9, #1
 8004088:	e7e8      	b.n	800405c <_printf_float+0x23c>
 800408a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	dc39      	bgt.n	8004104 <_printf_float+0x2e4>
 8004090:	4a1b      	ldr	r2, [pc, #108]	@ (8004100 <_printf_float+0x2e0>)
 8004092:	2301      	movs	r3, #1
 8004094:	4631      	mov	r1, r6
 8004096:	4628      	mov	r0, r5
 8004098:	47b8      	blx	r7
 800409a:	3001      	adds	r0, #1
 800409c:	f43f af1b 	beq.w	8003ed6 <_printf_float+0xb6>
 80040a0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040a4:	ea59 0303 	orrs.w	r3, r9, r3
 80040a8:	d102      	bne.n	80040b0 <_printf_float+0x290>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	07d9      	lsls	r1, r3, #31
 80040ae:	d5d7      	bpl.n	8004060 <_printf_float+0x240>
 80040b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040b4:	4631      	mov	r1, r6
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b8      	blx	r7
 80040ba:	3001      	adds	r0, #1
 80040bc:	f43f af0b 	beq.w	8003ed6 <_printf_float+0xb6>
 80040c0:	f04f 0a00 	mov.w	sl, #0
 80040c4:	f104 0b1a 	add.w	fp, r4, #26
 80040c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040ca:	425b      	negs	r3, r3
 80040cc:	4553      	cmp	r3, sl
 80040ce:	dc01      	bgt.n	80040d4 <_printf_float+0x2b4>
 80040d0:	464b      	mov	r3, r9
 80040d2:	e793      	b.n	8003ffc <_printf_float+0x1dc>
 80040d4:	2301      	movs	r3, #1
 80040d6:	465a      	mov	r2, fp
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f aef9 	beq.w	8003ed6 <_printf_float+0xb6>
 80040e4:	f10a 0a01 	add.w	sl, sl, #1
 80040e8:	e7ee      	b.n	80040c8 <_printf_float+0x2a8>
 80040ea:	bf00      	nop
 80040ec:	7fefffff 	.word	0x7fefffff
 80040f0:	080069d0 	.word	0x080069d0
 80040f4:	080069d4 	.word	0x080069d4
 80040f8:	080069d8 	.word	0x080069d8
 80040fc:	080069dc 	.word	0x080069dc
 8004100:	080069e0 	.word	0x080069e0
 8004104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004106:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800410a:	4553      	cmp	r3, sl
 800410c:	bfa8      	it	ge
 800410e:	4653      	movge	r3, sl
 8004110:	2b00      	cmp	r3, #0
 8004112:	4699      	mov	r9, r3
 8004114:	dc36      	bgt.n	8004184 <_printf_float+0x364>
 8004116:	f04f 0b00 	mov.w	fp, #0
 800411a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800411e:	f104 021a 	add.w	r2, r4, #26
 8004122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004124:	930a      	str	r3, [sp, #40]	@ 0x28
 8004126:	eba3 0309 	sub.w	r3, r3, r9
 800412a:	455b      	cmp	r3, fp
 800412c:	dc31      	bgt.n	8004192 <_printf_float+0x372>
 800412e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004130:	459a      	cmp	sl, r3
 8004132:	dc3a      	bgt.n	80041aa <_printf_float+0x38a>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	07da      	lsls	r2, r3, #31
 8004138:	d437      	bmi.n	80041aa <_printf_float+0x38a>
 800413a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800413c:	ebaa 0903 	sub.w	r9, sl, r3
 8004140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004142:	ebaa 0303 	sub.w	r3, sl, r3
 8004146:	4599      	cmp	r9, r3
 8004148:	bfa8      	it	ge
 800414a:	4699      	movge	r9, r3
 800414c:	f1b9 0f00 	cmp.w	r9, #0
 8004150:	dc33      	bgt.n	80041ba <_printf_float+0x39a>
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800415a:	f104 0b1a 	add.w	fp, r4, #26
 800415e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004160:	ebaa 0303 	sub.w	r3, sl, r3
 8004164:	eba3 0309 	sub.w	r3, r3, r9
 8004168:	4543      	cmp	r3, r8
 800416a:	f77f af79 	ble.w	8004060 <_printf_float+0x240>
 800416e:	2301      	movs	r3, #1
 8004170:	465a      	mov	r2, fp
 8004172:	4631      	mov	r1, r6
 8004174:	4628      	mov	r0, r5
 8004176:	47b8      	blx	r7
 8004178:	3001      	adds	r0, #1
 800417a:	f43f aeac 	beq.w	8003ed6 <_printf_float+0xb6>
 800417e:	f108 0801 	add.w	r8, r8, #1
 8004182:	e7ec      	b.n	800415e <_printf_float+0x33e>
 8004184:	4642      	mov	r2, r8
 8004186:	4631      	mov	r1, r6
 8004188:	4628      	mov	r0, r5
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	d1c2      	bne.n	8004116 <_printf_float+0x2f6>
 8004190:	e6a1      	b.n	8003ed6 <_printf_float+0xb6>
 8004192:	2301      	movs	r3, #1
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	920a      	str	r2, [sp, #40]	@ 0x28
 800419a:	47b8      	blx	r7
 800419c:	3001      	adds	r0, #1
 800419e:	f43f ae9a 	beq.w	8003ed6 <_printf_float+0xb6>
 80041a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041a4:	f10b 0b01 	add.w	fp, fp, #1
 80041a8:	e7bb      	b.n	8004122 <_printf_float+0x302>
 80041aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b8      	blx	r7
 80041b4:	3001      	adds	r0, #1
 80041b6:	d1c0      	bne.n	800413a <_printf_float+0x31a>
 80041b8:	e68d      	b.n	8003ed6 <_printf_float+0xb6>
 80041ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041bc:	464b      	mov	r3, r9
 80041be:	4442      	add	r2, r8
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	d1c3      	bne.n	8004152 <_printf_float+0x332>
 80041ca:	e684      	b.n	8003ed6 <_printf_float+0xb6>
 80041cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041d0:	f1ba 0f01 	cmp.w	sl, #1
 80041d4:	dc01      	bgt.n	80041da <_printf_float+0x3ba>
 80041d6:	07db      	lsls	r3, r3, #31
 80041d8:	d536      	bpl.n	8004248 <_printf_float+0x428>
 80041da:	2301      	movs	r3, #1
 80041dc:	4642      	mov	r2, r8
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	f43f ae76 	beq.w	8003ed6 <_printf_float+0xb6>
 80041ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041ee:	4631      	mov	r1, r6
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae6e 	beq.w	8003ed6 <_printf_float+0xb6>
 80041fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041fe:	2200      	movs	r2, #0
 8004200:	2300      	movs	r3, #0
 8004202:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004206:	f7fc fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800420a:	b9c0      	cbnz	r0, 800423e <_printf_float+0x41e>
 800420c:	4653      	mov	r3, sl
 800420e:	f108 0201 	add.w	r2, r8, #1
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	d10c      	bne.n	8004236 <_printf_float+0x416>
 800421c:	e65b      	b.n	8003ed6 <_printf_float+0xb6>
 800421e:	2301      	movs	r3, #1
 8004220:	465a      	mov	r2, fp
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	47b8      	blx	r7
 8004228:	3001      	adds	r0, #1
 800422a:	f43f ae54 	beq.w	8003ed6 <_printf_float+0xb6>
 800422e:	f108 0801 	add.w	r8, r8, #1
 8004232:	45d0      	cmp	r8, sl
 8004234:	dbf3      	blt.n	800421e <_printf_float+0x3fe>
 8004236:	464b      	mov	r3, r9
 8004238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800423c:	e6df      	b.n	8003ffe <_printf_float+0x1de>
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	f104 0b1a 	add.w	fp, r4, #26
 8004246:	e7f4      	b.n	8004232 <_printf_float+0x412>
 8004248:	2301      	movs	r3, #1
 800424a:	4642      	mov	r2, r8
 800424c:	e7e1      	b.n	8004212 <_printf_float+0x3f2>
 800424e:	2301      	movs	r3, #1
 8004250:	464a      	mov	r2, r9
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	f43f ae3c 	beq.w	8003ed6 <_printf_float+0xb6>
 800425e:	f108 0801 	add.w	r8, r8, #1
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004266:	1a5b      	subs	r3, r3, r1
 8004268:	4543      	cmp	r3, r8
 800426a:	dcf0      	bgt.n	800424e <_printf_float+0x42e>
 800426c:	e6fc      	b.n	8004068 <_printf_float+0x248>
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	f104 0919 	add.w	r9, r4, #25
 8004276:	e7f4      	b.n	8004262 <_printf_float+0x442>

08004278 <_printf_common>:
 8004278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427c:	4616      	mov	r6, r2
 800427e:	4698      	mov	r8, r3
 8004280:	688a      	ldr	r2, [r1, #8]
 8004282:	690b      	ldr	r3, [r1, #16]
 8004284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004288:	4293      	cmp	r3, r2
 800428a:	bfb8      	it	lt
 800428c:	4613      	movlt	r3, r2
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004294:	4607      	mov	r7, r0
 8004296:	460c      	mov	r4, r1
 8004298:	b10a      	cbz	r2, 800429e <_printf_common+0x26>
 800429a:	3301      	adds	r3, #1
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	0699      	lsls	r1, r3, #26
 80042a2:	bf42      	ittt	mi
 80042a4:	6833      	ldrmi	r3, [r6, #0]
 80042a6:	3302      	addmi	r3, #2
 80042a8:	6033      	strmi	r3, [r6, #0]
 80042aa:	6825      	ldr	r5, [r4, #0]
 80042ac:	f015 0506 	ands.w	r5, r5, #6
 80042b0:	d106      	bne.n	80042c0 <_printf_common+0x48>
 80042b2:	f104 0a19 	add.w	sl, r4, #25
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	6832      	ldr	r2, [r6, #0]
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	42ab      	cmp	r3, r5
 80042be:	dc26      	bgt.n	800430e <_printf_common+0x96>
 80042c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	3b00      	subs	r3, #0
 80042c8:	bf18      	it	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	0692      	lsls	r2, r2, #26
 80042ce:	d42b      	bmi.n	8004328 <_printf_common+0xb0>
 80042d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042d4:	4641      	mov	r1, r8
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c8      	blx	r9
 80042da:	3001      	adds	r0, #1
 80042dc:	d01e      	beq.n	800431c <_printf_common+0xa4>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	f003 0306 	and.w	r3, r3, #6
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	bf02      	ittt	eq
 80042ea:	68e5      	ldreq	r5, [r4, #12]
 80042ec:	6833      	ldreq	r3, [r6, #0]
 80042ee:	1aed      	subeq	r5, r5, r3
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	bf0c      	ite	eq
 80042f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f8:	2500      	movne	r5, #0
 80042fa:	4293      	cmp	r3, r2
 80042fc:	bfc4      	itt	gt
 80042fe:	1a9b      	subgt	r3, r3, r2
 8004300:	18ed      	addgt	r5, r5, r3
 8004302:	2600      	movs	r6, #0
 8004304:	341a      	adds	r4, #26
 8004306:	42b5      	cmp	r5, r6
 8004308:	d11a      	bne.n	8004340 <_printf_common+0xc8>
 800430a:	2000      	movs	r0, #0
 800430c:	e008      	b.n	8004320 <_printf_common+0xa8>
 800430e:	2301      	movs	r3, #1
 8004310:	4652      	mov	r2, sl
 8004312:	4641      	mov	r1, r8
 8004314:	4638      	mov	r0, r7
 8004316:	47c8      	blx	r9
 8004318:	3001      	adds	r0, #1
 800431a:	d103      	bne.n	8004324 <_printf_common+0xac>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004324:	3501      	adds	r5, #1
 8004326:	e7c6      	b.n	80042b6 <_printf_common+0x3e>
 8004328:	18e1      	adds	r1, r4, r3
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	2030      	movs	r0, #48	@ 0x30
 800432e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004332:	4422      	add	r2, r4
 8004334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800433c:	3302      	adds	r3, #2
 800433e:	e7c7      	b.n	80042d0 <_printf_common+0x58>
 8004340:	2301      	movs	r3, #1
 8004342:	4622      	mov	r2, r4
 8004344:	4641      	mov	r1, r8
 8004346:	4638      	mov	r0, r7
 8004348:	47c8      	blx	r9
 800434a:	3001      	adds	r0, #1
 800434c:	d0e6      	beq.n	800431c <_printf_common+0xa4>
 800434e:	3601      	adds	r6, #1
 8004350:	e7d9      	b.n	8004306 <_printf_common+0x8e>
	...

08004354 <_printf_i>:
 8004354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	7e0f      	ldrb	r7, [r1, #24]
 800435a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800435c:	2f78      	cmp	r7, #120	@ 0x78
 800435e:	4691      	mov	r9, r2
 8004360:	4680      	mov	r8, r0
 8004362:	460c      	mov	r4, r1
 8004364:	469a      	mov	sl, r3
 8004366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800436a:	d807      	bhi.n	800437c <_printf_i+0x28>
 800436c:	2f62      	cmp	r7, #98	@ 0x62
 800436e:	d80a      	bhi.n	8004386 <_printf_i+0x32>
 8004370:	2f00      	cmp	r7, #0
 8004372:	f000 80d2 	beq.w	800451a <_printf_i+0x1c6>
 8004376:	2f58      	cmp	r7, #88	@ 0x58
 8004378:	f000 80b9 	beq.w	80044ee <_printf_i+0x19a>
 800437c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004384:	e03a      	b.n	80043fc <_printf_i+0xa8>
 8004386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800438a:	2b15      	cmp	r3, #21
 800438c:	d8f6      	bhi.n	800437c <_printf_i+0x28>
 800438e:	a101      	add	r1, pc, #4	@ (adr r1, 8004394 <_printf_i+0x40>)
 8004390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004394:	080043ed 	.word	0x080043ed
 8004398:	08004401 	.word	0x08004401
 800439c:	0800437d 	.word	0x0800437d
 80043a0:	0800437d 	.word	0x0800437d
 80043a4:	0800437d 	.word	0x0800437d
 80043a8:	0800437d 	.word	0x0800437d
 80043ac:	08004401 	.word	0x08004401
 80043b0:	0800437d 	.word	0x0800437d
 80043b4:	0800437d 	.word	0x0800437d
 80043b8:	0800437d 	.word	0x0800437d
 80043bc:	0800437d 	.word	0x0800437d
 80043c0:	08004501 	.word	0x08004501
 80043c4:	0800442b 	.word	0x0800442b
 80043c8:	080044bb 	.word	0x080044bb
 80043cc:	0800437d 	.word	0x0800437d
 80043d0:	0800437d 	.word	0x0800437d
 80043d4:	08004523 	.word	0x08004523
 80043d8:	0800437d 	.word	0x0800437d
 80043dc:	0800442b 	.word	0x0800442b
 80043e0:	0800437d 	.word	0x0800437d
 80043e4:	0800437d 	.word	0x0800437d
 80043e8:	080044c3 	.word	0x080044c3
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	1d1a      	adds	r2, r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6032      	str	r2, [r6, #0]
 80043f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043fc:	2301      	movs	r3, #1
 80043fe:	e09d      	b.n	800453c <_printf_i+0x1e8>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	1d19      	adds	r1, r3, #4
 8004406:	6031      	str	r1, [r6, #0]
 8004408:	0606      	lsls	r6, r0, #24
 800440a:	d501      	bpl.n	8004410 <_printf_i+0xbc>
 800440c:	681d      	ldr	r5, [r3, #0]
 800440e:	e003      	b.n	8004418 <_printf_i+0xc4>
 8004410:	0645      	lsls	r5, r0, #25
 8004412:	d5fb      	bpl.n	800440c <_printf_i+0xb8>
 8004414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004418:	2d00      	cmp	r5, #0
 800441a:	da03      	bge.n	8004424 <_printf_i+0xd0>
 800441c:	232d      	movs	r3, #45	@ 0x2d
 800441e:	426d      	negs	r5, r5
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004424:	4859      	ldr	r0, [pc, #356]	@ (800458c <_printf_i+0x238>)
 8004426:	230a      	movs	r3, #10
 8004428:	e011      	b.n	800444e <_printf_i+0xfa>
 800442a:	6821      	ldr	r1, [r4, #0]
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	0608      	lsls	r0, r1, #24
 8004430:	f853 5b04 	ldr.w	r5, [r3], #4
 8004434:	d402      	bmi.n	800443c <_printf_i+0xe8>
 8004436:	0649      	lsls	r1, r1, #25
 8004438:	bf48      	it	mi
 800443a:	b2ad      	uxthmi	r5, r5
 800443c:	2f6f      	cmp	r7, #111	@ 0x6f
 800443e:	4853      	ldr	r0, [pc, #332]	@ (800458c <_printf_i+0x238>)
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	bf14      	ite	ne
 8004444:	230a      	movne	r3, #10
 8004446:	2308      	moveq	r3, #8
 8004448:	2100      	movs	r1, #0
 800444a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800444e:	6866      	ldr	r6, [r4, #4]
 8004450:	60a6      	str	r6, [r4, #8]
 8004452:	2e00      	cmp	r6, #0
 8004454:	bfa2      	ittt	ge
 8004456:	6821      	ldrge	r1, [r4, #0]
 8004458:	f021 0104 	bicge.w	r1, r1, #4
 800445c:	6021      	strge	r1, [r4, #0]
 800445e:	b90d      	cbnz	r5, 8004464 <_printf_i+0x110>
 8004460:	2e00      	cmp	r6, #0
 8004462:	d04b      	beq.n	80044fc <_printf_i+0x1a8>
 8004464:	4616      	mov	r6, r2
 8004466:	fbb5 f1f3 	udiv	r1, r5, r3
 800446a:	fb03 5711 	mls	r7, r3, r1, r5
 800446e:	5dc7      	ldrb	r7, [r0, r7]
 8004470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004474:	462f      	mov	r7, r5
 8004476:	42bb      	cmp	r3, r7
 8004478:	460d      	mov	r5, r1
 800447a:	d9f4      	bls.n	8004466 <_printf_i+0x112>
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10b      	bne.n	8004498 <_printf_i+0x144>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	07df      	lsls	r7, r3, #31
 8004484:	d508      	bpl.n	8004498 <_printf_i+0x144>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	4299      	cmp	r1, r3
 800448c:	bfde      	ittt	le
 800448e:	2330      	movle	r3, #48	@ 0x30
 8004490:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004494:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004498:	1b92      	subs	r2, r2, r6
 800449a:	6122      	str	r2, [r4, #16]
 800449c:	f8cd a000 	str.w	sl, [sp]
 80044a0:	464b      	mov	r3, r9
 80044a2:	aa03      	add	r2, sp, #12
 80044a4:	4621      	mov	r1, r4
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fee6 	bl	8004278 <_printf_common>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d14a      	bne.n	8004546 <_printf_i+0x1f2>
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044b4:	b004      	add	sp, #16
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	4833      	ldr	r0, [pc, #204]	@ (8004590 <_printf_i+0x23c>)
 80044c4:	2778      	movs	r7, #120	@ 0x78
 80044c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	6831      	ldr	r1, [r6, #0]
 80044ce:	061f      	lsls	r7, r3, #24
 80044d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80044d4:	d402      	bmi.n	80044dc <_printf_i+0x188>
 80044d6:	065f      	lsls	r7, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2ad      	uxthmi	r5, r5
 80044dc:	6031      	str	r1, [r6, #0]
 80044de:	07d9      	lsls	r1, r3, #31
 80044e0:	bf44      	itt	mi
 80044e2:	f043 0320 	orrmi.w	r3, r3, #32
 80044e6:	6023      	strmi	r3, [r4, #0]
 80044e8:	b11d      	cbz	r5, 80044f2 <_printf_i+0x19e>
 80044ea:	2310      	movs	r3, #16
 80044ec:	e7ac      	b.n	8004448 <_printf_i+0xf4>
 80044ee:	4827      	ldr	r0, [pc, #156]	@ (800458c <_printf_i+0x238>)
 80044f0:	e7e9      	b.n	80044c6 <_printf_i+0x172>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f023 0320 	bic.w	r3, r3, #32
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	e7f6      	b.n	80044ea <_printf_i+0x196>
 80044fc:	4616      	mov	r6, r2
 80044fe:	e7bd      	b.n	800447c <_printf_i+0x128>
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	6961      	ldr	r1, [r4, #20]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6030      	str	r0, [r6, #0]
 800450a:	062e      	lsls	r6, r5, #24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x1c0>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1c6>
 8004514:	0668      	lsls	r0, r5, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x1bc>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	4616      	mov	r6, r2
 8004520:	e7bc      	b.n	800449c <_printf_i+0x148>
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	6032      	str	r2, [r6, #0]
 8004528:	681e      	ldr	r6, [r3, #0]
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	2100      	movs	r1, #0
 800452e:	4630      	mov	r0, r6
 8004530:	f7fb fe4e 	bl	80001d0 <memchr>
 8004534:	b108      	cbz	r0, 800453a <_printf_i+0x1e6>
 8004536:	1b80      	subs	r0, r0, r6
 8004538:	6060      	str	r0, [r4, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004544:	e7aa      	b.n	800449c <_printf_i+0x148>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	4632      	mov	r2, r6
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d0ad      	beq.n	80044b0 <_printf_i+0x15c>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	079b      	lsls	r3, r3, #30
 8004558:	d413      	bmi.n	8004582 <_printf_i+0x22e>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	4298      	cmp	r0, r3
 8004560:	bfb8      	it	lt
 8004562:	4618      	movlt	r0, r3
 8004564:	e7a6      	b.n	80044b4 <_printf_i+0x160>
 8004566:	2301      	movs	r3, #1
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d09d      	beq.n	80044b0 <_printf_i+0x15c>
 8004574:	3501      	adds	r5, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9903      	ldr	r1, [sp, #12]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	42ab      	cmp	r3, r5
 800457e:	dcf2      	bgt.n	8004566 <_printf_i+0x212>
 8004580:	e7eb      	b.n	800455a <_printf_i+0x206>
 8004582:	2500      	movs	r5, #0
 8004584:	f104 0619 	add.w	r6, r4, #25
 8004588:	e7f5      	b.n	8004576 <_printf_i+0x222>
 800458a:	bf00      	nop
 800458c:	080069e2 	.word	0x080069e2
 8004590:	080069f3 	.word	0x080069f3

08004594 <std>:
 8004594:	2300      	movs	r3, #0
 8004596:	b510      	push	{r4, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	e9c0 3300 	strd	r3, r3, [r0]
 800459e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045a2:	6083      	str	r3, [r0, #8]
 80045a4:	8181      	strh	r1, [r0, #12]
 80045a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80045a8:	81c2      	strh	r2, [r0, #14]
 80045aa:	6183      	str	r3, [r0, #24]
 80045ac:	4619      	mov	r1, r3
 80045ae:	2208      	movs	r2, #8
 80045b0:	305c      	adds	r0, #92	@ 0x5c
 80045b2:	f000 f914 	bl	80047de <memset>
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <std+0x58>)
 80045b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80045ba:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <std+0x5c>)
 80045bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045be:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <std+0x60>)
 80045c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <std+0x64>)
 80045c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80045c6:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <std+0x68>)
 80045c8:	6224      	str	r4, [r4, #32]
 80045ca:	429c      	cmp	r4, r3
 80045cc:	d006      	beq.n	80045dc <std+0x48>
 80045ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045d2:	4294      	cmp	r4, r2
 80045d4:	d002      	beq.n	80045dc <std+0x48>
 80045d6:	33d0      	adds	r3, #208	@ 0xd0
 80045d8:	429c      	cmp	r4, r3
 80045da:	d105      	bne.n	80045e8 <std+0x54>
 80045dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	f000 b978 	b.w	80048d8 <__retarget_lock_init_recursive>
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	bf00      	nop
 80045ec:	08004759 	.word	0x08004759
 80045f0:	0800477b 	.word	0x0800477b
 80045f4:	080047b3 	.word	0x080047b3
 80045f8:	080047d7 	.word	0x080047d7
 80045fc:	200002c4 	.word	0x200002c4

08004600 <stdio_exit_handler>:
 8004600:	4a02      	ldr	r2, [pc, #8]	@ (800460c <stdio_exit_handler+0xc>)
 8004602:	4903      	ldr	r1, [pc, #12]	@ (8004610 <stdio_exit_handler+0x10>)
 8004604:	4803      	ldr	r0, [pc, #12]	@ (8004614 <stdio_exit_handler+0x14>)
 8004606:	f000 b869 	b.w	80046dc <_fwalk_sglue>
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c
 8004610:	08006231 	.word	0x08006231
 8004614:	2000001c 	.word	0x2000001c

08004618 <cleanup_stdio>:
 8004618:	6841      	ldr	r1, [r0, #4]
 800461a:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <cleanup_stdio+0x34>)
 800461c:	4299      	cmp	r1, r3
 800461e:	b510      	push	{r4, lr}
 8004620:	4604      	mov	r4, r0
 8004622:	d001      	beq.n	8004628 <cleanup_stdio+0x10>
 8004624:	f001 fe04 	bl	8006230 <_fflush_r>
 8004628:	68a1      	ldr	r1, [r4, #8]
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <cleanup_stdio+0x38>)
 800462c:	4299      	cmp	r1, r3
 800462e:	d002      	beq.n	8004636 <cleanup_stdio+0x1e>
 8004630:	4620      	mov	r0, r4
 8004632:	f001 fdfd 	bl	8006230 <_fflush_r>
 8004636:	68e1      	ldr	r1, [r4, #12]
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <cleanup_stdio+0x3c>)
 800463a:	4299      	cmp	r1, r3
 800463c:	d004      	beq.n	8004648 <cleanup_stdio+0x30>
 800463e:	4620      	mov	r0, r4
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004644:	f001 bdf4 	b.w	8006230 <_fflush_r>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	bf00      	nop
 800464c:	200002c4 	.word	0x200002c4
 8004650:	2000032c 	.word	0x2000032c
 8004654:	20000394 	.word	0x20000394

08004658 <global_stdio_init.part.0>:
 8004658:	b510      	push	{r4, lr}
 800465a:	4b0b      	ldr	r3, [pc, #44]	@ (8004688 <global_stdio_init.part.0+0x30>)
 800465c:	4c0b      	ldr	r4, [pc, #44]	@ (800468c <global_stdio_init.part.0+0x34>)
 800465e:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <global_stdio_init.part.0+0x38>)
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	4620      	mov	r0, r4
 8004664:	2200      	movs	r2, #0
 8004666:	2104      	movs	r1, #4
 8004668:	f7ff ff94 	bl	8004594 <std>
 800466c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004670:	2201      	movs	r2, #1
 8004672:	2109      	movs	r1, #9
 8004674:	f7ff ff8e 	bl	8004594 <std>
 8004678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800467c:	2202      	movs	r2, #2
 800467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004682:	2112      	movs	r1, #18
 8004684:	f7ff bf86 	b.w	8004594 <std>
 8004688:	200003fc 	.word	0x200003fc
 800468c:	200002c4 	.word	0x200002c4
 8004690:	08004601 	.word	0x08004601

08004694 <__sfp_lock_acquire>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__sfp_lock_acquire+0x8>)
 8004696:	f000 b920 	b.w	80048da <__retarget_lock_acquire_recursive>
 800469a:	bf00      	nop
 800469c:	20000405 	.word	0x20000405

080046a0 <__sfp_lock_release>:
 80046a0:	4801      	ldr	r0, [pc, #4]	@ (80046a8 <__sfp_lock_release+0x8>)
 80046a2:	f000 b91b 	b.w	80048dc <__retarget_lock_release_recursive>
 80046a6:	bf00      	nop
 80046a8:	20000405 	.word	0x20000405

080046ac <__sinit>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4604      	mov	r4, r0
 80046b0:	f7ff fff0 	bl	8004694 <__sfp_lock_acquire>
 80046b4:	6a23      	ldr	r3, [r4, #32]
 80046b6:	b11b      	cbz	r3, 80046c0 <__sinit+0x14>
 80046b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046bc:	f7ff bff0 	b.w	80046a0 <__sfp_lock_release>
 80046c0:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <__sinit+0x28>)
 80046c2:	6223      	str	r3, [r4, #32]
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <__sinit+0x2c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f5      	bne.n	80046b8 <__sinit+0xc>
 80046cc:	f7ff ffc4 	bl	8004658 <global_stdio_init.part.0>
 80046d0:	e7f2      	b.n	80046b8 <__sinit+0xc>
 80046d2:	bf00      	nop
 80046d4:	08004619 	.word	0x08004619
 80046d8:	200003fc 	.word	0x200003fc

080046dc <_fwalk_sglue>:
 80046dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e0:	4607      	mov	r7, r0
 80046e2:	4688      	mov	r8, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	2600      	movs	r6, #0
 80046e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ec:	f1b9 0901 	subs.w	r9, r9, #1
 80046f0:	d505      	bpl.n	80046fe <_fwalk_sglue+0x22>
 80046f2:	6824      	ldr	r4, [r4, #0]
 80046f4:	2c00      	cmp	r4, #0
 80046f6:	d1f7      	bne.n	80046e8 <_fwalk_sglue+0xc>
 80046f8:	4630      	mov	r0, r6
 80046fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d907      	bls.n	8004714 <_fwalk_sglue+0x38>
 8004704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004708:	3301      	adds	r3, #1
 800470a:	d003      	beq.n	8004714 <_fwalk_sglue+0x38>
 800470c:	4629      	mov	r1, r5
 800470e:	4638      	mov	r0, r7
 8004710:	47c0      	blx	r8
 8004712:	4306      	orrs	r6, r0
 8004714:	3568      	adds	r5, #104	@ 0x68
 8004716:	e7e9      	b.n	80046ec <_fwalk_sglue+0x10>

08004718 <siprintf>:
 8004718:	b40e      	push	{r1, r2, r3}
 800471a:	b500      	push	{lr}
 800471c:	b09c      	sub	sp, #112	@ 0x70
 800471e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004720:	9002      	str	r0, [sp, #8]
 8004722:	9006      	str	r0, [sp, #24]
 8004724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004728:	4809      	ldr	r0, [pc, #36]	@ (8004750 <siprintf+0x38>)
 800472a:	9107      	str	r1, [sp, #28]
 800472c:	9104      	str	r1, [sp, #16]
 800472e:	4909      	ldr	r1, [pc, #36]	@ (8004754 <siprintf+0x3c>)
 8004730:	f853 2b04 	ldr.w	r2, [r3], #4
 8004734:	9105      	str	r1, [sp, #20]
 8004736:	6800      	ldr	r0, [r0, #0]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	a902      	add	r1, sp, #8
 800473c:	f001 fbfc 	bl	8005f38 <_svfiprintf_r>
 8004740:	9b02      	ldr	r3, [sp, #8]
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	b01c      	add	sp, #112	@ 0x70
 8004748:	f85d eb04 	ldr.w	lr, [sp], #4
 800474c:	b003      	add	sp, #12
 800474e:	4770      	bx	lr
 8004750:	20000018 	.word	0x20000018
 8004754:	ffff0208 	.word	0xffff0208

08004758 <__sread>:
 8004758:	b510      	push	{r4, lr}
 800475a:	460c      	mov	r4, r1
 800475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004760:	f000 f86c 	bl	800483c <_read_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	bfab      	itete	ge
 8004768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800476a:	89a3      	ldrhlt	r3, [r4, #12]
 800476c:	181b      	addge	r3, r3, r0
 800476e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004772:	bfac      	ite	ge
 8004774:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004776:	81a3      	strhlt	r3, [r4, #12]
 8004778:	bd10      	pop	{r4, pc}

0800477a <__swrite>:
 800477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477e:	461f      	mov	r7, r3
 8004780:	898b      	ldrh	r3, [r1, #12]
 8004782:	05db      	lsls	r3, r3, #23
 8004784:	4605      	mov	r5, r0
 8004786:	460c      	mov	r4, r1
 8004788:	4616      	mov	r6, r2
 800478a:	d505      	bpl.n	8004798 <__swrite+0x1e>
 800478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004790:	2302      	movs	r3, #2
 8004792:	2200      	movs	r2, #0
 8004794:	f000 f840 	bl	8004818 <_lseek_r>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800479e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	4632      	mov	r2, r6
 80047a6:	463b      	mov	r3, r7
 80047a8:	4628      	mov	r0, r5
 80047aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ae:	f000 b857 	b.w	8004860 <_write_r>

080047b2 <__sseek>:
 80047b2:	b510      	push	{r4, lr}
 80047b4:	460c      	mov	r4, r1
 80047b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ba:	f000 f82d 	bl	8004818 <_lseek_r>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	bf15      	itete	ne
 80047c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047ce:	81a3      	strheq	r3, [r4, #12]
 80047d0:	bf18      	it	ne
 80047d2:	81a3      	strhne	r3, [r4, #12]
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <__sclose>:
 80047d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047da:	f000 b80d 	b.w	80047f8 <_close_r>

080047de <memset>:
 80047de:	4402      	add	r2, r0
 80047e0:	4603      	mov	r3, r0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d100      	bne.n	80047e8 <memset+0xa>
 80047e6:	4770      	bx	lr
 80047e8:	f803 1b01 	strb.w	r1, [r3], #1
 80047ec:	e7f9      	b.n	80047e2 <memset+0x4>
	...

080047f0 <_localeconv_r>:
 80047f0:	4800      	ldr	r0, [pc, #0]	@ (80047f4 <_localeconv_r+0x4>)
 80047f2:	4770      	bx	lr
 80047f4:	20000158 	.word	0x20000158

080047f8 <_close_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4d06      	ldr	r5, [pc, #24]	@ (8004814 <_close_r+0x1c>)
 80047fc:	2300      	movs	r3, #0
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fd f833 	bl	800186e <_close>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_close_r+0x1a>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_close_r+0x1a>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000400 	.word	0x20000400

08004818 <_lseek_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4d07      	ldr	r5, [pc, #28]	@ (8004838 <_lseek_r+0x20>)
 800481c:	4604      	mov	r4, r0
 800481e:	4608      	mov	r0, r1
 8004820:	4611      	mov	r1, r2
 8004822:	2200      	movs	r2, #0
 8004824:	602a      	str	r2, [r5, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f7fd f845 	bl	80018b6 <_lseek>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d102      	bne.n	8004836 <_lseek_r+0x1e>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	b103      	cbz	r3, 8004836 <_lseek_r+0x1e>
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	bd38      	pop	{r3, r4, r5, pc}
 8004838:	20000400 	.word	0x20000400

0800483c <_read_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	@ (800485c <_read_r+0x20>)
 8004840:	4604      	mov	r4, r0
 8004842:	4608      	mov	r0, r1
 8004844:	4611      	mov	r1, r2
 8004846:	2200      	movs	r2, #0
 8004848:	602a      	str	r2, [r5, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	f7fc ffd6 	bl	80017fc <_read>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_read_r+0x1e>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_read_r+0x1e>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000400 	.word	0x20000400

08004860 <_write_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d07      	ldr	r5, [pc, #28]	@ (8004880 <_write_r+0x20>)
 8004864:	4604      	mov	r4, r0
 8004866:	4608      	mov	r0, r1
 8004868:	4611      	mov	r1, r2
 800486a:	2200      	movs	r2, #0
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc ffe1 	bl	8001836 <_write>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_write_r+0x1e>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_write_r+0x1e>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	20000400 	.word	0x20000400

08004884 <__errno>:
 8004884:	4b01      	ldr	r3, [pc, #4]	@ (800488c <__errno+0x8>)
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000018 	.word	0x20000018

08004890 <__libc_init_array>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4d0d      	ldr	r5, [pc, #52]	@ (80048c8 <__libc_init_array+0x38>)
 8004894:	4c0d      	ldr	r4, [pc, #52]	@ (80048cc <__libc_init_array+0x3c>)
 8004896:	1b64      	subs	r4, r4, r5
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	2600      	movs	r6, #0
 800489c:	42a6      	cmp	r6, r4
 800489e:	d109      	bne.n	80048b4 <__libc_init_array+0x24>
 80048a0:	4d0b      	ldr	r5, [pc, #44]	@ (80048d0 <__libc_init_array+0x40>)
 80048a2:	4c0c      	ldr	r4, [pc, #48]	@ (80048d4 <__libc_init_array+0x44>)
 80048a4:	f002 f860 	bl	8006968 <_init>
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	2600      	movs	r6, #0
 80048ae:	42a6      	cmp	r6, r4
 80048b0:	d105      	bne.n	80048be <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b8:	4798      	blx	r3
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7ee      	b.n	800489c <__libc_init_array+0xc>
 80048be:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c2:	4798      	blx	r3
 80048c4:	3601      	adds	r6, #1
 80048c6:	e7f2      	b.n	80048ae <__libc_init_array+0x1e>
 80048c8:	08006d48 	.word	0x08006d48
 80048cc:	08006d48 	.word	0x08006d48
 80048d0:	08006d48 	.word	0x08006d48
 80048d4:	08006d4c 	.word	0x08006d4c

080048d8 <__retarget_lock_init_recursive>:
 80048d8:	4770      	bx	lr

080048da <__retarget_lock_acquire_recursive>:
 80048da:	4770      	bx	lr

080048dc <__retarget_lock_release_recursive>:
 80048dc:	4770      	bx	lr

080048de <quorem>:
 80048de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e2:	6903      	ldr	r3, [r0, #16]
 80048e4:	690c      	ldr	r4, [r1, #16]
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	4607      	mov	r7, r0
 80048ea:	db7e      	blt.n	80049ea <quorem+0x10c>
 80048ec:	3c01      	subs	r4, #1
 80048ee:	f101 0814 	add.w	r8, r1, #20
 80048f2:	00a3      	lsls	r3, r4, #2
 80048f4:	f100 0514 	add.w	r5, r0, #20
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004908:	3301      	adds	r3, #1
 800490a:	429a      	cmp	r2, r3
 800490c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004910:	fbb2 f6f3 	udiv	r6, r2, r3
 8004914:	d32e      	bcc.n	8004974 <quorem+0x96>
 8004916:	f04f 0a00 	mov.w	sl, #0
 800491a:	46c4      	mov	ip, r8
 800491c:	46ae      	mov	lr, r5
 800491e:	46d3      	mov	fp, sl
 8004920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004924:	b298      	uxth	r0, r3
 8004926:	fb06 a000 	mla	r0, r6, r0, sl
 800492a:	0c02      	lsrs	r2, r0, #16
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	fb06 2303 	mla	r3, r6, r3, r2
 8004932:	f8de 2000 	ldr.w	r2, [lr]
 8004936:	b280      	uxth	r0, r0
 8004938:	b292      	uxth	r2, r2
 800493a:	1a12      	subs	r2, r2, r0
 800493c:	445a      	add	r2, fp
 800493e:	f8de 0000 	ldr.w	r0, [lr]
 8004942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004946:	b29b      	uxth	r3, r3
 8004948:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800494c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004950:	b292      	uxth	r2, r2
 8004952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004956:	45e1      	cmp	r9, ip
 8004958:	f84e 2b04 	str.w	r2, [lr], #4
 800495c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004960:	d2de      	bcs.n	8004920 <quorem+0x42>
 8004962:	9b00      	ldr	r3, [sp, #0]
 8004964:	58eb      	ldr	r3, [r5, r3]
 8004966:	b92b      	cbnz	r3, 8004974 <quorem+0x96>
 8004968:	9b01      	ldr	r3, [sp, #4]
 800496a:	3b04      	subs	r3, #4
 800496c:	429d      	cmp	r5, r3
 800496e:	461a      	mov	r2, r3
 8004970:	d32f      	bcc.n	80049d2 <quorem+0xf4>
 8004972:	613c      	str	r4, [r7, #16]
 8004974:	4638      	mov	r0, r7
 8004976:	f001 f97d 	bl	8005c74 <__mcmp>
 800497a:	2800      	cmp	r0, #0
 800497c:	db25      	blt.n	80049ca <quorem+0xec>
 800497e:	4629      	mov	r1, r5
 8004980:	2000      	movs	r0, #0
 8004982:	f858 2b04 	ldr.w	r2, [r8], #4
 8004986:	f8d1 c000 	ldr.w	ip, [r1]
 800498a:	fa1f fe82 	uxth.w	lr, r2
 800498e:	fa1f f38c 	uxth.w	r3, ip
 8004992:	eba3 030e 	sub.w	r3, r3, lr
 8004996:	4403      	add	r3, r0
 8004998:	0c12      	lsrs	r2, r2, #16
 800499a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800499e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049a8:	45c1      	cmp	r9, r8
 80049aa:	f841 3b04 	str.w	r3, [r1], #4
 80049ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80049b2:	d2e6      	bcs.n	8004982 <quorem+0xa4>
 80049b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049bc:	b922      	cbnz	r2, 80049c8 <quorem+0xea>
 80049be:	3b04      	subs	r3, #4
 80049c0:	429d      	cmp	r5, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	d30b      	bcc.n	80049de <quorem+0x100>
 80049c6:	613c      	str	r4, [r7, #16]
 80049c8:	3601      	adds	r6, #1
 80049ca:	4630      	mov	r0, r6
 80049cc:	b003      	add	sp, #12
 80049ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	d1cb      	bne.n	8004972 <quorem+0x94>
 80049da:	3c01      	subs	r4, #1
 80049dc:	e7c6      	b.n	800496c <quorem+0x8e>
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	3b04      	subs	r3, #4
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	d1ef      	bne.n	80049c6 <quorem+0xe8>
 80049e6:	3c01      	subs	r4, #1
 80049e8:	e7ea      	b.n	80049c0 <quorem+0xe2>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e7ee      	b.n	80049cc <quorem+0xee>
	...

080049f0 <_dtoa_r>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	69c7      	ldr	r7, [r0, #28]
 80049f6:	b097      	sub	sp, #92	@ 0x5c
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a00:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004a02:	4683      	mov	fp, r0
 8004a04:	b97f      	cbnz	r7, 8004a26 <_dtoa_r+0x36>
 8004a06:	2010      	movs	r0, #16
 8004a08:	f000 fe04 	bl	8005614 <malloc>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004a12:	b920      	cbnz	r0, 8004a1e <_dtoa_r+0x2e>
 8004a14:	4ba8      	ldr	r3, [pc, #672]	@ (8004cb8 <_dtoa_r+0x2c8>)
 8004a16:	21ef      	movs	r1, #239	@ 0xef
 8004a18:	48a8      	ldr	r0, [pc, #672]	@ (8004cbc <_dtoa_r+0x2cc>)
 8004a1a:	f001 fc69 	bl	80062f0 <__assert_func>
 8004a1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004a22:	6007      	str	r7, [r0, #0]
 8004a24:	60c7      	str	r7, [r0, #12]
 8004a26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	b159      	cbz	r1, 8004a46 <_dtoa_r+0x56>
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	604a      	str	r2, [r1, #4]
 8004a32:	2301      	movs	r3, #1
 8004a34:	4093      	lsls	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
 8004a38:	4658      	mov	r0, fp
 8004a3a:	f000 fee1 	bl	8005800 <_Bfree>
 8004a3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	1e2b      	subs	r3, r5, #0
 8004a48:	bfb9      	ittee	lt
 8004a4a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004a4e:	9303      	strlt	r3, [sp, #12]
 8004a50:	2300      	movge	r3, #0
 8004a52:	6033      	strge	r3, [r6, #0]
 8004a54:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a58:	4b99      	ldr	r3, [pc, #612]	@ (8004cc0 <_dtoa_r+0x2d0>)
 8004a5a:	bfbc      	itt	lt
 8004a5c:	2201      	movlt	r2, #1
 8004a5e:	6032      	strlt	r2, [r6, #0]
 8004a60:	ea33 0308 	bics.w	r3, r3, r8
 8004a64:	d112      	bne.n	8004a8c <_dtoa_r+0x9c>
 8004a66:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004a68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004a72:	4323      	orrs	r3, r4
 8004a74:	f000 8551 	beq.w	800551a <_dtoa_r+0xb2a>
 8004a78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a7a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8004cc4 <_dtoa_r+0x2d4>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8553 	beq.w	800552a <_dtoa_r+0xb3a>
 8004a84:	f10a 0303 	add.w	r3, sl, #3
 8004a88:	f000 bd4d 	b.w	8005526 <_dtoa_r+0xb36>
 8004a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a90:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fc f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	b158      	cbz	r0, 8004abc <_dtoa_r+0xcc>
 8004aa4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004aac:	b113      	cbz	r3, 8004ab4 <_dtoa_r+0xc4>
 8004aae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ab0:	4b85      	ldr	r3, [pc, #532]	@ (8004cc8 <_dtoa_r+0x2d8>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004ccc <_dtoa_r+0x2dc>
 8004ab8:	f000 bd37 	b.w	800552a <_dtoa_r+0xb3a>
 8004abc:	ab14      	add	r3, sp, #80	@ 0x50
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	ab15      	add	r3, sp, #84	@ 0x54
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4658      	mov	r0, fp
 8004ac6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004aca:	f001 f981 	bl	8005dd0 <__d2b>
 8004ace:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004ad2:	4681      	mov	r9, r0
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	d076      	beq.n	8004bc6 <_dtoa_r+0x1d6>
 8004ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ada:	9712      	str	r7, [sp, #72]	@ 0x48
 8004adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004aec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004af0:	4619      	mov	r1, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	4b76      	ldr	r3, [pc, #472]	@ (8004cd0 <_dtoa_r+0x2e0>)
 8004af6:	f7fb fbc7 	bl	8000288 <__aeabi_dsub>
 8004afa:	a369      	add	r3, pc, #420	@ (adr r3, 8004ca0 <_dtoa_r+0x2b0>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f7fb fd7a 	bl	80005f8 <__aeabi_dmul>
 8004b04:	a368      	add	r3, pc, #416	@ (adr r3, 8004ca8 <_dtoa_r+0x2b8>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f7fb fbbf 	bl	800028c <__adddf3>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4630      	mov	r0, r6
 8004b12:	460d      	mov	r5, r1
 8004b14:	f7fb fd06 	bl	8000524 <__aeabi_i2d>
 8004b18:	a365      	add	r3, pc, #404	@ (adr r3, 8004cb0 <_dtoa_r+0x2c0>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fd6b 	bl	80005f8 <__aeabi_dmul>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4620      	mov	r0, r4
 8004b28:	4629      	mov	r1, r5
 8004b2a:	f7fb fbaf 	bl	800028c <__adddf3>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	460d      	mov	r5, r1
 8004b32:	f7fc f811 	bl	8000b58 <__aeabi_d2iz>
 8004b36:	2200      	movs	r2, #0
 8004b38:	4607      	mov	r7, r0
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb ffcc 	bl	8000adc <__aeabi_dcmplt>
 8004b44:	b140      	cbz	r0, 8004b58 <_dtoa_r+0x168>
 8004b46:	4638      	mov	r0, r7
 8004b48:	f7fb fcec 	bl	8000524 <__aeabi_i2d>
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	462b      	mov	r3, r5
 8004b50:	f7fb ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b54:	b900      	cbnz	r0, 8004b58 <_dtoa_r+0x168>
 8004b56:	3f01      	subs	r7, #1
 8004b58:	2f16      	cmp	r7, #22
 8004b5a:	d852      	bhi.n	8004c02 <_dtoa_r+0x212>
 8004b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd4 <_dtoa_r+0x2e4>)
 8004b5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b6a:	f7fb ffb7 	bl	8000adc <__aeabi_dcmplt>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d049      	beq.n	8004c06 <_dtoa_r+0x216>
 8004b72:	3f01      	subs	r7, #1
 8004b74:	2300      	movs	r3, #0
 8004b76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b7a:	1b9b      	subs	r3, r3, r6
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	bf44      	itt	mi
 8004b80:	f1c3 0801 	rsbmi	r8, r3, #1
 8004b84:	2300      	movmi	r3, #0
 8004b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b88:	bf54      	ite	pl
 8004b8a:	f04f 0800 	movpl.w	r8, #0
 8004b8e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004b90:	2f00      	cmp	r7, #0
 8004b92:	db3a      	blt.n	8004c0a <_dtoa_r+0x21a>
 8004b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b96:	970e      	str	r7, [sp, #56]	@ 0x38
 8004b98:	443b      	add	r3, r7
 8004b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ba0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ba2:	2b09      	cmp	r3, #9
 8004ba4:	d865      	bhi.n	8004c72 <_dtoa_r+0x282>
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	bfc4      	itt	gt
 8004baa:	3b04      	subgt	r3, #4
 8004bac:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004bae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bb0:	f1a3 0302 	sub.w	r3, r3, #2
 8004bb4:	bfcc      	ite	gt
 8004bb6:	2400      	movgt	r4, #0
 8004bb8:	2401      	movle	r4, #1
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d864      	bhi.n	8004c88 <_dtoa_r+0x298>
 8004bbe:	e8df f003 	tbb	[pc, r3]
 8004bc2:	382b      	.short	0x382b
 8004bc4:	5636      	.short	0x5636
 8004bc6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004bca:	441e      	add	r6, r3
 8004bcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	bfc1      	itttt	gt
 8004bd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004bd8:	fa08 f803 	lslgt.w	r8, r8, r3
 8004bdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004be0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004be4:	bfd6      	itet	le
 8004be6:	f1c3 0320 	rsble	r3, r3, #32
 8004bea:	ea48 0003 	orrgt.w	r0, r8, r3
 8004bee:	fa04 f003 	lslle.w	r0, r4, r3
 8004bf2:	f7fb fc87 	bl	8000504 <__aeabi_ui2d>
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004bfc:	3e01      	subs	r6, #1
 8004bfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c00:	e776      	b.n	8004af0 <_dtoa_r+0x100>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e7b7      	b.n	8004b76 <_dtoa_r+0x186>
 8004c06:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c08:	e7b6      	b.n	8004b78 <_dtoa_r+0x188>
 8004c0a:	427b      	negs	r3, r7
 8004c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c0e:	2300      	movs	r3, #0
 8004c10:	eba8 0807 	sub.w	r8, r8, r7
 8004c14:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c16:	e7c3      	b.n	8004ba0 <_dtoa_r+0x1b0>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dc35      	bgt.n	8004c8e <_dtoa_r+0x29e>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	9221      	str	r2, [sp, #132]	@ 0x84
 8004c2c:	e00b      	b.n	8004c46 <_dtoa_r+0x256>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e7f3      	b.n	8004c1a <_dtoa_r+0x22a>
 8004c32:	2300      	movs	r3, #0
 8004c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	9308      	str	r3, [sp, #32]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	9307      	str	r3, [sp, #28]
 8004c42:	bfb8      	it	lt
 8004c44:	2301      	movlt	r3, #1
 8004c46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	f102 0514 	add.w	r5, r2, #20
 8004c52:	429d      	cmp	r5, r3
 8004c54:	d91f      	bls.n	8004c96 <_dtoa_r+0x2a6>
 8004c56:	6041      	str	r1, [r0, #4]
 8004c58:	4658      	mov	r0, fp
 8004c5a:	f000 fd91 	bl	8005780 <_Balloc>
 8004c5e:	4682      	mov	sl, r0
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d13b      	bne.n	8004cdc <_dtoa_r+0x2ec>
 8004c64:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd8 <_dtoa_r+0x2e8>)
 8004c66:	4602      	mov	r2, r0
 8004c68:	f240 11af 	movw	r1, #431	@ 0x1af
 8004c6c:	e6d4      	b.n	8004a18 <_dtoa_r+0x28>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e7e0      	b.n	8004c34 <_dtoa_r+0x244>
 8004c72:	2401      	movs	r4, #1
 8004c74:	2300      	movs	r3, #0
 8004c76:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c78:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c7e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2312      	movs	r3, #18
 8004c86:	e7d0      	b.n	8004c2a <_dtoa_r+0x23a>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c8c:	e7f5      	b.n	8004c7a <_dtoa_r+0x28a>
 8004c8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c90:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c94:	e7d7      	b.n	8004c46 <_dtoa_r+0x256>
 8004c96:	3101      	adds	r1, #1
 8004c98:	0052      	lsls	r2, r2, #1
 8004c9a:	e7d8      	b.n	8004c4e <_dtoa_r+0x25e>
 8004c9c:	f3af 8000 	nop.w
 8004ca0:	636f4361 	.word	0x636f4361
 8004ca4:	3fd287a7 	.word	0x3fd287a7
 8004ca8:	8b60c8b3 	.word	0x8b60c8b3
 8004cac:	3fc68a28 	.word	0x3fc68a28
 8004cb0:	509f79fb 	.word	0x509f79fb
 8004cb4:	3fd34413 	.word	0x3fd34413
 8004cb8:	08006a11 	.word	0x08006a11
 8004cbc:	08006a28 	.word	0x08006a28
 8004cc0:	7ff00000 	.word	0x7ff00000
 8004cc4:	08006a0d 	.word	0x08006a0d
 8004cc8:	080069e1 	.word	0x080069e1
 8004ccc:	080069e0 	.word	0x080069e0
 8004cd0:	3ff80000 	.word	0x3ff80000
 8004cd4:	08006b20 	.word	0x08006b20
 8004cd8:	08006a80 	.word	0x08006a80
 8004cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ce0:	6018      	str	r0, [r3, #0]
 8004ce2:	9b07      	ldr	r3, [sp, #28]
 8004ce4:	2b0e      	cmp	r3, #14
 8004ce6:	f200 80a4 	bhi.w	8004e32 <_dtoa_r+0x442>
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	f000 80a1 	beq.w	8004e32 <_dtoa_r+0x442>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	dd33      	ble.n	8004d5c <_dtoa_r+0x36c>
 8004cf4:	4b86      	ldr	r3, [pc, #536]	@ (8004f10 <_dtoa_r+0x520>)
 8004cf6:	f007 020f 	and.w	r2, r7, #15
 8004cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d02:	05f8      	lsls	r0, r7, #23
 8004d04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d0c:	d516      	bpl.n	8004d3c <_dtoa_r+0x34c>
 8004d0e:	4b81      	ldr	r3, [pc, #516]	@ (8004f14 <_dtoa_r+0x524>)
 8004d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d18:	f7fb fd98 	bl	800084c <__aeabi_ddiv>
 8004d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d20:	f004 040f 	and.w	r4, r4, #15
 8004d24:	2603      	movs	r6, #3
 8004d26:	4d7b      	ldr	r5, [pc, #492]	@ (8004f14 <_dtoa_r+0x524>)
 8004d28:	b954      	cbnz	r4, 8004d40 <_dtoa_r+0x350>
 8004d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d32:	f7fb fd8b 	bl	800084c <__aeabi_ddiv>
 8004d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3a:	e028      	b.n	8004d8e <_dtoa_r+0x39e>
 8004d3c:	2602      	movs	r6, #2
 8004d3e:	e7f2      	b.n	8004d26 <_dtoa_r+0x336>
 8004d40:	07e1      	lsls	r1, r4, #31
 8004d42:	d508      	bpl.n	8004d56 <_dtoa_r+0x366>
 8004d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d4c:	f7fb fc54 	bl	80005f8 <__aeabi_dmul>
 8004d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d54:	3601      	adds	r6, #1
 8004d56:	1064      	asrs	r4, r4, #1
 8004d58:	3508      	adds	r5, #8
 8004d5a:	e7e5      	b.n	8004d28 <_dtoa_r+0x338>
 8004d5c:	f000 80d2 	beq.w	8004f04 <_dtoa_r+0x514>
 8004d60:	427c      	negs	r4, r7
 8004d62:	4b6b      	ldr	r3, [pc, #428]	@ (8004f10 <_dtoa_r+0x520>)
 8004d64:	4d6b      	ldr	r5, [pc, #428]	@ (8004f14 <_dtoa_r+0x524>)
 8004d66:	f004 020f 	and.w	r2, r4, #15
 8004d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d76:	f7fb fc3f 	bl	80005f8 <__aeabi_dmul>
 8004d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d7e:	1124      	asrs	r4, r4, #4
 8004d80:	2300      	movs	r3, #0
 8004d82:	2602      	movs	r6, #2
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	f040 80b2 	bne.w	8004eee <_dtoa_r+0x4fe>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1d3      	bne.n	8004d36 <_dtoa_r+0x346>
 8004d8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80b7 	beq.w	8004f08 <_dtoa_r+0x518>
 8004d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f18 <_dtoa_r+0x528>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fe9b 	bl	8000adc <__aeabi_dcmplt>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f000 80ae 	beq.w	8004f08 <_dtoa_r+0x518>
 8004dac:	9b07      	ldr	r3, [sp, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80aa 	beq.w	8004f08 <_dtoa_r+0x518>
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd37      	ble.n	8004e2a <_dtoa_r+0x43a>
 8004dba:	1e7b      	subs	r3, r7, #1
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4b56      	ldr	r3, [pc, #344]	@ (8004f1c <_dtoa_r+0x52c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fc17 	bl	80005f8 <__aeabi_dmul>
 8004dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dce:	9c08      	ldr	r4, [sp, #32]
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7fb fba6 	bl	8000524 <__aeabi_i2d>
 8004dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ddc:	f7fb fc0c 	bl	80005f8 <__aeabi_dmul>
 8004de0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <_dtoa_r+0x530>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	f7fb fa52 	bl	800028c <__adddf3>
 8004de8:	4605      	mov	r5, r0
 8004dea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	f040 809a 	bne.w	8004f28 <_dtoa_r+0x538>
 8004df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df8:	4b4a      	ldr	r3, [pc, #296]	@ (8004f24 <_dtoa_r+0x534>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f7fb fa44 	bl	8000288 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4633      	mov	r3, r6
 8004e0c:	f7fb fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f040 828e 	bne.w	8005332 <_dtoa_r+0x942>
 8004e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1a:	462a      	mov	r2, r5
 8004e1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e20:	f7fb fe5c 	bl	8000adc <__aeabi_dcmplt>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	f040 8127 	bne.w	8005078 <_dtoa_r+0x688>
 8004e2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004e2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004e32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f2c0 8163 	blt.w	8005100 <_dtoa_r+0x710>
 8004e3a:	2f0e      	cmp	r7, #14
 8004e3c:	f300 8160 	bgt.w	8005100 <_dtoa_r+0x710>
 8004e40:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <_dtoa_r+0x520>)
 8004e42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da03      	bge.n	8004e5c <_dtoa_r+0x46c>
 8004e54:	9b07      	ldr	r3, [sp, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f340 8100 	ble.w	800505c <_dtoa_r+0x66c>
 8004e5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e60:	4656      	mov	r6, sl
 8004e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fcef 	bl	800084c <__aeabi_ddiv>
 8004e6e:	f7fb fe73 	bl	8000b58 <__aeabi_d2iz>
 8004e72:	4680      	mov	r8, r0
 8004e74:	f7fb fb56 	bl	8000524 <__aeabi_i2d>
 8004e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e7c:	f7fb fbbc 	bl	80005f8 <__aeabi_dmul>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4620      	mov	r0, r4
 8004e86:	4629      	mov	r1, r5
 8004e88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e8c:	f7fb f9fc 	bl	8000288 <__aeabi_dsub>
 8004e90:	f806 4b01 	strb.w	r4, [r6], #1
 8004e94:	9d07      	ldr	r5, [sp, #28]
 8004e96:	eba6 040a 	sub.w	r4, r6, sl
 8004e9a:	42a5      	cmp	r5, r4
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	f040 8116 	bne.w	80050d0 <_dtoa_r+0x6e0>
 8004ea4:	f7fb f9f2 	bl	800028c <__adddf3>
 8004ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eac:	4604      	mov	r4, r0
 8004eae:	460d      	mov	r5, r1
 8004eb0:	f7fb fe32 	bl	8000b18 <__aeabi_dcmpgt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f040 80f8 	bne.w	80050aa <_dtoa_r+0x6ba>
 8004eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	f7fb fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ec6:	b118      	cbz	r0, 8004ed0 <_dtoa_r+0x4e0>
 8004ec8:	f018 0f01 	tst.w	r8, #1
 8004ecc:	f040 80ed 	bne.w	80050aa <_dtoa_r+0x6ba>
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fc94 	bl	8005800 <_Bfree>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	7033      	strb	r3, [r6, #0]
 8004edc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ede:	3701      	adds	r7, #1
 8004ee0:	601f      	str	r7, [r3, #0]
 8004ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8320 	beq.w	800552a <_dtoa_r+0xb3a>
 8004eea:	601e      	str	r6, [r3, #0]
 8004eec:	e31d      	b.n	800552a <_dtoa_r+0xb3a>
 8004eee:	07e2      	lsls	r2, r4, #31
 8004ef0:	d505      	bpl.n	8004efe <_dtoa_r+0x50e>
 8004ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ef6:	f7fb fb7f 	bl	80005f8 <__aeabi_dmul>
 8004efa:	3601      	adds	r6, #1
 8004efc:	2301      	movs	r3, #1
 8004efe:	1064      	asrs	r4, r4, #1
 8004f00:	3508      	adds	r5, #8
 8004f02:	e73f      	b.n	8004d84 <_dtoa_r+0x394>
 8004f04:	2602      	movs	r6, #2
 8004f06:	e742      	b.n	8004d8e <_dtoa_r+0x39e>
 8004f08:	9c07      	ldr	r4, [sp, #28]
 8004f0a:	9704      	str	r7, [sp, #16]
 8004f0c:	e761      	b.n	8004dd2 <_dtoa_r+0x3e2>
 8004f0e:	bf00      	nop
 8004f10:	08006b20 	.word	0x08006b20
 8004f14:	08006af8 	.word	0x08006af8
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	40240000 	.word	0x40240000
 8004f20:	401c0000 	.word	0x401c0000
 8004f24:	40140000 	.word	0x40140000
 8004f28:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <_dtoa_r+0x6fc>)
 8004f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f34:	4454      	add	r4, sl
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d045      	beq.n	8004fc6 <_dtoa_r+0x5d6>
 8004f3a:	496d      	ldr	r1, [pc, #436]	@ (80050f0 <_dtoa_r+0x700>)
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f7fb fc85 	bl	800084c <__aeabi_ddiv>
 8004f42:	4633      	mov	r3, r6
 8004f44:	462a      	mov	r2, r5
 8004f46:	f7fb f99f 	bl	8000288 <__aeabi_dsub>
 8004f4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f4e:	4656      	mov	r6, sl
 8004f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f54:	f7fb fe00 	bl	8000b58 <__aeabi_d2iz>
 8004f58:	4605      	mov	r5, r0
 8004f5a:	f7fb fae3 	bl	8000524 <__aeabi_i2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f66:	f7fb f98f 	bl	8000288 <__aeabi_dsub>
 8004f6a:	3530      	adds	r5, #48	@ 0x30
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f74:	f806 5b01 	strb.w	r5, [r6], #1
 8004f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f7c:	f7fb fdae 	bl	8000adc <__aeabi_dcmplt>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d163      	bne.n	800504c <_dtoa_r+0x65c>
 8004f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f88:	495a      	ldr	r1, [pc, #360]	@ (80050f4 <_dtoa_r+0x704>)
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f7fb f97c 	bl	8000288 <__aeabi_dsub>
 8004f90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f94:	f7fb fda2 	bl	8000adc <__aeabi_dcmplt>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f040 8087 	bne.w	80050ac <_dtoa_r+0x6bc>
 8004f9e:	42a6      	cmp	r6, r4
 8004fa0:	f43f af43 	beq.w	8004e2a <_dtoa_r+0x43a>
 8004fa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004fa8:	4b53      	ldr	r3, [pc, #332]	@ (80050f8 <_dtoa_r+0x708>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f7fb fb24 	bl	80005f8 <__aeabi_dmul>
 8004fb0:	4b51      	ldr	r3, [pc, #324]	@ (80050f8 <_dtoa_r+0x708>)
 8004fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fbc:	f7fb fb1c 	bl	80005f8 <__aeabi_dmul>
 8004fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc4:	e7c4      	b.n	8004f50 <_dtoa_r+0x560>
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7fb fb15 	bl	80005f8 <__aeabi_dmul>
 8004fce:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fd2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004fd4:	4656      	mov	r6, sl
 8004fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fda:	f7fb fdbd 	bl	8000b58 <__aeabi_d2iz>
 8004fde:	4605      	mov	r5, r0
 8004fe0:	f7fb faa0 	bl	8000524 <__aeabi_i2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fec:	f7fb f94c 	bl	8000288 <__aeabi_dsub>
 8004ff0:	3530      	adds	r5, #48	@ 0x30
 8004ff2:	f806 5b01 	strb.w	r5, [r6], #1
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	d124      	bne.n	8005050 <_dtoa_r+0x660>
 8005006:	4b3a      	ldr	r3, [pc, #232]	@ (80050f0 <_dtoa_r+0x700>)
 8005008:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800500c:	f7fb f93e 	bl	800028c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005018:	f7fb fd7e 	bl	8000b18 <__aeabi_dcmpgt>
 800501c:	2800      	cmp	r0, #0
 800501e:	d145      	bne.n	80050ac <_dtoa_r+0x6bc>
 8005020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005024:	4932      	ldr	r1, [pc, #200]	@ (80050f0 <_dtoa_r+0x700>)
 8005026:	2000      	movs	r0, #0
 8005028:	f7fb f92e 	bl	8000288 <__aeabi_dsub>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005034:	f7fb fd52 	bl	8000adc <__aeabi_dcmplt>
 8005038:	2800      	cmp	r0, #0
 800503a:	f43f aef6 	beq.w	8004e2a <_dtoa_r+0x43a>
 800503e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005040:	1e73      	subs	r3, r6, #1
 8005042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005048:	2b30      	cmp	r3, #48	@ 0x30
 800504a:	d0f8      	beq.n	800503e <_dtoa_r+0x64e>
 800504c:	9f04      	ldr	r7, [sp, #16]
 800504e:	e73f      	b.n	8004ed0 <_dtoa_r+0x4e0>
 8005050:	4b29      	ldr	r3, [pc, #164]	@ (80050f8 <_dtoa_r+0x708>)
 8005052:	f7fb fad1 	bl	80005f8 <__aeabi_dmul>
 8005056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800505a:	e7bc      	b.n	8004fd6 <_dtoa_r+0x5e6>
 800505c:	d10c      	bne.n	8005078 <_dtoa_r+0x688>
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <_dtoa_r+0x70c>)
 8005060:	2200      	movs	r2, #0
 8005062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005066:	f7fb fac7 	bl	80005f8 <__aeabi_dmul>
 800506a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800506e:	f7fb fd49 	bl	8000b04 <__aeabi_dcmpge>
 8005072:	2800      	cmp	r0, #0
 8005074:	f000 815b 	beq.w	800532e <_dtoa_r+0x93e>
 8005078:	2400      	movs	r4, #0
 800507a:	4625      	mov	r5, r4
 800507c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800507e:	43db      	mvns	r3, r3
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	4656      	mov	r6, sl
 8005084:	2700      	movs	r7, #0
 8005086:	4621      	mov	r1, r4
 8005088:	4658      	mov	r0, fp
 800508a:	f000 fbb9 	bl	8005800 <_Bfree>
 800508e:	2d00      	cmp	r5, #0
 8005090:	d0dc      	beq.n	800504c <_dtoa_r+0x65c>
 8005092:	b12f      	cbz	r7, 80050a0 <_dtoa_r+0x6b0>
 8005094:	42af      	cmp	r7, r5
 8005096:	d003      	beq.n	80050a0 <_dtoa_r+0x6b0>
 8005098:	4639      	mov	r1, r7
 800509a:	4658      	mov	r0, fp
 800509c:	f000 fbb0 	bl	8005800 <_Bfree>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4658      	mov	r0, fp
 80050a4:	f000 fbac 	bl	8005800 <_Bfree>
 80050a8:	e7d0      	b.n	800504c <_dtoa_r+0x65c>
 80050aa:	9704      	str	r7, [sp, #16]
 80050ac:	4633      	mov	r3, r6
 80050ae:	461e      	mov	r6, r3
 80050b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050b4:	2a39      	cmp	r2, #57	@ 0x39
 80050b6:	d107      	bne.n	80050c8 <_dtoa_r+0x6d8>
 80050b8:	459a      	cmp	sl, r3
 80050ba:	d1f8      	bne.n	80050ae <_dtoa_r+0x6be>
 80050bc:	9a04      	ldr	r2, [sp, #16]
 80050be:	3201      	adds	r2, #1
 80050c0:	9204      	str	r2, [sp, #16]
 80050c2:	2230      	movs	r2, #48	@ 0x30
 80050c4:	f88a 2000 	strb.w	r2, [sl]
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	3201      	adds	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e7bd      	b.n	800504c <_dtoa_r+0x65c>
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <_dtoa_r+0x708>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	f7fb fa90 	bl	80005f8 <__aeabi_dmul>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	f7fb fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f43f aebc 	beq.w	8004e62 <_dtoa_r+0x472>
 80050ea:	e6f1      	b.n	8004ed0 <_dtoa_r+0x4e0>
 80050ec:	08006b20 	.word	0x08006b20
 80050f0:	3fe00000 	.word	0x3fe00000
 80050f4:	3ff00000 	.word	0x3ff00000
 80050f8:	40240000 	.word	0x40240000
 80050fc:	40140000 	.word	0x40140000
 8005100:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005102:	2a00      	cmp	r2, #0
 8005104:	f000 80db 	beq.w	80052be <_dtoa_r+0x8ce>
 8005108:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800510a:	2a01      	cmp	r2, #1
 800510c:	f300 80bf 	bgt.w	800528e <_dtoa_r+0x89e>
 8005110:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005112:	2a00      	cmp	r2, #0
 8005114:	f000 80b7 	beq.w	8005286 <_dtoa_r+0x896>
 8005118:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800511c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800511e:	4646      	mov	r6, r8
 8005120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005122:	2101      	movs	r1, #1
 8005124:	441a      	add	r2, r3
 8005126:	4658      	mov	r0, fp
 8005128:	4498      	add	r8, r3
 800512a:	9209      	str	r2, [sp, #36]	@ 0x24
 800512c:	f000 fc1c 	bl	8005968 <__i2b>
 8005130:	4605      	mov	r5, r0
 8005132:	b15e      	cbz	r6, 800514c <_dtoa_r+0x75c>
 8005134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd08      	ble.n	800514c <_dtoa_r+0x75c>
 800513a:	42b3      	cmp	r3, r6
 800513c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800513e:	bfa8      	it	ge
 8005140:	4633      	movge	r3, r6
 8005142:	eba8 0803 	sub.w	r8, r8, r3
 8005146:	1af6      	subs	r6, r6, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	9309      	str	r3, [sp, #36]	@ 0x24
 800514c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800514e:	b1f3      	cbz	r3, 800518e <_dtoa_r+0x79e>
 8005150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80b7 	beq.w	80052c6 <_dtoa_r+0x8d6>
 8005158:	b18c      	cbz	r4, 800517e <_dtoa_r+0x78e>
 800515a:	4629      	mov	r1, r5
 800515c:	4622      	mov	r2, r4
 800515e:	4658      	mov	r0, fp
 8005160:	f000 fcc2 	bl	8005ae8 <__pow5mult>
 8005164:	464a      	mov	r2, r9
 8005166:	4601      	mov	r1, r0
 8005168:	4605      	mov	r5, r0
 800516a:	4658      	mov	r0, fp
 800516c:	f000 fc12 	bl	8005994 <__multiply>
 8005170:	4649      	mov	r1, r9
 8005172:	9004      	str	r0, [sp, #16]
 8005174:	4658      	mov	r0, fp
 8005176:	f000 fb43 	bl	8005800 <_Bfree>
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	4699      	mov	r9, r3
 800517e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005180:	1b1a      	subs	r2, r3, r4
 8005182:	d004      	beq.n	800518e <_dtoa_r+0x79e>
 8005184:	4649      	mov	r1, r9
 8005186:	4658      	mov	r0, fp
 8005188:	f000 fcae 	bl	8005ae8 <__pow5mult>
 800518c:	4681      	mov	r9, r0
 800518e:	2101      	movs	r1, #1
 8005190:	4658      	mov	r0, fp
 8005192:	f000 fbe9 	bl	8005968 <__i2b>
 8005196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005198:	4604      	mov	r4, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 81c9 	beq.w	8005532 <_dtoa_r+0xb42>
 80051a0:	461a      	mov	r2, r3
 80051a2:	4601      	mov	r1, r0
 80051a4:	4658      	mov	r0, fp
 80051a6:	f000 fc9f 	bl	8005ae8 <__pow5mult>
 80051aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	4604      	mov	r4, r0
 80051b0:	f300 808f 	bgt.w	80052d2 <_dtoa_r+0x8e2>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8087 	bne.w	80052ca <_dtoa_r+0x8da>
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 8083 	bne.w	80052ce <_dtoa_r+0x8de>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051ce:	0d1b      	lsrs	r3, r3, #20
 80051d0:	051b      	lsls	r3, r3, #20
 80051d2:	b12b      	cbz	r3, 80051e0 <_dtoa_r+0x7f0>
 80051d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d6:	3301      	adds	r3, #1
 80051d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051da:	f108 0801 	add.w	r8, r8, #1
 80051de:	2301      	movs	r3, #1
 80051e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80051e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 81aa 	beq.w	800553e <_dtoa_r+0xb4e>
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051f0:	6918      	ldr	r0, [r3, #16]
 80051f2:	f000 fb6d 	bl	80058d0 <__hi0bits>
 80051f6:	f1c0 0020 	rsb	r0, r0, #32
 80051fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051fc:	4418      	add	r0, r3
 80051fe:	f010 001f 	ands.w	r0, r0, #31
 8005202:	d071      	beq.n	80052e8 <_dtoa_r+0x8f8>
 8005204:	f1c0 0320 	rsb	r3, r0, #32
 8005208:	2b04      	cmp	r3, #4
 800520a:	dd65      	ble.n	80052d8 <_dtoa_r+0x8e8>
 800520c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520e:	f1c0 001c 	rsb	r0, r0, #28
 8005212:	4403      	add	r3, r0
 8005214:	4480      	add	r8, r0
 8005216:	4406      	add	r6, r0
 8005218:	9309      	str	r3, [sp, #36]	@ 0x24
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	dd05      	ble.n	800522c <_dtoa_r+0x83c>
 8005220:	4649      	mov	r1, r9
 8005222:	4642      	mov	r2, r8
 8005224:	4658      	mov	r0, fp
 8005226:	f000 fcb9 	bl	8005b9c <__lshift>
 800522a:	4681      	mov	r9, r0
 800522c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	dd05      	ble.n	800523e <_dtoa_r+0x84e>
 8005232:	4621      	mov	r1, r4
 8005234:	461a      	mov	r2, r3
 8005236:	4658      	mov	r0, fp
 8005238:	f000 fcb0 	bl	8005b9c <__lshift>
 800523c:	4604      	mov	r4, r0
 800523e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d053      	beq.n	80052ec <_dtoa_r+0x8fc>
 8005244:	4621      	mov	r1, r4
 8005246:	4648      	mov	r0, r9
 8005248:	f000 fd14 	bl	8005c74 <__mcmp>
 800524c:	2800      	cmp	r0, #0
 800524e:	da4d      	bge.n	80052ec <_dtoa_r+0x8fc>
 8005250:	1e7b      	subs	r3, r7, #1
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	4649      	mov	r1, r9
 8005256:	2300      	movs	r3, #0
 8005258:	220a      	movs	r2, #10
 800525a:	4658      	mov	r0, fp
 800525c:	f000 faf2 	bl	8005844 <__multadd>
 8005260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005262:	4681      	mov	r9, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 816c 	beq.w	8005542 <_dtoa_r+0xb52>
 800526a:	2300      	movs	r3, #0
 800526c:	4629      	mov	r1, r5
 800526e:	220a      	movs	r2, #10
 8005270:	4658      	mov	r0, fp
 8005272:	f000 fae7 	bl	8005844 <__multadd>
 8005276:	9b08      	ldr	r3, [sp, #32]
 8005278:	2b00      	cmp	r3, #0
 800527a:	4605      	mov	r5, r0
 800527c:	dc61      	bgt.n	8005342 <_dtoa_r+0x952>
 800527e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005280:	2b02      	cmp	r3, #2
 8005282:	dc3b      	bgt.n	80052fc <_dtoa_r+0x90c>
 8005284:	e05d      	b.n	8005342 <_dtoa_r+0x952>
 8005286:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005288:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800528c:	e746      	b.n	800511c <_dtoa_r+0x72c>
 800528e:	9b07      	ldr	r3, [sp, #28]
 8005290:	1e5c      	subs	r4, r3, #1
 8005292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005294:	42a3      	cmp	r3, r4
 8005296:	bfbf      	itttt	lt
 8005298:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800529a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800529c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800529e:	1ae3      	sublt	r3, r4, r3
 80052a0:	bfb4      	ite	lt
 80052a2:	18d2      	addlt	r2, r2, r3
 80052a4:	1b1c      	subge	r4, r3, r4
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	bfbc      	itt	lt
 80052aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80052ac:	2400      	movlt	r4, #0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfb5      	itete	lt
 80052b2:	eba8 0603 	sublt.w	r6, r8, r3
 80052b6:	9b07      	ldrge	r3, [sp, #28]
 80052b8:	2300      	movlt	r3, #0
 80052ba:	4646      	movge	r6, r8
 80052bc:	e730      	b.n	8005120 <_dtoa_r+0x730>
 80052be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80052c0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80052c2:	4646      	mov	r6, r8
 80052c4:	e735      	b.n	8005132 <_dtoa_r+0x742>
 80052c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052c8:	e75c      	b.n	8005184 <_dtoa_r+0x794>
 80052ca:	2300      	movs	r3, #0
 80052cc:	e788      	b.n	80051e0 <_dtoa_r+0x7f0>
 80052ce:	9b02      	ldr	r3, [sp, #8]
 80052d0:	e786      	b.n	80051e0 <_dtoa_r+0x7f0>
 80052d2:	2300      	movs	r3, #0
 80052d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80052d6:	e788      	b.n	80051ea <_dtoa_r+0x7fa>
 80052d8:	d09f      	beq.n	800521a <_dtoa_r+0x82a>
 80052da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052dc:	331c      	adds	r3, #28
 80052de:	441a      	add	r2, r3
 80052e0:	4498      	add	r8, r3
 80052e2:	441e      	add	r6, r3
 80052e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80052e6:	e798      	b.n	800521a <_dtoa_r+0x82a>
 80052e8:	4603      	mov	r3, r0
 80052ea:	e7f6      	b.n	80052da <_dtoa_r+0x8ea>
 80052ec:	9b07      	ldr	r3, [sp, #28]
 80052ee:	9704      	str	r7, [sp, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dc20      	bgt.n	8005336 <_dtoa_r+0x946>
 80052f4:	9308      	str	r3, [sp, #32]
 80052f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	dd1e      	ble.n	800533a <_dtoa_r+0x94a>
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f47f aebc 	bne.w	800507c <_dtoa_r+0x68c>
 8005304:	4621      	mov	r1, r4
 8005306:	2205      	movs	r2, #5
 8005308:	4658      	mov	r0, fp
 800530a:	f000 fa9b 	bl	8005844 <__multadd>
 800530e:	4601      	mov	r1, r0
 8005310:	4604      	mov	r4, r0
 8005312:	4648      	mov	r0, r9
 8005314:	f000 fcae 	bl	8005c74 <__mcmp>
 8005318:	2800      	cmp	r0, #0
 800531a:	f77f aeaf 	ble.w	800507c <_dtoa_r+0x68c>
 800531e:	4656      	mov	r6, sl
 8005320:	2331      	movs	r3, #49	@ 0x31
 8005322:	f806 3b01 	strb.w	r3, [r6], #1
 8005326:	9b04      	ldr	r3, [sp, #16]
 8005328:	3301      	adds	r3, #1
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	e6aa      	b.n	8005084 <_dtoa_r+0x694>
 800532e:	9c07      	ldr	r4, [sp, #28]
 8005330:	9704      	str	r7, [sp, #16]
 8005332:	4625      	mov	r5, r4
 8005334:	e7f3      	b.n	800531e <_dtoa_r+0x92e>
 8005336:	9b07      	ldr	r3, [sp, #28]
 8005338:	9308      	str	r3, [sp, #32]
 800533a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8104 	beq.w	800554a <_dtoa_r+0xb5a>
 8005342:	2e00      	cmp	r6, #0
 8005344:	dd05      	ble.n	8005352 <_dtoa_r+0x962>
 8005346:	4629      	mov	r1, r5
 8005348:	4632      	mov	r2, r6
 800534a:	4658      	mov	r0, fp
 800534c:	f000 fc26 	bl	8005b9c <__lshift>
 8005350:	4605      	mov	r5, r0
 8005352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05a      	beq.n	800540e <_dtoa_r+0xa1e>
 8005358:	6869      	ldr	r1, [r5, #4]
 800535a:	4658      	mov	r0, fp
 800535c:	f000 fa10 	bl	8005780 <_Balloc>
 8005360:	4606      	mov	r6, r0
 8005362:	b928      	cbnz	r0, 8005370 <_dtoa_r+0x980>
 8005364:	4b84      	ldr	r3, [pc, #528]	@ (8005578 <_dtoa_r+0xb88>)
 8005366:	4602      	mov	r2, r0
 8005368:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800536c:	f7ff bb54 	b.w	8004a18 <_dtoa_r+0x28>
 8005370:	692a      	ldr	r2, [r5, #16]
 8005372:	3202      	adds	r2, #2
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	f105 010c 	add.w	r1, r5, #12
 800537a:	300c      	adds	r0, #12
 800537c:	f000 ffaa 	bl	80062d4 <memcpy>
 8005380:	2201      	movs	r2, #1
 8005382:	4631      	mov	r1, r6
 8005384:	4658      	mov	r0, fp
 8005386:	f000 fc09 	bl	8005b9c <__lshift>
 800538a:	f10a 0301 	add.w	r3, sl, #1
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	9b08      	ldr	r3, [sp, #32]
 8005392:	4453      	add	r3, sl
 8005394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	462f      	mov	r7, r5
 800539e:	930a      	str	r3, [sp, #40]	@ 0x28
 80053a0:	4605      	mov	r5, r0
 80053a2:	9b07      	ldr	r3, [sp, #28]
 80053a4:	4621      	mov	r1, r4
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4648      	mov	r0, r9
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	f7ff fa97 	bl	80048de <quorem>
 80053b0:	4639      	mov	r1, r7
 80053b2:	9008      	str	r0, [sp, #32]
 80053b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053b8:	4648      	mov	r0, r9
 80053ba:	f000 fc5b 	bl	8005c74 <__mcmp>
 80053be:	462a      	mov	r2, r5
 80053c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80053c2:	4621      	mov	r1, r4
 80053c4:	4658      	mov	r0, fp
 80053c6:	f000 fc71 	bl	8005cac <__mdiff>
 80053ca:	68c2      	ldr	r2, [r0, #12]
 80053cc:	4606      	mov	r6, r0
 80053ce:	bb02      	cbnz	r2, 8005412 <_dtoa_r+0xa22>
 80053d0:	4601      	mov	r1, r0
 80053d2:	4648      	mov	r0, r9
 80053d4:	f000 fc4e 	bl	8005c74 <__mcmp>
 80053d8:	4602      	mov	r2, r0
 80053da:	4631      	mov	r1, r6
 80053dc:	4658      	mov	r0, fp
 80053de:	920c      	str	r2, [sp, #48]	@ 0x30
 80053e0:	f000 fa0e 	bl	8005800 <_Bfree>
 80053e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80053e8:	9e07      	ldr	r6, [sp, #28]
 80053ea:	ea43 0102 	orr.w	r1, r3, r2
 80053ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f0:	4319      	orrs	r1, r3
 80053f2:	d110      	bne.n	8005416 <_dtoa_r+0xa26>
 80053f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053f8:	d029      	beq.n	800544e <_dtoa_r+0xa5e>
 80053fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dd02      	ble.n	8005406 <_dtoa_r+0xa16>
 8005400:	9b08      	ldr	r3, [sp, #32]
 8005402:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005406:	9b02      	ldr	r3, [sp, #8]
 8005408:	f883 8000 	strb.w	r8, [r3]
 800540c:	e63b      	b.n	8005086 <_dtoa_r+0x696>
 800540e:	4628      	mov	r0, r5
 8005410:	e7bb      	b.n	800538a <_dtoa_r+0x99a>
 8005412:	2201      	movs	r2, #1
 8005414:	e7e1      	b.n	80053da <_dtoa_r+0x9ea>
 8005416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	db04      	blt.n	8005426 <_dtoa_r+0xa36>
 800541c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800541e:	430b      	orrs	r3, r1
 8005420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005422:	430b      	orrs	r3, r1
 8005424:	d120      	bne.n	8005468 <_dtoa_r+0xa78>
 8005426:	2a00      	cmp	r2, #0
 8005428:	dded      	ble.n	8005406 <_dtoa_r+0xa16>
 800542a:	4649      	mov	r1, r9
 800542c:	2201      	movs	r2, #1
 800542e:	4658      	mov	r0, fp
 8005430:	f000 fbb4 	bl	8005b9c <__lshift>
 8005434:	4621      	mov	r1, r4
 8005436:	4681      	mov	r9, r0
 8005438:	f000 fc1c 	bl	8005c74 <__mcmp>
 800543c:	2800      	cmp	r0, #0
 800543e:	dc03      	bgt.n	8005448 <_dtoa_r+0xa58>
 8005440:	d1e1      	bne.n	8005406 <_dtoa_r+0xa16>
 8005442:	f018 0f01 	tst.w	r8, #1
 8005446:	d0de      	beq.n	8005406 <_dtoa_r+0xa16>
 8005448:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800544c:	d1d8      	bne.n	8005400 <_dtoa_r+0xa10>
 800544e:	9a02      	ldr	r2, [sp, #8]
 8005450:	2339      	movs	r3, #57	@ 0x39
 8005452:	7013      	strb	r3, [r2, #0]
 8005454:	4633      	mov	r3, r6
 8005456:	461e      	mov	r6, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800545e:	2a39      	cmp	r2, #57	@ 0x39
 8005460:	d052      	beq.n	8005508 <_dtoa_r+0xb18>
 8005462:	3201      	adds	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e60e      	b.n	8005086 <_dtoa_r+0x696>
 8005468:	2a00      	cmp	r2, #0
 800546a:	dd07      	ble.n	800547c <_dtoa_r+0xa8c>
 800546c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005470:	d0ed      	beq.n	800544e <_dtoa_r+0xa5e>
 8005472:	9a02      	ldr	r2, [sp, #8]
 8005474:	f108 0301 	add.w	r3, r8, #1
 8005478:	7013      	strb	r3, [r2, #0]
 800547a:	e604      	b.n	8005086 <_dtoa_r+0x696>
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	9a07      	ldr	r2, [sp, #28]
 8005480:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005486:	4293      	cmp	r3, r2
 8005488:	d028      	beq.n	80054dc <_dtoa_r+0xaec>
 800548a:	4649      	mov	r1, r9
 800548c:	2300      	movs	r3, #0
 800548e:	220a      	movs	r2, #10
 8005490:	4658      	mov	r0, fp
 8005492:	f000 f9d7 	bl	8005844 <__multadd>
 8005496:	42af      	cmp	r7, r5
 8005498:	4681      	mov	r9, r0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	f04f 020a 	mov.w	r2, #10
 80054a2:	4639      	mov	r1, r7
 80054a4:	4658      	mov	r0, fp
 80054a6:	d107      	bne.n	80054b8 <_dtoa_r+0xac8>
 80054a8:	f000 f9cc 	bl	8005844 <__multadd>
 80054ac:	4607      	mov	r7, r0
 80054ae:	4605      	mov	r5, r0
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	e774      	b.n	80053a2 <_dtoa_r+0x9b2>
 80054b8:	f000 f9c4 	bl	8005844 <__multadd>
 80054bc:	4629      	mov	r1, r5
 80054be:	4607      	mov	r7, r0
 80054c0:	2300      	movs	r3, #0
 80054c2:	220a      	movs	r2, #10
 80054c4:	4658      	mov	r0, fp
 80054c6:	f000 f9bd 	bl	8005844 <__multadd>
 80054ca:	4605      	mov	r5, r0
 80054cc:	e7f0      	b.n	80054b0 <_dtoa_r+0xac0>
 80054ce:	9b08      	ldr	r3, [sp, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bfcc      	ite	gt
 80054d4:	461e      	movgt	r6, r3
 80054d6:	2601      	movle	r6, #1
 80054d8:	4456      	add	r6, sl
 80054da:	2700      	movs	r7, #0
 80054dc:	4649      	mov	r1, r9
 80054de:	2201      	movs	r2, #1
 80054e0:	4658      	mov	r0, fp
 80054e2:	f000 fb5b 	bl	8005b9c <__lshift>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4681      	mov	r9, r0
 80054ea:	f000 fbc3 	bl	8005c74 <__mcmp>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	dcb0      	bgt.n	8005454 <_dtoa_r+0xa64>
 80054f2:	d102      	bne.n	80054fa <_dtoa_r+0xb0a>
 80054f4:	f018 0f01 	tst.w	r8, #1
 80054f8:	d1ac      	bne.n	8005454 <_dtoa_r+0xa64>
 80054fa:	4633      	mov	r3, r6
 80054fc:	461e      	mov	r6, r3
 80054fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005502:	2a30      	cmp	r2, #48	@ 0x30
 8005504:	d0fa      	beq.n	80054fc <_dtoa_r+0xb0c>
 8005506:	e5be      	b.n	8005086 <_dtoa_r+0x696>
 8005508:	459a      	cmp	sl, r3
 800550a:	d1a4      	bne.n	8005456 <_dtoa_r+0xa66>
 800550c:	9b04      	ldr	r3, [sp, #16]
 800550e:	3301      	adds	r3, #1
 8005510:	9304      	str	r3, [sp, #16]
 8005512:	2331      	movs	r3, #49	@ 0x31
 8005514:	f88a 3000 	strb.w	r3, [sl]
 8005518:	e5b5      	b.n	8005086 <_dtoa_r+0x696>
 800551a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800551c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800557c <_dtoa_r+0xb8c>
 8005520:	b11b      	cbz	r3, 800552a <_dtoa_r+0xb3a>
 8005522:	f10a 0308 	add.w	r3, sl, #8
 8005526:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4650      	mov	r0, sl
 800552c:	b017      	add	sp, #92	@ 0x5c
 800552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005534:	2b01      	cmp	r3, #1
 8005536:	f77f ae3d 	ble.w	80051b4 <_dtoa_r+0x7c4>
 800553a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800553c:	930a      	str	r3, [sp, #40]	@ 0x28
 800553e:	2001      	movs	r0, #1
 8005540:	e65b      	b.n	80051fa <_dtoa_r+0x80a>
 8005542:	9b08      	ldr	r3, [sp, #32]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f77f aed6 	ble.w	80052f6 <_dtoa_r+0x906>
 800554a:	4656      	mov	r6, sl
 800554c:	4621      	mov	r1, r4
 800554e:	4648      	mov	r0, r9
 8005550:	f7ff f9c5 	bl	80048de <quorem>
 8005554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005558:	f806 8b01 	strb.w	r8, [r6], #1
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	eba6 020a 	sub.w	r2, r6, sl
 8005562:	4293      	cmp	r3, r2
 8005564:	ddb3      	ble.n	80054ce <_dtoa_r+0xade>
 8005566:	4649      	mov	r1, r9
 8005568:	2300      	movs	r3, #0
 800556a:	220a      	movs	r2, #10
 800556c:	4658      	mov	r0, fp
 800556e:	f000 f969 	bl	8005844 <__multadd>
 8005572:	4681      	mov	r9, r0
 8005574:	e7ea      	b.n	800554c <_dtoa_r+0xb5c>
 8005576:	bf00      	nop
 8005578:	08006a80 	.word	0x08006a80
 800557c:	08006a04 	.word	0x08006a04

08005580 <_free_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4605      	mov	r5, r0
 8005584:	2900      	cmp	r1, #0
 8005586:	d041      	beq.n	800560c <_free_r+0x8c>
 8005588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800558c:	1f0c      	subs	r4, r1, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	bfb8      	it	lt
 8005592:	18e4      	addlt	r4, r4, r3
 8005594:	f000 f8e8 	bl	8005768 <__malloc_lock>
 8005598:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <_free_r+0x90>)
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	b933      	cbnz	r3, 80055ac <_free_r+0x2c>
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	6014      	str	r4, [r2, #0]
 80055a2:	4628      	mov	r0, r5
 80055a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a8:	f000 b8e4 	b.w	8005774 <__malloc_unlock>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d908      	bls.n	80055c2 <_free_r+0x42>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	1821      	adds	r1, r4, r0
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf01      	itttt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	1809      	addeq	r1, r1, r0
 80055be:	6021      	streq	r1, [r4, #0]
 80055c0:	e7ed      	b.n	800559e <_free_r+0x1e>
 80055c2:	461a      	mov	r2, r3
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	b10b      	cbz	r3, 80055cc <_free_r+0x4c>
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d9fa      	bls.n	80055c2 <_free_r+0x42>
 80055cc:	6811      	ldr	r1, [r2, #0]
 80055ce:	1850      	adds	r0, r2, r1
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d10b      	bne.n	80055ec <_free_r+0x6c>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	4401      	add	r1, r0
 80055d8:	1850      	adds	r0, r2, r1
 80055da:	4283      	cmp	r3, r0
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	d1e0      	bne.n	80055a2 <_free_r+0x22>
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	6053      	str	r3, [r2, #4]
 80055e6:	4408      	add	r0, r1
 80055e8:	6010      	str	r0, [r2, #0]
 80055ea:	e7da      	b.n	80055a2 <_free_r+0x22>
 80055ec:	d902      	bls.n	80055f4 <_free_r+0x74>
 80055ee:	230c      	movs	r3, #12
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	e7d6      	b.n	80055a2 <_free_r+0x22>
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	1821      	adds	r1, r4, r0
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf04      	itt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	6063      	str	r3, [r4, #4]
 8005602:	bf04      	itt	eq
 8005604:	1809      	addeq	r1, r1, r0
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	6054      	str	r4, [r2, #4]
 800560a:	e7ca      	b.n	80055a2 <_free_r+0x22>
 800560c:	bd38      	pop	{r3, r4, r5, pc}
 800560e:	bf00      	nop
 8005610:	2000040c 	.word	0x2000040c

08005614 <malloc>:
 8005614:	4b02      	ldr	r3, [pc, #8]	@ (8005620 <malloc+0xc>)
 8005616:	4601      	mov	r1, r0
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f000 b825 	b.w	8005668 <_malloc_r>
 800561e:	bf00      	nop
 8005620:	20000018 	.word	0x20000018

08005624 <sbrk_aligned>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	4e0f      	ldr	r6, [pc, #60]	@ (8005664 <sbrk_aligned+0x40>)
 8005628:	460c      	mov	r4, r1
 800562a:	6831      	ldr	r1, [r6, #0]
 800562c:	4605      	mov	r5, r0
 800562e:	b911      	cbnz	r1, 8005636 <sbrk_aligned+0x12>
 8005630:	f000 fe40 	bl	80062b4 <_sbrk_r>
 8005634:	6030      	str	r0, [r6, #0]
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f000 fe3b 	bl	80062b4 <_sbrk_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d103      	bne.n	800564a <sbrk_aligned+0x26>
 8005642:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005646:	4620      	mov	r0, r4
 8005648:	bd70      	pop	{r4, r5, r6, pc}
 800564a:	1cc4      	adds	r4, r0, #3
 800564c:	f024 0403 	bic.w	r4, r4, #3
 8005650:	42a0      	cmp	r0, r4
 8005652:	d0f8      	beq.n	8005646 <sbrk_aligned+0x22>
 8005654:	1a21      	subs	r1, r4, r0
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fe2c 	bl	80062b4 <_sbrk_r>
 800565c:	3001      	adds	r0, #1
 800565e:	d1f2      	bne.n	8005646 <sbrk_aligned+0x22>
 8005660:	e7ef      	b.n	8005642 <sbrk_aligned+0x1e>
 8005662:	bf00      	nop
 8005664:	20000408 	.word	0x20000408

08005668 <_malloc_r>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	1ccd      	adds	r5, r1, #3
 800566e:	f025 0503 	bic.w	r5, r5, #3
 8005672:	3508      	adds	r5, #8
 8005674:	2d0c      	cmp	r5, #12
 8005676:	bf38      	it	cc
 8005678:	250c      	movcc	r5, #12
 800567a:	2d00      	cmp	r5, #0
 800567c:	4606      	mov	r6, r0
 800567e:	db01      	blt.n	8005684 <_malloc_r+0x1c>
 8005680:	42a9      	cmp	r1, r5
 8005682:	d904      	bls.n	800568e <_malloc_r+0x26>
 8005684:	230c      	movs	r3, #12
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	2000      	movs	r0, #0
 800568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005764 <_malloc_r+0xfc>
 8005692:	f000 f869 	bl	8005768 <__malloc_lock>
 8005696:	f8d8 3000 	ldr.w	r3, [r8]
 800569a:	461c      	mov	r4, r3
 800569c:	bb44      	cbnz	r4, 80056f0 <_malloc_r+0x88>
 800569e:	4629      	mov	r1, r5
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff ffbf 	bl	8005624 <sbrk_aligned>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	4604      	mov	r4, r0
 80056aa:	d158      	bne.n	800575e <_malloc_r+0xf6>
 80056ac:	f8d8 4000 	ldr.w	r4, [r8]
 80056b0:	4627      	mov	r7, r4
 80056b2:	2f00      	cmp	r7, #0
 80056b4:	d143      	bne.n	800573e <_malloc_r+0xd6>
 80056b6:	2c00      	cmp	r4, #0
 80056b8:	d04b      	beq.n	8005752 <_malloc_r+0xea>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	4639      	mov	r1, r7
 80056be:	4630      	mov	r0, r6
 80056c0:	eb04 0903 	add.w	r9, r4, r3
 80056c4:	f000 fdf6 	bl	80062b4 <_sbrk_r>
 80056c8:	4581      	cmp	r9, r0
 80056ca:	d142      	bne.n	8005752 <_malloc_r+0xea>
 80056cc:	6821      	ldr	r1, [r4, #0]
 80056ce:	1a6d      	subs	r5, r5, r1
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ffa6 	bl	8005624 <sbrk_aligned>
 80056d8:	3001      	adds	r0, #1
 80056da:	d03a      	beq.n	8005752 <_malloc_r+0xea>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	442b      	add	r3, r5
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	f8d8 3000 	ldr.w	r3, [r8]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	bb62      	cbnz	r2, 8005744 <_malloc_r+0xdc>
 80056ea:	f8c8 7000 	str.w	r7, [r8]
 80056ee:	e00f      	b.n	8005710 <_malloc_r+0xa8>
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	1b52      	subs	r2, r2, r5
 80056f4:	d420      	bmi.n	8005738 <_malloc_r+0xd0>
 80056f6:	2a0b      	cmp	r2, #11
 80056f8:	d917      	bls.n	800572a <_malloc_r+0xc2>
 80056fa:	1961      	adds	r1, r4, r5
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	6025      	str	r5, [r4, #0]
 8005700:	bf18      	it	ne
 8005702:	6059      	strne	r1, [r3, #4]
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	bf08      	it	eq
 8005708:	f8c8 1000 	streq.w	r1, [r8]
 800570c:	5162      	str	r2, [r4, r5]
 800570e:	604b      	str	r3, [r1, #4]
 8005710:	4630      	mov	r0, r6
 8005712:	f000 f82f 	bl	8005774 <__malloc_unlock>
 8005716:	f104 000b 	add.w	r0, r4, #11
 800571a:	1d23      	adds	r3, r4, #4
 800571c:	f020 0007 	bic.w	r0, r0, #7
 8005720:	1ac2      	subs	r2, r0, r3
 8005722:	bf1c      	itt	ne
 8005724:	1a1b      	subne	r3, r3, r0
 8005726:	50a3      	strne	r3, [r4, r2]
 8005728:	e7af      	b.n	800568a <_malloc_r+0x22>
 800572a:	6862      	ldr	r2, [r4, #4]
 800572c:	42a3      	cmp	r3, r4
 800572e:	bf0c      	ite	eq
 8005730:	f8c8 2000 	streq.w	r2, [r8]
 8005734:	605a      	strne	r2, [r3, #4]
 8005736:	e7eb      	b.n	8005710 <_malloc_r+0xa8>
 8005738:	4623      	mov	r3, r4
 800573a:	6864      	ldr	r4, [r4, #4]
 800573c:	e7ae      	b.n	800569c <_malloc_r+0x34>
 800573e:	463c      	mov	r4, r7
 8005740:	687f      	ldr	r7, [r7, #4]
 8005742:	e7b6      	b.n	80056b2 <_malloc_r+0x4a>
 8005744:	461a      	mov	r2, r3
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	42a3      	cmp	r3, r4
 800574a:	d1fb      	bne.n	8005744 <_malloc_r+0xdc>
 800574c:	2300      	movs	r3, #0
 800574e:	6053      	str	r3, [r2, #4]
 8005750:	e7de      	b.n	8005710 <_malloc_r+0xa8>
 8005752:	230c      	movs	r3, #12
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	4630      	mov	r0, r6
 8005758:	f000 f80c 	bl	8005774 <__malloc_unlock>
 800575c:	e794      	b.n	8005688 <_malloc_r+0x20>
 800575e:	6005      	str	r5, [r0, #0]
 8005760:	e7d6      	b.n	8005710 <_malloc_r+0xa8>
 8005762:	bf00      	nop
 8005764:	2000040c 	.word	0x2000040c

08005768 <__malloc_lock>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__malloc_lock+0x8>)
 800576a:	f7ff b8b6 	b.w	80048da <__retarget_lock_acquire_recursive>
 800576e:	bf00      	nop
 8005770:	20000404 	.word	0x20000404

08005774 <__malloc_unlock>:
 8005774:	4801      	ldr	r0, [pc, #4]	@ (800577c <__malloc_unlock+0x8>)
 8005776:	f7ff b8b1 	b.w	80048dc <__retarget_lock_release_recursive>
 800577a:	bf00      	nop
 800577c:	20000404 	.word	0x20000404

08005780 <_Balloc>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	69c6      	ldr	r6, [r0, #28]
 8005784:	4604      	mov	r4, r0
 8005786:	460d      	mov	r5, r1
 8005788:	b976      	cbnz	r6, 80057a8 <_Balloc+0x28>
 800578a:	2010      	movs	r0, #16
 800578c:	f7ff ff42 	bl	8005614 <malloc>
 8005790:	4602      	mov	r2, r0
 8005792:	61e0      	str	r0, [r4, #28]
 8005794:	b920      	cbnz	r0, 80057a0 <_Balloc+0x20>
 8005796:	4b18      	ldr	r3, [pc, #96]	@ (80057f8 <_Balloc+0x78>)
 8005798:	4818      	ldr	r0, [pc, #96]	@ (80057fc <_Balloc+0x7c>)
 800579a:	216b      	movs	r1, #107	@ 0x6b
 800579c:	f000 fda8 	bl	80062f0 <__assert_func>
 80057a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057a4:	6006      	str	r6, [r0, #0]
 80057a6:	60c6      	str	r6, [r0, #12]
 80057a8:	69e6      	ldr	r6, [r4, #28]
 80057aa:	68f3      	ldr	r3, [r6, #12]
 80057ac:	b183      	cbz	r3, 80057d0 <_Balloc+0x50>
 80057ae:	69e3      	ldr	r3, [r4, #28]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057b6:	b9b8      	cbnz	r0, 80057e8 <_Balloc+0x68>
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f605 	lsl.w	r6, r1, r5
 80057be:	1d72      	adds	r2, r6, #5
 80057c0:	0092      	lsls	r2, r2, #2
 80057c2:	4620      	mov	r0, r4
 80057c4:	f000 fdb2 	bl	800632c <_calloc_r>
 80057c8:	b160      	cbz	r0, 80057e4 <_Balloc+0x64>
 80057ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057ce:	e00e      	b.n	80057ee <_Balloc+0x6e>
 80057d0:	2221      	movs	r2, #33	@ 0x21
 80057d2:	2104      	movs	r1, #4
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fda9 	bl	800632c <_calloc_r>
 80057da:	69e3      	ldr	r3, [r4, #28]
 80057dc:	60f0      	str	r0, [r6, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e4      	bne.n	80057ae <_Balloc+0x2e>
 80057e4:	2000      	movs	r0, #0
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	6802      	ldr	r2, [r0, #0]
 80057ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057ee:	2300      	movs	r3, #0
 80057f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057f4:	e7f7      	b.n	80057e6 <_Balloc+0x66>
 80057f6:	bf00      	nop
 80057f8:	08006a11 	.word	0x08006a11
 80057fc:	08006a91 	.word	0x08006a91

08005800 <_Bfree>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	69c6      	ldr	r6, [r0, #28]
 8005804:	4605      	mov	r5, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b976      	cbnz	r6, 8005828 <_Bfree+0x28>
 800580a:	2010      	movs	r0, #16
 800580c:	f7ff ff02 	bl	8005614 <malloc>
 8005810:	4602      	mov	r2, r0
 8005812:	61e8      	str	r0, [r5, #28]
 8005814:	b920      	cbnz	r0, 8005820 <_Bfree+0x20>
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <_Bfree+0x3c>)
 8005818:	4809      	ldr	r0, [pc, #36]	@ (8005840 <_Bfree+0x40>)
 800581a:	218f      	movs	r1, #143	@ 0x8f
 800581c:	f000 fd68 	bl	80062f0 <__assert_func>
 8005820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005824:	6006      	str	r6, [r0, #0]
 8005826:	60c6      	str	r6, [r0, #12]
 8005828:	b13c      	cbz	r4, 800583a <_Bfree+0x3a>
 800582a:	69eb      	ldr	r3, [r5, #28]
 800582c:	6862      	ldr	r2, [r4, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005834:	6021      	str	r1, [r4, #0]
 8005836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	08006a11 	.word	0x08006a11
 8005840:	08006a91 	.word	0x08006a91

08005844 <__multadd>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	690d      	ldr	r5, [r1, #16]
 800584a:	4607      	mov	r7, r0
 800584c:	460c      	mov	r4, r1
 800584e:	461e      	mov	r6, r3
 8005850:	f101 0c14 	add.w	ip, r1, #20
 8005854:	2000      	movs	r0, #0
 8005856:	f8dc 3000 	ldr.w	r3, [ip]
 800585a:	b299      	uxth	r1, r3
 800585c:	fb02 6101 	mla	r1, r2, r1, r6
 8005860:	0c1e      	lsrs	r6, r3, #16
 8005862:	0c0b      	lsrs	r3, r1, #16
 8005864:	fb02 3306 	mla	r3, r2, r6, r3
 8005868:	b289      	uxth	r1, r1
 800586a:	3001      	adds	r0, #1
 800586c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005870:	4285      	cmp	r5, r0
 8005872:	f84c 1b04 	str.w	r1, [ip], #4
 8005876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800587a:	dcec      	bgt.n	8005856 <__multadd+0x12>
 800587c:	b30e      	cbz	r6, 80058c2 <__multadd+0x7e>
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	42ab      	cmp	r3, r5
 8005882:	dc19      	bgt.n	80058b8 <__multadd+0x74>
 8005884:	6861      	ldr	r1, [r4, #4]
 8005886:	4638      	mov	r0, r7
 8005888:	3101      	adds	r1, #1
 800588a:	f7ff ff79 	bl	8005780 <_Balloc>
 800588e:	4680      	mov	r8, r0
 8005890:	b928      	cbnz	r0, 800589e <__multadd+0x5a>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <__multadd+0x84>)
 8005896:	480d      	ldr	r0, [pc, #52]	@ (80058cc <__multadd+0x88>)
 8005898:	21ba      	movs	r1, #186	@ 0xba
 800589a:	f000 fd29 	bl	80062f0 <__assert_func>
 800589e:	6922      	ldr	r2, [r4, #16]
 80058a0:	3202      	adds	r2, #2
 80058a2:	f104 010c 	add.w	r1, r4, #12
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	300c      	adds	r0, #12
 80058aa:	f000 fd13 	bl	80062d4 <memcpy>
 80058ae:	4621      	mov	r1, r4
 80058b0:	4638      	mov	r0, r7
 80058b2:	f7ff ffa5 	bl	8005800 <_Bfree>
 80058b6:	4644      	mov	r4, r8
 80058b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058bc:	3501      	adds	r5, #1
 80058be:	615e      	str	r6, [r3, #20]
 80058c0:	6125      	str	r5, [r4, #16]
 80058c2:	4620      	mov	r0, r4
 80058c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c8:	08006a80 	.word	0x08006a80
 80058cc:	08006a91 	.word	0x08006a91

080058d0 <__hi0bits>:
 80058d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80058d4:	4603      	mov	r3, r0
 80058d6:	bf36      	itet	cc
 80058d8:	0403      	lslcc	r3, r0, #16
 80058da:	2000      	movcs	r0, #0
 80058dc:	2010      	movcc	r0, #16
 80058de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e2:	bf3c      	itt	cc
 80058e4:	021b      	lslcc	r3, r3, #8
 80058e6:	3008      	addcc	r0, #8
 80058e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ec:	bf3c      	itt	cc
 80058ee:	011b      	lslcc	r3, r3, #4
 80058f0:	3004      	addcc	r0, #4
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f6:	bf3c      	itt	cc
 80058f8:	009b      	lslcc	r3, r3, #2
 80058fa:	3002      	addcc	r0, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db05      	blt.n	800590c <__hi0bits+0x3c>
 8005900:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005904:	f100 0001 	add.w	r0, r0, #1
 8005908:	bf08      	it	eq
 800590a:	2020      	moveq	r0, #32
 800590c:	4770      	bx	lr

0800590e <__lo0bits>:
 800590e:	6803      	ldr	r3, [r0, #0]
 8005910:	4602      	mov	r2, r0
 8005912:	f013 0007 	ands.w	r0, r3, #7
 8005916:	d00b      	beq.n	8005930 <__lo0bits+0x22>
 8005918:	07d9      	lsls	r1, r3, #31
 800591a:	d421      	bmi.n	8005960 <__lo0bits+0x52>
 800591c:	0798      	lsls	r0, r3, #30
 800591e:	bf49      	itett	mi
 8005920:	085b      	lsrmi	r3, r3, #1
 8005922:	089b      	lsrpl	r3, r3, #2
 8005924:	2001      	movmi	r0, #1
 8005926:	6013      	strmi	r3, [r2, #0]
 8005928:	bf5c      	itt	pl
 800592a:	6013      	strpl	r3, [r2, #0]
 800592c:	2002      	movpl	r0, #2
 800592e:	4770      	bx	lr
 8005930:	b299      	uxth	r1, r3
 8005932:	b909      	cbnz	r1, 8005938 <__lo0bits+0x2a>
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	2010      	movs	r0, #16
 8005938:	b2d9      	uxtb	r1, r3
 800593a:	b909      	cbnz	r1, 8005940 <__lo0bits+0x32>
 800593c:	3008      	adds	r0, #8
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	0719      	lsls	r1, r3, #28
 8005942:	bf04      	itt	eq
 8005944:	091b      	lsreq	r3, r3, #4
 8005946:	3004      	addeq	r0, #4
 8005948:	0799      	lsls	r1, r3, #30
 800594a:	bf04      	itt	eq
 800594c:	089b      	lsreq	r3, r3, #2
 800594e:	3002      	addeq	r0, #2
 8005950:	07d9      	lsls	r1, r3, #31
 8005952:	d403      	bmi.n	800595c <__lo0bits+0x4e>
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	f100 0001 	add.w	r0, r0, #1
 800595a:	d003      	beq.n	8005964 <__lo0bits+0x56>
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4770      	bx	lr
 8005960:	2000      	movs	r0, #0
 8005962:	4770      	bx	lr
 8005964:	2020      	movs	r0, #32
 8005966:	4770      	bx	lr

08005968 <__i2b>:
 8005968:	b510      	push	{r4, lr}
 800596a:	460c      	mov	r4, r1
 800596c:	2101      	movs	r1, #1
 800596e:	f7ff ff07 	bl	8005780 <_Balloc>
 8005972:	4602      	mov	r2, r0
 8005974:	b928      	cbnz	r0, 8005982 <__i2b+0x1a>
 8005976:	4b05      	ldr	r3, [pc, #20]	@ (800598c <__i2b+0x24>)
 8005978:	4805      	ldr	r0, [pc, #20]	@ (8005990 <__i2b+0x28>)
 800597a:	f240 1145 	movw	r1, #325	@ 0x145
 800597e:	f000 fcb7 	bl	80062f0 <__assert_func>
 8005982:	2301      	movs	r3, #1
 8005984:	6144      	str	r4, [r0, #20]
 8005986:	6103      	str	r3, [r0, #16]
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	08006a80 	.word	0x08006a80
 8005990:	08006a91 	.word	0x08006a91

08005994 <__multiply>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	4614      	mov	r4, r2
 800599a:	690a      	ldr	r2, [r1, #16]
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bfa8      	it	ge
 80059a2:	4623      	movge	r3, r4
 80059a4:	460f      	mov	r7, r1
 80059a6:	bfa4      	itt	ge
 80059a8:	460c      	movge	r4, r1
 80059aa:	461f      	movge	r7, r3
 80059ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	6861      	ldr	r1, [r4, #4]
 80059b8:	eb0a 0609 	add.w	r6, sl, r9
 80059bc:	42b3      	cmp	r3, r6
 80059be:	b085      	sub	sp, #20
 80059c0:	bfb8      	it	lt
 80059c2:	3101      	addlt	r1, #1
 80059c4:	f7ff fedc 	bl	8005780 <_Balloc>
 80059c8:	b930      	cbnz	r0, 80059d8 <__multiply+0x44>
 80059ca:	4602      	mov	r2, r0
 80059cc:	4b44      	ldr	r3, [pc, #272]	@ (8005ae0 <__multiply+0x14c>)
 80059ce:	4845      	ldr	r0, [pc, #276]	@ (8005ae4 <__multiply+0x150>)
 80059d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80059d4:	f000 fc8c 	bl	80062f0 <__assert_func>
 80059d8:	f100 0514 	add.w	r5, r0, #20
 80059dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059e0:	462b      	mov	r3, r5
 80059e2:	2200      	movs	r2, #0
 80059e4:	4543      	cmp	r3, r8
 80059e6:	d321      	bcc.n	8005a2c <__multiply+0x98>
 80059e8:	f107 0114 	add.w	r1, r7, #20
 80059ec:	f104 0214 	add.w	r2, r4, #20
 80059f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80059f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	1b13      	subs	r3, r2, r4
 80059fc:	3b15      	subs	r3, #21
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	3304      	adds	r3, #4
 8005a04:	f104 0715 	add.w	r7, r4, #21
 8005a08:	42ba      	cmp	r2, r7
 8005a0a:	bf38      	it	cc
 8005a0c:	2304      	movcc	r3, #4
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	9103      	str	r1, [sp, #12]
 8005a14:	428b      	cmp	r3, r1
 8005a16:	d80c      	bhi.n	8005a32 <__multiply+0x9e>
 8005a18:	2e00      	cmp	r6, #0
 8005a1a:	dd03      	ble.n	8005a24 <__multiply+0x90>
 8005a1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05a      	beq.n	8005ada <__multiply+0x146>
 8005a24:	6106      	str	r6, [r0, #16]
 8005a26:	b005      	add	sp, #20
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	f843 2b04 	str.w	r2, [r3], #4
 8005a30:	e7d8      	b.n	80059e4 <__multiply+0x50>
 8005a32:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a36:	f1ba 0f00 	cmp.w	sl, #0
 8005a3a:	d023      	beq.n	8005a84 <__multiply+0xf0>
 8005a3c:	f104 0e14 	add.w	lr, r4, #20
 8005a40:	46a9      	mov	r9, r5
 8005a42:	f04f 0c00 	mov.w	ip, #0
 8005a46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a4a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a4e:	fa1f fb87 	uxth.w	fp, r7
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a58:	4463      	add	r3, ip
 8005a5a:	f8d9 c000 	ldr.w	ip, [r9]
 8005a5e:	0c3f      	lsrs	r7, r7, #16
 8005a60:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005a64:	fb0a c707 	mla	r7, sl, r7, ip
 8005a68:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a72:	4572      	cmp	r2, lr
 8005a74:	f849 3b04 	str.w	r3, [r9], #4
 8005a78:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a7c:	d8e3      	bhi.n	8005a46 <__multiply+0xb2>
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	f845 c003 	str.w	ip, [r5, r3]
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a8a:	3104      	adds	r1, #4
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	d021      	beq.n	8005ad6 <__multiply+0x142>
 8005a92:	682b      	ldr	r3, [r5, #0]
 8005a94:	f104 0c14 	add.w	ip, r4, #20
 8005a98:	46ae      	mov	lr, r5
 8005a9a:	f04f 0a00 	mov.w	sl, #0
 8005a9e:	f8bc b000 	ldrh.w	fp, [ip]
 8005aa2:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005aa6:	fb09 770b 	mla	r7, r9, fp, r7
 8005aaa:	4457      	add	r7, sl
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ab2:	f84e 3b04 	str.w	r3, [lr], #4
 8005ab6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005abe:	f8be 3000 	ldrh.w	r3, [lr]
 8005ac2:	fb09 330a 	mla	r3, r9, sl, r3
 8005ac6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005aca:	4562      	cmp	r2, ip
 8005acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ad0:	d8e5      	bhi.n	8005a9e <__multiply+0x10a>
 8005ad2:	9f01      	ldr	r7, [sp, #4]
 8005ad4:	51eb      	str	r3, [r5, r7]
 8005ad6:	3504      	adds	r5, #4
 8005ad8:	e79a      	b.n	8005a10 <__multiply+0x7c>
 8005ada:	3e01      	subs	r6, #1
 8005adc:	e79c      	b.n	8005a18 <__multiply+0x84>
 8005ade:	bf00      	nop
 8005ae0:	08006a80 	.word	0x08006a80
 8005ae4:	08006a91 	.word	0x08006a91

08005ae8 <__pow5mult>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4615      	mov	r5, r2
 8005aee:	f012 0203 	ands.w	r2, r2, #3
 8005af2:	4607      	mov	r7, r0
 8005af4:	460e      	mov	r6, r1
 8005af6:	d007      	beq.n	8005b08 <__pow5mult+0x20>
 8005af8:	4c25      	ldr	r4, [pc, #148]	@ (8005b90 <__pow5mult+0xa8>)
 8005afa:	3a01      	subs	r2, #1
 8005afc:	2300      	movs	r3, #0
 8005afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b02:	f7ff fe9f 	bl	8005844 <__multadd>
 8005b06:	4606      	mov	r6, r0
 8005b08:	10ad      	asrs	r5, r5, #2
 8005b0a:	d03d      	beq.n	8005b88 <__pow5mult+0xa0>
 8005b0c:	69fc      	ldr	r4, [r7, #28]
 8005b0e:	b97c      	cbnz	r4, 8005b30 <__pow5mult+0x48>
 8005b10:	2010      	movs	r0, #16
 8005b12:	f7ff fd7f 	bl	8005614 <malloc>
 8005b16:	4602      	mov	r2, r0
 8005b18:	61f8      	str	r0, [r7, #28]
 8005b1a:	b928      	cbnz	r0, 8005b28 <__pow5mult+0x40>
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <__pow5mult+0xac>)
 8005b1e:	481e      	ldr	r0, [pc, #120]	@ (8005b98 <__pow5mult+0xb0>)
 8005b20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b24:	f000 fbe4 	bl	80062f0 <__assert_func>
 8005b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b2c:	6004      	str	r4, [r0, #0]
 8005b2e:	60c4      	str	r4, [r0, #12]
 8005b30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b38:	b94c      	cbnz	r4, 8005b4e <__pow5mult+0x66>
 8005b3a:	f240 2171 	movw	r1, #625	@ 0x271
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f7ff ff12 	bl	8005968 <__i2b>
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	07eb      	lsls	r3, r5, #31
 8005b54:	d50a      	bpl.n	8005b6c <__pow5mult+0x84>
 8005b56:	4631      	mov	r1, r6
 8005b58:	4622      	mov	r2, r4
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f7ff ff1a 	bl	8005994 <__multiply>
 8005b60:	4631      	mov	r1, r6
 8005b62:	4680      	mov	r8, r0
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff fe4b 	bl	8005800 <_Bfree>
 8005b6a:	4646      	mov	r6, r8
 8005b6c:	106d      	asrs	r5, r5, #1
 8005b6e:	d00b      	beq.n	8005b88 <__pow5mult+0xa0>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	b938      	cbnz	r0, 8005b84 <__pow5mult+0x9c>
 8005b74:	4622      	mov	r2, r4
 8005b76:	4621      	mov	r1, r4
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ff0b 	bl	8005994 <__multiply>
 8005b7e:	6020      	str	r0, [r4, #0]
 8005b80:	f8c0 9000 	str.w	r9, [r0]
 8005b84:	4604      	mov	r4, r0
 8005b86:	e7e4      	b.n	8005b52 <__pow5mult+0x6a>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	bf00      	nop
 8005b90:	08006aec 	.word	0x08006aec
 8005b94:	08006a11 	.word	0x08006a11
 8005b98:	08006a91 	.word	0x08006a91

08005b9c <__lshift>:
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	6849      	ldr	r1, [r1, #4]
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	4607      	mov	r7, r0
 8005bae:	4691      	mov	r9, r2
 8005bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bb4:	f108 0601 	add.w	r6, r8, #1
 8005bb8:	42b3      	cmp	r3, r6
 8005bba:	db0b      	blt.n	8005bd4 <__lshift+0x38>
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff fddf 	bl	8005780 <_Balloc>
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	b948      	cbnz	r0, 8005bda <__lshift+0x3e>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4b28      	ldr	r3, [pc, #160]	@ (8005c6c <__lshift+0xd0>)
 8005bca:	4829      	ldr	r0, [pc, #164]	@ (8005c70 <__lshift+0xd4>)
 8005bcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005bd0:	f000 fb8e 	bl	80062f0 <__assert_func>
 8005bd4:	3101      	adds	r1, #1
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__lshift+0x1c>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f100 0114 	add.w	r1, r0, #20
 8005be0:	f100 0210 	add.w	r2, r0, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	4553      	cmp	r3, sl
 8005be8:	db33      	blt.n	8005c52 <__lshift+0xb6>
 8005bea:	6920      	ldr	r0, [r4, #16]
 8005bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bf0:	f104 0314 	add.w	r3, r4, #20
 8005bf4:	f019 091f 	ands.w	r9, r9, #31
 8005bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c00:	d02b      	beq.n	8005c5a <__lshift+0xbe>
 8005c02:	f1c9 0e20 	rsb	lr, r9, #32
 8005c06:	468a      	mov	sl, r1
 8005c08:	2200      	movs	r2, #0
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	fa00 f009 	lsl.w	r0, r0, r9
 8005c10:	4310      	orrs	r0, r2
 8005c12:	f84a 0b04 	str.w	r0, [sl], #4
 8005c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1a:	459c      	cmp	ip, r3
 8005c1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c20:	d8f3      	bhi.n	8005c0a <__lshift+0x6e>
 8005c22:	ebac 0304 	sub.w	r3, ip, r4
 8005c26:	3b15      	subs	r3, #21
 8005c28:	f023 0303 	bic.w	r3, r3, #3
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	f104 0015 	add.w	r0, r4, #21
 8005c32:	4584      	cmp	ip, r0
 8005c34:	bf38      	it	cc
 8005c36:	2304      	movcc	r3, #4
 8005c38:	50ca      	str	r2, [r1, r3]
 8005c3a:	b10a      	cbz	r2, 8005c40 <__lshift+0xa4>
 8005c3c:	f108 0602 	add.w	r6, r8, #2
 8005c40:	3e01      	subs	r6, #1
 8005c42:	4638      	mov	r0, r7
 8005c44:	612e      	str	r6, [r5, #16]
 8005c46:	4621      	mov	r1, r4
 8005c48:	f7ff fdda 	bl	8005800 <_Bfree>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c56:	3301      	adds	r3, #1
 8005c58:	e7c5      	b.n	8005be6 <__lshift+0x4a>
 8005c5a:	3904      	subs	r1, #4
 8005c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c64:	459c      	cmp	ip, r3
 8005c66:	d8f9      	bhi.n	8005c5c <__lshift+0xc0>
 8005c68:	e7ea      	b.n	8005c40 <__lshift+0xa4>
 8005c6a:	bf00      	nop
 8005c6c:	08006a80 	.word	0x08006a80
 8005c70:	08006a91 	.word	0x08006a91

08005c74 <__mcmp>:
 8005c74:	690a      	ldr	r2, [r1, #16]
 8005c76:	4603      	mov	r3, r0
 8005c78:	6900      	ldr	r0, [r0, #16]
 8005c7a:	1a80      	subs	r0, r0, r2
 8005c7c:	b530      	push	{r4, r5, lr}
 8005c7e:	d10e      	bne.n	8005c9e <__mcmp+0x2a>
 8005c80:	3314      	adds	r3, #20
 8005c82:	3114      	adds	r1, #20
 8005c84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c94:	4295      	cmp	r5, r2
 8005c96:	d003      	beq.n	8005ca0 <__mcmp+0x2c>
 8005c98:	d205      	bcs.n	8005ca6 <__mcmp+0x32>
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c9e:	bd30      	pop	{r4, r5, pc}
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	d3f3      	bcc.n	8005c8c <__mcmp+0x18>
 8005ca4:	e7fb      	b.n	8005c9e <__mcmp+0x2a>
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e7f9      	b.n	8005c9e <__mcmp+0x2a>
	...

08005cac <__mdiff>:
 8005cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4648      	mov	r0, r9
 8005cb8:	4614      	mov	r4, r2
 8005cba:	f7ff ffdb 	bl	8005c74 <__mcmp>
 8005cbe:	1e05      	subs	r5, r0, #0
 8005cc0:	d112      	bne.n	8005ce8 <__mdiff+0x3c>
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7ff fd5b 	bl	8005780 <_Balloc>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	b928      	cbnz	r0, 8005cda <__mdiff+0x2e>
 8005cce:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc8 <__mdiff+0x11c>)
 8005cd0:	f240 2137 	movw	r1, #567	@ 0x237
 8005cd4:	483d      	ldr	r0, [pc, #244]	@ (8005dcc <__mdiff+0x120>)
 8005cd6:	f000 fb0b 	bl	80062f0 <__assert_func>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	b003      	add	sp, #12
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	bfbc      	itt	lt
 8005cea:	464b      	movlt	r3, r9
 8005cec:	46a1      	movlt	r9, r4
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005cf4:	bfba      	itte	lt
 8005cf6:	461c      	movlt	r4, r3
 8005cf8:	2501      	movlt	r5, #1
 8005cfa:	2500      	movge	r5, #0
 8005cfc:	f7ff fd40 	bl	8005780 <_Balloc>
 8005d00:	4602      	mov	r2, r0
 8005d02:	b918      	cbnz	r0, 8005d0c <__mdiff+0x60>
 8005d04:	4b30      	ldr	r3, [pc, #192]	@ (8005dc8 <__mdiff+0x11c>)
 8005d06:	f240 2145 	movw	r1, #581	@ 0x245
 8005d0a:	e7e3      	b.n	8005cd4 <__mdiff+0x28>
 8005d0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d10:	6926      	ldr	r6, [r4, #16]
 8005d12:	60c5      	str	r5, [r0, #12]
 8005d14:	f109 0310 	add.w	r3, r9, #16
 8005d18:	f109 0514 	add.w	r5, r9, #20
 8005d1c:	f104 0e14 	add.w	lr, r4, #20
 8005d20:	f100 0b14 	add.w	fp, r0, #20
 8005d24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	46d9      	mov	r9, fp
 8005d30:	f04f 0c00 	mov.w	ip, #0
 8005d34:	9b01      	ldr	r3, [sp, #4]
 8005d36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	b281      	uxth	r1, r0
 8005d42:	fa1f f38a 	uxth.w	r3, sl
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	0c00      	lsrs	r0, r0, #16
 8005d4a:	4463      	add	r3, ip
 8005d4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d5a:	4576      	cmp	r6, lr
 8005d5c:	f849 3b04 	str.w	r3, [r9], #4
 8005d60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d64:	d8e6      	bhi.n	8005d34 <__mdiff+0x88>
 8005d66:	1b33      	subs	r3, r6, r4
 8005d68:	3b15      	subs	r3, #21
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	3415      	adds	r4, #21
 8005d70:	3304      	adds	r3, #4
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	bf38      	it	cc
 8005d76:	2304      	movcc	r3, #4
 8005d78:	441d      	add	r5, r3
 8005d7a:	445b      	add	r3, fp
 8005d7c:	461e      	mov	r6, r3
 8005d7e:	462c      	mov	r4, r5
 8005d80:	4544      	cmp	r4, r8
 8005d82:	d30e      	bcc.n	8005da2 <__mdiff+0xf6>
 8005d84:	f108 0103 	add.w	r1, r8, #3
 8005d88:	1b49      	subs	r1, r1, r5
 8005d8a:	f021 0103 	bic.w	r1, r1, #3
 8005d8e:	3d03      	subs	r5, #3
 8005d90:	45a8      	cmp	r8, r5
 8005d92:	bf38      	it	cc
 8005d94:	2100      	movcc	r1, #0
 8005d96:	440b      	add	r3, r1
 8005d98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d9c:	b191      	cbz	r1, 8005dc4 <__mdiff+0x118>
 8005d9e:	6117      	str	r7, [r2, #16]
 8005da0:	e79e      	b.n	8005ce0 <__mdiff+0x34>
 8005da2:	f854 1b04 	ldr.w	r1, [r4], #4
 8005da6:	46e6      	mov	lr, ip
 8005da8:	0c08      	lsrs	r0, r1, #16
 8005daa:	fa1c fc81 	uxtah	ip, ip, r1
 8005dae:	4471      	add	r1, lr
 8005db0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005db4:	b289      	uxth	r1, r1
 8005db6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005dba:	f846 1b04 	str.w	r1, [r6], #4
 8005dbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dc2:	e7dd      	b.n	8005d80 <__mdiff+0xd4>
 8005dc4:	3f01      	subs	r7, #1
 8005dc6:	e7e7      	b.n	8005d98 <__mdiff+0xec>
 8005dc8:	08006a80 	.word	0x08006a80
 8005dcc:	08006a91 	.word	0x08006a91

08005dd0 <__d2b>:
 8005dd0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	9e08      	ldr	r6, [sp, #32]
 8005dd8:	4690      	mov	r8, r2
 8005dda:	4699      	mov	r9, r3
 8005ddc:	f7ff fcd0 	bl	8005780 <_Balloc>
 8005de0:	4604      	mov	r4, r0
 8005de2:	b930      	cbnz	r0, 8005df2 <__d2b+0x22>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b24      	ldr	r3, [pc, #144]	@ (8005e78 <__d2b+0xa8>)
 8005de8:	4824      	ldr	r0, [pc, #144]	@ (8005e7c <__d2b+0xac>)
 8005dea:	f240 310f 	movw	r1, #783	@ 0x30f
 8005dee:	f000 fa7f 	bl	80062f0 <__assert_func>
 8005df2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005df6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dfa:	b10d      	cbz	r5, 8005e00 <__d2b+0x30>
 8005dfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	f1b8 0300 	subs.w	r3, r8, #0
 8005e06:	d024      	beq.n	8005e52 <__d2b+0x82>
 8005e08:	4668      	mov	r0, sp
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	f7ff fd7f 	bl	800590e <__lo0bits>
 8005e10:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e14:	b1d8      	cbz	r0, 8005e4e <__d2b+0x7e>
 8005e16:	f1c0 0320 	rsb	r3, r0, #32
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	40c2      	lsrs	r2, r0
 8005e22:	6163      	str	r3, [r4, #20]
 8005e24:	9201      	str	r2, [sp, #4]
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	61a3      	str	r3, [r4, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2201      	moveq	r2, #1
 8005e30:	2202      	movne	r2, #2
 8005e32:	6122      	str	r2, [r4, #16]
 8005e34:	b1ad      	cbz	r5, 8005e62 <__d2b+0x92>
 8005e36:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e3a:	4405      	add	r5, r0
 8005e3c:	6035      	str	r5, [r6, #0]
 8005e3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	6018      	str	r0, [r3, #0]
 8005e46:	4620      	mov	r0, r4
 8005e48:	b002      	add	sp, #8
 8005e4a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005e4e:	6161      	str	r1, [r4, #20]
 8005e50:	e7e9      	b.n	8005e26 <__d2b+0x56>
 8005e52:	a801      	add	r0, sp, #4
 8005e54:	f7ff fd5b 	bl	800590e <__lo0bits>
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	6163      	str	r3, [r4, #20]
 8005e5c:	3020      	adds	r0, #32
 8005e5e:	2201      	movs	r2, #1
 8005e60:	e7e7      	b.n	8005e32 <__d2b+0x62>
 8005e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e6a:	6030      	str	r0, [r6, #0]
 8005e6c:	6918      	ldr	r0, [r3, #16]
 8005e6e:	f7ff fd2f 	bl	80058d0 <__hi0bits>
 8005e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e76:	e7e4      	b.n	8005e42 <__d2b+0x72>
 8005e78:	08006a80 	.word	0x08006a80
 8005e7c:	08006a91 	.word	0x08006a91

08005e80 <__ssputs_r>:
 8005e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	688e      	ldr	r6, [r1, #8]
 8005e86:	461f      	mov	r7, r3
 8005e88:	42be      	cmp	r6, r7
 8005e8a:	680b      	ldr	r3, [r1, #0]
 8005e8c:	4682      	mov	sl, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	4690      	mov	r8, r2
 8005e92:	d82d      	bhi.n	8005ef0 <__ssputs_r+0x70>
 8005e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e9c:	d026      	beq.n	8005eec <__ssputs_r+0x6c>
 8005e9e:	6965      	ldr	r5, [r4, #20]
 8005ea0:	6909      	ldr	r1, [r1, #16]
 8005ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea6:	eba3 0901 	sub.w	r9, r3, r1
 8005eaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eae:	1c7b      	adds	r3, r7, #1
 8005eb0:	444b      	add	r3, r9
 8005eb2:	106d      	asrs	r5, r5, #1
 8005eb4:	429d      	cmp	r5, r3
 8005eb6:	bf38      	it	cc
 8005eb8:	461d      	movcc	r5, r3
 8005eba:	0553      	lsls	r3, r2, #21
 8005ebc:	d527      	bpl.n	8005f0e <__ssputs_r+0x8e>
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7ff fbd2 	bl	8005668 <_malloc_r>
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	b360      	cbz	r0, 8005f22 <__ssputs_r+0xa2>
 8005ec8:	6921      	ldr	r1, [r4, #16]
 8005eca:	464a      	mov	r2, r9
 8005ecc:	f000 fa02 	bl	80062d4 <memcpy>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	6126      	str	r6, [r4, #16]
 8005ede:	6165      	str	r5, [r4, #20]
 8005ee0:	444e      	add	r6, r9
 8005ee2:	eba5 0509 	sub.w	r5, r5, r9
 8005ee6:	6026      	str	r6, [r4, #0]
 8005ee8:	60a5      	str	r5, [r4, #8]
 8005eea:	463e      	mov	r6, r7
 8005eec:	42be      	cmp	r6, r7
 8005eee:	d900      	bls.n	8005ef2 <__ssputs_r+0x72>
 8005ef0:	463e      	mov	r6, r7
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	f000 f9c2 	bl	8006280 <memmove>
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	1b9b      	subs	r3, r3, r6
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	4433      	add	r3, r6
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0e:	462a      	mov	r2, r5
 8005f10:	f000 fa32 	bl	8006378 <_realloc_r>
 8005f14:	4606      	mov	r6, r0
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d1e0      	bne.n	8005edc <__ssputs_r+0x5c>
 8005f1a:	6921      	ldr	r1, [r4, #16]
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	f7ff fb2f 	bl	8005580 <_free_r>
 8005f22:	230c      	movs	r3, #12
 8005f24:	f8ca 3000 	str.w	r3, [sl]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f34:	e7e9      	b.n	8005f0a <__ssputs_r+0x8a>
	...

08005f38 <_svfiprintf_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	4698      	mov	r8, r3
 8005f3e:	898b      	ldrh	r3, [r1, #12]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	b09d      	sub	sp, #116	@ 0x74
 8005f44:	4607      	mov	r7, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	d510      	bpl.n	8005f6e <_svfiprintf_r+0x36>
 8005f4c:	690b      	ldr	r3, [r1, #16]
 8005f4e:	b973      	cbnz	r3, 8005f6e <_svfiprintf_r+0x36>
 8005f50:	2140      	movs	r1, #64	@ 0x40
 8005f52:	f7ff fb89 	bl	8005668 <_malloc_r>
 8005f56:	6028      	str	r0, [r5, #0]
 8005f58:	6128      	str	r0, [r5, #16]
 8005f5a:	b930      	cbnz	r0, 8005f6a <_svfiprintf_r+0x32>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f64:	b01d      	add	sp, #116	@ 0x74
 8005f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6a:	2340      	movs	r3, #64	@ 0x40
 8005f6c:	616b      	str	r3, [r5, #20]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f72:	2320      	movs	r3, #32
 8005f74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f7c:	2330      	movs	r3, #48	@ 0x30
 8005f7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800611c <_svfiprintf_r+0x1e4>
 8005f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f86:	f04f 0901 	mov.w	r9, #1
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f92:	b10a      	cbz	r2, 8005f98 <_svfiprintf_r+0x60>
 8005f94:	2a25      	cmp	r2, #37	@ 0x25
 8005f96:	d1f9      	bne.n	8005f8c <_svfiprintf_r+0x54>
 8005f98:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9c:	d00b      	beq.n	8005fb6 <_svfiprintf_r+0x7e>
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ff6b 	bl	8005e80 <__ssputs_r>
 8005faa:	3001      	adds	r0, #1
 8005fac:	f000 80a7 	beq.w	80060fe <_svfiprintf_r+0x1c6>
 8005fb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb2:	445a      	add	r2, fp
 8005fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 809f 	beq.w	80060fe <_svfiprintf_r+0x1c6>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fca:	f10a 0a01 	add.w	sl, sl, #1
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2205      	movs	r2, #5
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	484e      	ldr	r0, [pc, #312]	@ (800611c <_svfiprintf_r+0x1e4>)
 8005fe2:	f7fa f8f5 	bl	80001d0 <memchr>
 8005fe6:	9a04      	ldr	r2, [sp, #16]
 8005fe8:	b9d8      	cbnz	r0, 8006022 <_svfiprintf_r+0xea>
 8005fea:	06d0      	lsls	r0, r2, #27
 8005fec:	bf44      	itt	mi
 8005fee:	2320      	movmi	r3, #32
 8005ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff4:	0711      	lsls	r1, r2, #28
 8005ff6:	bf44      	itt	mi
 8005ff8:	232b      	movmi	r3, #43	@ 0x2b
 8005ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8006002:	2b2a      	cmp	r3, #42	@ 0x2a
 8006004:	d015      	beq.n	8006032 <_svfiprintf_r+0xfa>
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	4654      	mov	r4, sl
 800600a:	2000      	movs	r0, #0
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	4621      	mov	r1, r4
 8006012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006016:	3b30      	subs	r3, #48	@ 0x30
 8006018:	2b09      	cmp	r3, #9
 800601a:	d94b      	bls.n	80060b4 <_svfiprintf_r+0x17c>
 800601c:	b1b0      	cbz	r0, 800604c <_svfiprintf_r+0x114>
 800601e:	9207      	str	r2, [sp, #28]
 8006020:	e014      	b.n	800604c <_svfiprintf_r+0x114>
 8006022:	eba0 0308 	sub.w	r3, r0, r8
 8006026:	fa09 f303 	lsl.w	r3, r9, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	46a2      	mov	sl, r4
 8006030:	e7d2      	b.n	8005fd8 <_svfiprintf_r+0xa0>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfbb      	ittet	lt
 800603e:	425b      	neglt	r3, r3
 8006040:	f042 0202 	orrlt.w	r2, r2, #2
 8006044:	9307      	strge	r3, [sp, #28]
 8006046:	9307      	strlt	r3, [sp, #28]
 8006048:	bfb8      	it	lt
 800604a:	9204      	strlt	r2, [sp, #16]
 800604c:	7823      	ldrb	r3, [r4, #0]
 800604e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006050:	d10a      	bne.n	8006068 <_svfiprintf_r+0x130>
 8006052:	7863      	ldrb	r3, [r4, #1]
 8006054:	2b2a      	cmp	r3, #42	@ 0x2a
 8006056:	d132      	bne.n	80060be <_svfiprintf_r+0x186>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9203      	str	r2, [sp, #12]
 8006060:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006064:	3402      	adds	r4, #2
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006120 <_svfiprintf_r+0x1e8>
 800606c:	7821      	ldrb	r1, [r4, #0]
 800606e:	2203      	movs	r2, #3
 8006070:	4650      	mov	r0, sl
 8006072:	f7fa f8ad 	bl	80001d0 <memchr>
 8006076:	b138      	cbz	r0, 8006088 <_svfiprintf_r+0x150>
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	eba0 000a 	sub.w	r0, r0, sl
 800607e:	2240      	movs	r2, #64	@ 0x40
 8006080:	4082      	lsls	r2, r0
 8006082:	4313      	orrs	r3, r2
 8006084:	3401      	adds	r4, #1
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	4825      	ldr	r0, [pc, #148]	@ (8006124 <_svfiprintf_r+0x1ec>)
 800608e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006092:	2206      	movs	r2, #6
 8006094:	f7fa f89c 	bl	80001d0 <memchr>
 8006098:	2800      	cmp	r0, #0
 800609a:	d036      	beq.n	800610a <_svfiprintf_r+0x1d2>
 800609c:	4b22      	ldr	r3, [pc, #136]	@ (8006128 <_svfiprintf_r+0x1f0>)
 800609e:	bb1b      	cbnz	r3, 80060e8 <_svfiprintf_r+0x1b0>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	3307      	adds	r3, #7
 80060a4:	f023 0307 	bic.w	r3, r3, #7
 80060a8:	3308      	adds	r3, #8
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	4433      	add	r3, r6
 80060b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b2:	e76a      	b.n	8005f8a <_svfiprintf_r+0x52>
 80060b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b8:	460c      	mov	r4, r1
 80060ba:	2001      	movs	r0, #1
 80060bc:	e7a8      	b.n	8006010 <_svfiprintf_r+0xd8>
 80060be:	2300      	movs	r3, #0
 80060c0:	3401      	adds	r4, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f04f 0c0a 	mov.w	ip, #10
 80060ca:	4620      	mov	r0, r4
 80060cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d0:	3a30      	subs	r2, #48	@ 0x30
 80060d2:	2a09      	cmp	r2, #9
 80060d4:	d903      	bls.n	80060de <_svfiprintf_r+0x1a6>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c6      	beq.n	8006068 <_svfiprintf_r+0x130>
 80060da:	9105      	str	r1, [sp, #20]
 80060dc:	e7c4      	b.n	8006068 <_svfiprintf_r+0x130>
 80060de:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e2:	4604      	mov	r4, r0
 80060e4:	2301      	movs	r3, #1
 80060e6:	e7f0      	b.n	80060ca <_svfiprintf_r+0x192>
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	462a      	mov	r2, r5
 80060ee:	4b0f      	ldr	r3, [pc, #60]	@ (800612c <_svfiprintf_r+0x1f4>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7fd fe94 	bl	8003e20 <_printf_float>
 80060f8:	1c42      	adds	r2, r0, #1
 80060fa:	4606      	mov	r6, r0
 80060fc:	d1d6      	bne.n	80060ac <_svfiprintf_r+0x174>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	065b      	lsls	r3, r3, #25
 8006102:	f53f af2d 	bmi.w	8005f60 <_svfiprintf_r+0x28>
 8006106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006108:	e72c      	b.n	8005f64 <_svfiprintf_r+0x2c>
 800610a:	ab03      	add	r3, sp, #12
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	462a      	mov	r2, r5
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <_svfiprintf_r+0x1f4>)
 8006112:	a904      	add	r1, sp, #16
 8006114:	4638      	mov	r0, r7
 8006116:	f7fe f91d 	bl	8004354 <_printf_i>
 800611a:	e7ed      	b.n	80060f8 <_svfiprintf_r+0x1c0>
 800611c:	08006be8 	.word	0x08006be8
 8006120:	08006bee 	.word	0x08006bee
 8006124:	08006bf2 	.word	0x08006bf2
 8006128:	08003e21 	.word	0x08003e21
 800612c:	08005e81 	.word	0x08005e81

08006130 <__sflush_r>:
 8006130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	0716      	lsls	r6, r2, #28
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	d454      	bmi.n	80061e8 <__sflush_r+0xb8>
 800613e:	684b      	ldr	r3, [r1, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc02      	bgt.n	800614a <__sflush_r+0x1a>
 8006144:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd48      	ble.n	80061dc <__sflush_r+0xac>
 800614a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800614c:	2e00      	cmp	r6, #0
 800614e:	d045      	beq.n	80061dc <__sflush_r+0xac>
 8006150:	2300      	movs	r3, #0
 8006152:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006156:	682f      	ldr	r7, [r5, #0]
 8006158:	6a21      	ldr	r1, [r4, #32]
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	d030      	beq.n	80061c0 <__sflush_r+0x90>
 800615e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	0759      	lsls	r1, r3, #29
 8006164:	d505      	bpl.n	8006172 <__sflush_r+0x42>
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	1ad2      	subs	r2, r2, r3
 800616a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800616c:	b10b      	cbz	r3, 8006172 <__sflush_r+0x42>
 800616e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006176:	6a21      	ldr	r1, [r4, #32]
 8006178:	4628      	mov	r0, r5
 800617a:	47b0      	blx	r6
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	d106      	bne.n	8006190 <__sflush_r+0x60>
 8006182:	6829      	ldr	r1, [r5, #0]
 8006184:	291d      	cmp	r1, #29
 8006186:	d82b      	bhi.n	80061e0 <__sflush_r+0xb0>
 8006188:	4a28      	ldr	r2, [pc, #160]	@ (800622c <__sflush_r+0xfc>)
 800618a:	410a      	asrs	r2, r1
 800618c:	07d6      	lsls	r6, r2, #31
 800618e:	d427      	bmi.n	80061e0 <__sflush_r+0xb0>
 8006190:	2200      	movs	r2, #0
 8006192:	6062      	str	r2, [r4, #4]
 8006194:	04d9      	lsls	r1, r3, #19
 8006196:	6922      	ldr	r2, [r4, #16]
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	d504      	bpl.n	80061a6 <__sflush_r+0x76>
 800619c:	1c42      	adds	r2, r0, #1
 800619e:	d101      	bne.n	80061a4 <__sflush_r+0x74>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b903      	cbnz	r3, 80061a6 <__sflush_r+0x76>
 80061a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80061a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061a8:	602f      	str	r7, [r5, #0]
 80061aa:	b1b9      	cbz	r1, 80061dc <__sflush_r+0xac>
 80061ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d002      	beq.n	80061ba <__sflush_r+0x8a>
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff f9e3 	bl	8005580 <_free_r>
 80061ba:	2300      	movs	r3, #0
 80061bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80061be:	e00d      	b.n	80061dc <__sflush_r+0xac>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b0      	blx	r6
 80061c6:	4602      	mov	r2, r0
 80061c8:	1c50      	adds	r0, r2, #1
 80061ca:	d1c9      	bne.n	8006160 <__sflush_r+0x30>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0c6      	beq.n	8006160 <__sflush_r+0x30>
 80061d2:	2b1d      	cmp	r3, #29
 80061d4:	d001      	beq.n	80061da <__sflush_r+0xaa>
 80061d6:	2b16      	cmp	r3, #22
 80061d8:	d11d      	bne.n	8006216 <__sflush_r+0xe6>
 80061da:	602f      	str	r7, [r5, #0]
 80061dc:	2000      	movs	r0, #0
 80061de:	e021      	b.n	8006224 <__sflush_r+0xf4>
 80061e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	e01a      	b.n	800621e <__sflush_r+0xee>
 80061e8:	690f      	ldr	r7, [r1, #16]
 80061ea:	2f00      	cmp	r7, #0
 80061ec:	d0f6      	beq.n	80061dc <__sflush_r+0xac>
 80061ee:	0793      	lsls	r3, r2, #30
 80061f0:	680e      	ldr	r6, [r1, #0]
 80061f2:	bf08      	it	eq
 80061f4:	694b      	ldreq	r3, [r1, #20]
 80061f6:	600f      	str	r7, [r1, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2300      	movne	r3, #0
 80061fc:	1bf6      	subs	r6, r6, r7
 80061fe:	608b      	str	r3, [r1, #8]
 8006200:	2e00      	cmp	r6, #0
 8006202:	ddeb      	ble.n	80061dc <__sflush_r+0xac>
 8006204:	6a21      	ldr	r1, [r4, #32]
 8006206:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800620a:	4633      	mov	r3, r6
 800620c:	463a      	mov	r2, r7
 800620e:	4628      	mov	r0, r5
 8006210:	47e0      	blx	ip
 8006212:	2800      	cmp	r0, #0
 8006214:	dc07      	bgt.n	8006226 <__sflush_r+0xf6>
 8006216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800621a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006226:	4407      	add	r7, r0
 8006228:	1a36      	subs	r6, r6, r0
 800622a:	e7e9      	b.n	8006200 <__sflush_r+0xd0>
 800622c:	dfbffffe 	.word	0xdfbffffe

08006230 <_fflush_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	690b      	ldr	r3, [r1, #16]
 8006234:	4605      	mov	r5, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b913      	cbnz	r3, 8006240 <_fflush_r+0x10>
 800623a:	2500      	movs	r5, #0
 800623c:	4628      	mov	r0, r5
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	b118      	cbz	r0, 800624a <_fflush_r+0x1a>
 8006242:	6a03      	ldr	r3, [r0, #32]
 8006244:	b90b      	cbnz	r3, 800624a <_fflush_r+0x1a>
 8006246:	f7fe fa31 	bl	80046ac <__sinit>
 800624a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f3      	beq.n	800623a <_fflush_r+0xa>
 8006252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006254:	07d0      	lsls	r0, r2, #31
 8006256:	d404      	bmi.n	8006262 <_fflush_r+0x32>
 8006258:	0599      	lsls	r1, r3, #22
 800625a:	d402      	bmi.n	8006262 <_fflush_r+0x32>
 800625c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625e:	f7fe fb3c 	bl	80048da <__retarget_lock_acquire_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	4621      	mov	r1, r4
 8006266:	f7ff ff63 	bl	8006130 <__sflush_r>
 800626a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800626c:	07da      	lsls	r2, r3, #31
 800626e:	4605      	mov	r5, r0
 8006270:	d4e4      	bmi.n	800623c <_fflush_r+0xc>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	d4e1      	bmi.n	800623c <_fflush_r+0xc>
 8006278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800627a:	f7fe fb2f 	bl	80048dc <__retarget_lock_release_recursive>
 800627e:	e7dd      	b.n	800623c <_fflush_r+0xc>

08006280 <memmove>:
 8006280:	4288      	cmp	r0, r1
 8006282:	b510      	push	{r4, lr}
 8006284:	eb01 0402 	add.w	r4, r1, r2
 8006288:	d902      	bls.n	8006290 <memmove+0x10>
 800628a:	4284      	cmp	r4, r0
 800628c:	4623      	mov	r3, r4
 800628e:	d807      	bhi.n	80062a0 <memmove+0x20>
 8006290:	1e43      	subs	r3, r0, #1
 8006292:	42a1      	cmp	r1, r4
 8006294:	d008      	beq.n	80062a8 <memmove+0x28>
 8006296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800629e:	e7f8      	b.n	8006292 <memmove+0x12>
 80062a0:	4402      	add	r2, r0
 80062a2:	4601      	mov	r1, r0
 80062a4:	428a      	cmp	r2, r1
 80062a6:	d100      	bne.n	80062aa <memmove+0x2a>
 80062a8:	bd10      	pop	{r4, pc}
 80062aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062b2:	e7f7      	b.n	80062a4 <memmove+0x24>

080062b4 <_sbrk_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	@ (80062d0 <_sbrk_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb fb06 	bl	80018d0 <_sbrk>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_sbrk_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_sbrk_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20000400 	.word	0x20000400

080062d4 <memcpy>:
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	4770      	bx	lr
 80062e0:	b510      	push	{r4, lr}
 80062e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ea:	4291      	cmp	r1, r2
 80062ec:	d1f9      	bne.n	80062e2 <memcpy+0xe>
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <__assert_func>:
 80062f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062f2:	4614      	mov	r4, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4b09      	ldr	r3, [pc, #36]	@ (800631c <__assert_func+0x2c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4605      	mov	r5, r0
 80062fc:	68d8      	ldr	r0, [r3, #12]
 80062fe:	b954      	cbnz	r4, 8006316 <__assert_func+0x26>
 8006300:	4b07      	ldr	r3, [pc, #28]	@ (8006320 <__assert_func+0x30>)
 8006302:	461c      	mov	r4, r3
 8006304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006308:	9100      	str	r1, [sp, #0]
 800630a:	462b      	mov	r3, r5
 800630c:	4905      	ldr	r1, [pc, #20]	@ (8006324 <__assert_func+0x34>)
 800630e:	f000 f86f 	bl	80063f0 <fiprintf>
 8006312:	f000 f87f 	bl	8006414 <abort>
 8006316:	4b04      	ldr	r3, [pc, #16]	@ (8006328 <__assert_func+0x38>)
 8006318:	e7f4      	b.n	8006304 <__assert_func+0x14>
 800631a:	bf00      	nop
 800631c:	20000018 	.word	0x20000018
 8006320:	08006c3e 	.word	0x08006c3e
 8006324:	08006c10 	.word	0x08006c10
 8006328:	08006c03 	.word	0x08006c03

0800632c <_calloc_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	fba1 5402 	umull	r5, r4, r1, r2
 8006332:	b93c      	cbnz	r4, 8006344 <_calloc_r+0x18>
 8006334:	4629      	mov	r1, r5
 8006336:	f7ff f997 	bl	8005668 <_malloc_r>
 800633a:	4606      	mov	r6, r0
 800633c:	b928      	cbnz	r0, 800634a <_calloc_r+0x1e>
 800633e:	2600      	movs	r6, #0
 8006340:	4630      	mov	r0, r6
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	220c      	movs	r2, #12
 8006346:	6002      	str	r2, [r0, #0]
 8006348:	e7f9      	b.n	800633e <_calloc_r+0x12>
 800634a:	462a      	mov	r2, r5
 800634c:	4621      	mov	r1, r4
 800634e:	f7fe fa46 	bl	80047de <memset>
 8006352:	e7f5      	b.n	8006340 <_calloc_r+0x14>

08006354 <__ascii_mbtowc>:
 8006354:	b082      	sub	sp, #8
 8006356:	b901      	cbnz	r1, 800635a <__ascii_mbtowc+0x6>
 8006358:	a901      	add	r1, sp, #4
 800635a:	b142      	cbz	r2, 800636e <__ascii_mbtowc+0x1a>
 800635c:	b14b      	cbz	r3, 8006372 <__ascii_mbtowc+0x1e>
 800635e:	7813      	ldrb	r3, [r2, #0]
 8006360:	600b      	str	r3, [r1, #0]
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	1e10      	subs	r0, r2, #0
 8006366:	bf18      	it	ne
 8006368:	2001      	movne	r0, #1
 800636a:	b002      	add	sp, #8
 800636c:	4770      	bx	lr
 800636e:	4610      	mov	r0, r2
 8006370:	e7fb      	b.n	800636a <__ascii_mbtowc+0x16>
 8006372:	f06f 0001 	mvn.w	r0, #1
 8006376:	e7f8      	b.n	800636a <__ascii_mbtowc+0x16>

08006378 <_realloc_r>:
 8006378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637c:	4680      	mov	r8, r0
 800637e:	4615      	mov	r5, r2
 8006380:	460c      	mov	r4, r1
 8006382:	b921      	cbnz	r1, 800638e <_realloc_r+0x16>
 8006384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	4611      	mov	r1, r2
 800638a:	f7ff b96d 	b.w	8005668 <_malloc_r>
 800638e:	b92a      	cbnz	r2, 800639c <_realloc_r+0x24>
 8006390:	f7ff f8f6 	bl	8005580 <_free_r>
 8006394:	2400      	movs	r4, #0
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	f000 f841 	bl	8006422 <_malloc_usable_size_r>
 80063a0:	4285      	cmp	r5, r0
 80063a2:	4606      	mov	r6, r0
 80063a4:	d802      	bhi.n	80063ac <_realloc_r+0x34>
 80063a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063aa:	d8f4      	bhi.n	8006396 <_realloc_r+0x1e>
 80063ac:	4629      	mov	r1, r5
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7ff f95a 	bl	8005668 <_malloc_r>
 80063b4:	4607      	mov	r7, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0ec      	beq.n	8006394 <_realloc_r+0x1c>
 80063ba:	42b5      	cmp	r5, r6
 80063bc:	462a      	mov	r2, r5
 80063be:	4621      	mov	r1, r4
 80063c0:	bf28      	it	cs
 80063c2:	4632      	movcs	r2, r6
 80063c4:	f7ff ff86 	bl	80062d4 <memcpy>
 80063c8:	4621      	mov	r1, r4
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff f8d8 	bl	8005580 <_free_r>
 80063d0:	463c      	mov	r4, r7
 80063d2:	e7e0      	b.n	8006396 <_realloc_r+0x1e>

080063d4 <__ascii_wctomb>:
 80063d4:	4603      	mov	r3, r0
 80063d6:	4608      	mov	r0, r1
 80063d8:	b141      	cbz	r1, 80063ec <__ascii_wctomb+0x18>
 80063da:	2aff      	cmp	r2, #255	@ 0xff
 80063dc:	d904      	bls.n	80063e8 <__ascii_wctomb+0x14>
 80063de:	228a      	movs	r2, #138	@ 0x8a
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063e6:	4770      	bx	lr
 80063e8:	700a      	strb	r2, [r1, #0]
 80063ea:	2001      	movs	r0, #1
 80063ec:	4770      	bx	lr
	...

080063f0 <fiprintf>:
 80063f0:	b40e      	push	{r1, r2, r3}
 80063f2:	b503      	push	{r0, r1, lr}
 80063f4:	4601      	mov	r1, r0
 80063f6:	ab03      	add	r3, sp, #12
 80063f8:	4805      	ldr	r0, [pc, #20]	@ (8006410 <fiprintf+0x20>)
 80063fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	f000 f83d 	bl	8006480 <_vfiprintf_r>
 8006406:	b002      	add	sp, #8
 8006408:	f85d eb04 	ldr.w	lr, [sp], #4
 800640c:	b003      	add	sp, #12
 800640e:	4770      	bx	lr
 8006410:	20000018 	.word	0x20000018

08006414 <abort>:
 8006414:	b508      	push	{r3, lr}
 8006416:	2006      	movs	r0, #6
 8006418:	f000 fa06 	bl	8006828 <raise>
 800641c:	2001      	movs	r0, #1
 800641e:	f7fb f9e2 	bl	80017e6 <_exit>

08006422 <_malloc_usable_size_r>:
 8006422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006426:	1f18      	subs	r0, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfbc      	itt	lt
 800642c:	580b      	ldrlt	r3, [r1, r0]
 800642e:	18c0      	addlt	r0, r0, r3
 8006430:	4770      	bx	lr

08006432 <__sfputc_r>:
 8006432:	6893      	ldr	r3, [r2, #8]
 8006434:	3b01      	subs	r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	b410      	push	{r4}
 800643a:	6093      	str	r3, [r2, #8]
 800643c:	da07      	bge.n	800644e <__sfputc_r+0x1c>
 800643e:	6994      	ldr	r4, [r2, #24]
 8006440:	42a3      	cmp	r3, r4
 8006442:	db01      	blt.n	8006448 <__sfputc_r+0x16>
 8006444:	290a      	cmp	r1, #10
 8006446:	d102      	bne.n	800644e <__sfputc_r+0x1c>
 8006448:	bc10      	pop	{r4}
 800644a:	f000 b931 	b.w	80066b0 <__swbuf_r>
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	1c58      	adds	r0, r3, #1
 8006452:	6010      	str	r0, [r2, #0]
 8006454:	7019      	strb	r1, [r3, #0]
 8006456:	4608      	mov	r0, r1
 8006458:	bc10      	pop	{r4}
 800645a:	4770      	bx	lr

0800645c <__sfputs_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	4606      	mov	r6, r0
 8006460:	460f      	mov	r7, r1
 8006462:	4614      	mov	r4, r2
 8006464:	18d5      	adds	r5, r2, r3
 8006466:	42ac      	cmp	r4, r5
 8006468:	d101      	bne.n	800646e <__sfputs_r+0x12>
 800646a:	2000      	movs	r0, #0
 800646c:	e007      	b.n	800647e <__sfputs_r+0x22>
 800646e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006472:	463a      	mov	r2, r7
 8006474:	4630      	mov	r0, r6
 8006476:	f7ff ffdc 	bl	8006432 <__sfputc_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d1f3      	bne.n	8006466 <__sfputs_r+0xa>
 800647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006480 <_vfiprintf_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	460d      	mov	r5, r1
 8006486:	b09d      	sub	sp, #116	@ 0x74
 8006488:	4614      	mov	r4, r2
 800648a:	4698      	mov	r8, r3
 800648c:	4606      	mov	r6, r0
 800648e:	b118      	cbz	r0, 8006498 <_vfiprintf_r+0x18>
 8006490:	6a03      	ldr	r3, [r0, #32]
 8006492:	b90b      	cbnz	r3, 8006498 <_vfiprintf_r+0x18>
 8006494:	f7fe f90a 	bl	80046ac <__sinit>
 8006498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	d405      	bmi.n	80064aa <_vfiprintf_r+0x2a>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	059a      	lsls	r2, r3, #22
 80064a2:	d402      	bmi.n	80064aa <_vfiprintf_r+0x2a>
 80064a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064a6:	f7fe fa18 	bl	80048da <__retarget_lock_acquire_recursive>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	071b      	lsls	r3, r3, #28
 80064ae:	d501      	bpl.n	80064b4 <_vfiprintf_r+0x34>
 80064b0:	692b      	ldr	r3, [r5, #16]
 80064b2:	b99b      	cbnz	r3, 80064dc <_vfiprintf_r+0x5c>
 80064b4:	4629      	mov	r1, r5
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 f938 	bl	800672c <__swsetup_r>
 80064bc:	b170      	cbz	r0, 80064dc <_vfiprintf_r+0x5c>
 80064be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064c0:	07dc      	lsls	r4, r3, #31
 80064c2:	d504      	bpl.n	80064ce <_vfiprintf_r+0x4e>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064c8:	b01d      	add	sp, #116	@ 0x74
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	0598      	lsls	r0, r3, #22
 80064d2:	d4f7      	bmi.n	80064c4 <_vfiprintf_r+0x44>
 80064d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064d6:	f7fe fa01 	bl	80048dc <__retarget_lock_release_recursive>
 80064da:	e7f3      	b.n	80064c4 <_vfiprintf_r+0x44>
 80064dc:	2300      	movs	r3, #0
 80064de:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e0:	2320      	movs	r3, #32
 80064e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ea:	2330      	movs	r3, #48	@ 0x30
 80064ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800669c <_vfiprintf_r+0x21c>
 80064f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064f4:	f04f 0901 	mov.w	r9, #1
 80064f8:	4623      	mov	r3, r4
 80064fa:	469a      	mov	sl, r3
 80064fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006500:	b10a      	cbz	r2, 8006506 <_vfiprintf_r+0x86>
 8006502:	2a25      	cmp	r2, #37	@ 0x25
 8006504:	d1f9      	bne.n	80064fa <_vfiprintf_r+0x7a>
 8006506:	ebba 0b04 	subs.w	fp, sl, r4
 800650a:	d00b      	beq.n	8006524 <_vfiprintf_r+0xa4>
 800650c:	465b      	mov	r3, fp
 800650e:	4622      	mov	r2, r4
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff ffa2 	bl	800645c <__sfputs_r>
 8006518:	3001      	adds	r0, #1
 800651a:	f000 80a7 	beq.w	800666c <_vfiprintf_r+0x1ec>
 800651e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006520:	445a      	add	r2, fp
 8006522:	9209      	str	r2, [sp, #36]	@ 0x24
 8006524:	f89a 3000 	ldrb.w	r3, [sl]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 809f 	beq.w	800666c <_vfiprintf_r+0x1ec>
 800652e:	2300      	movs	r3, #0
 8006530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006538:	f10a 0a01 	add.w	sl, sl, #1
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	9307      	str	r3, [sp, #28]
 8006540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006544:	931a      	str	r3, [sp, #104]	@ 0x68
 8006546:	4654      	mov	r4, sl
 8006548:	2205      	movs	r2, #5
 800654a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654e:	4853      	ldr	r0, [pc, #332]	@ (800669c <_vfiprintf_r+0x21c>)
 8006550:	f7f9 fe3e 	bl	80001d0 <memchr>
 8006554:	9a04      	ldr	r2, [sp, #16]
 8006556:	b9d8      	cbnz	r0, 8006590 <_vfiprintf_r+0x110>
 8006558:	06d1      	lsls	r1, r2, #27
 800655a:	bf44      	itt	mi
 800655c:	2320      	movmi	r3, #32
 800655e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006562:	0713      	lsls	r3, r2, #28
 8006564:	bf44      	itt	mi
 8006566:	232b      	movmi	r3, #43	@ 0x2b
 8006568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800656c:	f89a 3000 	ldrb.w	r3, [sl]
 8006570:	2b2a      	cmp	r3, #42	@ 0x2a
 8006572:	d015      	beq.n	80065a0 <_vfiprintf_r+0x120>
 8006574:	9a07      	ldr	r2, [sp, #28]
 8006576:	4654      	mov	r4, sl
 8006578:	2000      	movs	r0, #0
 800657a:	f04f 0c0a 	mov.w	ip, #10
 800657e:	4621      	mov	r1, r4
 8006580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006584:	3b30      	subs	r3, #48	@ 0x30
 8006586:	2b09      	cmp	r3, #9
 8006588:	d94b      	bls.n	8006622 <_vfiprintf_r+0x1a2>
 800658a:	b1b0      	cbz	r0, 80065ba <_vfiprintf_r+0x13a>
 800658c:	9207      	str	r2, [sp, #28]
 800658e:	e014      	b.n	80065ba <_vfiprintf_r+0x13a>
 8006590:	eba0 0308 	sub.w	r3, r0, r8
 8006594:	fa09 f303 	lsl.w	r3, r9, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	46a2      	mov	sl, r4
 800659e:	e7d2      	b.n	8006546 <_vfiprintf_r+0xc6>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	1d19      	adds	r1, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9103      	str	r1, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfbb      	ittet	lt
 80065ac:	425b      	neglt	r3, r3
 80065ae:	f042 0202 	orrlt.w	r2, r2, #2
 80065b2:	9307      	strge	r3, [sp, #28]
 80065b4:	9307      	strlt	r3, [sp, #28]
 80065b6:	bfb8      	it	lt
 80065b8:	9204      	strlt	r2, [sp, #16]
 80065ba:	7823      	ldrb	r3, [r4, #0]
 80065bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80065be:	d10a      	bne.n	80065d6 <_vfiprintf_r+0x156>
 80065c0:	7863      	ldrb	r3, [r4, #1]
 80065c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c4:	d132      	bne.n	800662c <_vfiprintf_r+0x1ac>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	9203      	str	r2, [sp, #12]
 80065ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065d2:	3402      	adds	r4, #2
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80066a0 <_vfiprintf_r+0x220>
 80065da:	7821      	ldrb	r1, [r4, #0]
 80065dc:	2203      	movs	r2, #3
 80065de:	4650      	mov	r0, sl
 80065e0:	f7f9 fdf6 	bl	80001d0 <memchr>
 80065e4:	b138      	cbz	r0, 80065f6 <_vfiprintf_r+0x176>
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	eba0 000a 	sub.w	r0, r0, sl
 80065ec:	2240      	movs	r2, #64	@ 0x40
 80065ee:	4082      	lsls	r2, r0
 80065f0:	4313      	orrs	r3, r2
 80065f2:	3401      	adds	r4, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fa:	482a      	ldr	r0, [pc, #168]	@ (80066a4 <_vfiprintf_r+0x224>)
 80065fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006600:	2206      	movs	r2, #6
 8006602:	f7f9 fde5 	bl	80001d0 <memchr>
 8006606:	2800      	cmp	r0, #0
 8006608:	d03f      	beq.n	800668a <_vfiprintf_r+0x20a>
 800660a:	4b27      	ldr	r3, [pc, #156]	@ (80066a8 <_vfiprintf_r+0x228>)
 800660c:	bb1b      	cbnz	r3, 8006656 <_vfiprintf_r+0x1d6>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	3308      	adds	r3, #8
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661c:	443b      	add	r3, r7
 800661e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006620:	e76a      	b.n	80064f8 <_vfiprintf_r+0x78>
 8006622:	fb0c 3202 	mla	r2, ip, r2, r3
 8006626:	460c      	mov	r4, r1
 8006628:	2001      	movs	r0, #1
 800662a:	e7a8      	b.n	800657e <_vfiprintf_r+0xfe>
 800662c:	2300      	movs	r3, #0
 800662e:	3401      	adds	r4, #1
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	4619      	mov	r1, r3
 8006634:	f04f 0c0a 	mov.w	ip, #10
 8006638:	4620      	mov	r0, r4
 800663a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663e:	3a30      	subs	r2, #48	@ 0x30
 8006640:	2a09      	cmp	r2, #9
 8006642:	d903      	bls.n	800664c <_vfiprintf_r+0x1cc>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0c6      	beq.n	80065d6 <_vfiprintf_r+0x156>
 8006648:	9105      	str	r1, [sp, #20]
 800664a:	e7c4      	b.n	80065d6 <_vfiprintf_r+0x156>
 800664c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006650:	4604      	mov	r4, r0
 8006652:	2301      	movs	r3, #1
 8006654:	e7f0      	b.n	8006638 <_vfiprintf_r+0x1b8>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <_vfiprintf_r+0x22c>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4630      	mov	r0, r6
 8006662:	f7fd fbdd 	bl	8003e20 <_printf_float>
 8006666:	4607      	mov	r7, r0
 8006668:	1c78      	adds	r0, r7, #1
 800666a:	d1d6      	bne.n	800661a <_vfiprintf_r+0x19a>
 800666c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800666e:	07d9      	lsls	r1, r3, #31
 8006670:	d405      	bmi.n	800667e <_vfiprintf_r+0x1fe>
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d402      	bmi.n	800667e <_vfiprintf_r+0x1fe>
 8006678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800667a:	f7fe f92f 	bl	80048dc <__retarget_lock_release_recursive>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	065b      	lsls	r3, r3, #25
 8006682:	f53f af1f 	bmi.w	80064c4 <_vfiprintf_r+0x44>
 8006686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006688:	e71e      	b.n	80064c8 <_vfiprintf_r+0x48>
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <_vfiprintf_r+0x22c>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	4630      	mov	r0, r6
 8006696:	f7fd fe5d 	bl	8004354 <_printf_i>
 800669a:	e7e4      	b.n	8006666 <_vfiprintf_r+0x1e6>
 800669c:	08006be8 	.word	0x08006be8
 80066a0:	08006bee 	.word	0x08006bee
 80066a4:	08006bf2 	.word	0x08006bf2
 80066a8:	08003e21 	.word	0x08003e21
 80066ac:	0800645d 	.word	0x0800645d

080066b0 <__swbuf_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	460e      	mov	r6, r1
 80066b4:	4614      	mov	r4, r2
 80066b6:	4605      	mov	r5, r0
 80066b8:	b118      	cbz	r0, 80066c2 <__swbuf_r+0x12>
 80066ba:	6a03      	ldr	r3, [r0, #32]
 80066bc:	b90b      	cbnz	r3, 80066c2 <__swbuf_r+0x12>
 80066be:	f7fd fff5 	bl	80046ac <__sinit>
 80066c2:	69a3      	ldr	r3, [r4, #24]
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	071a      	lsls	r2, r3, #28
 80066ca:	d501      	bpl.n	80066d0 <__swbuf_r+0x20>
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b943      	cbnz	r3, 80066e2 <__swbuf_r+0x32>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f82a 	bl	800672c <__swsetup_r>
 80066d8:	b118      	cbz	r0, 80066e2 <__swbuf_r+0x32>
 80066da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80066de:	4638      	mov	r0, r7
 80066e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	1a98      	subs	r0, r3, r2
 80066e8:	6963      	ldr	r3, [r4, #20]
 80066ea:	b2f6      	uxtb	r6, r6
 80066ec:	4283      	cmp	r3, r0
 80066ee:	4637      	mov	r7, r6
 80066f0:	dc05      	bgt.n	80066fe <__swbuf_r+0x4e>
 80066f2:	4621      	mov	r1, r4
 80066f4:	4628      	mov	r0, r5
 80066f6:	f7ff fd9b 	bl	8006230 <_fflush_r>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d1ed      	bne.n	80066da <__swbuf_r+0x2a>
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	3b01      	subs	r3, #1
 8006702:	60a3      	str	r3, [r4, #8]
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	6022      	str	r2, [r4, #0]
 800670a:	701e      	strb	r6, [r3, #0]
 800670c:	6962      	ldr	r2, [r4, #20]
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	429a      	cmp	r2, r3
 8006712:	d004      	beq.n	800671e <__swbuf_r+0x6e>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d5e1      	bpl.n	80066de <__swbuf_r+0x2e>
 800671a:	2e0a      	cmp	r6, #10
 800671c:	d1df      	bne.n	80066de <__swbuf_r+0x2e>
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f7ff fd85 	bl	8006230 <_fflush_r>
 8006726:	2800      	cmp	r0, #0
 8006728:	d0d9      	beq.n	80066de <__swbuf_r+0x2e>
 800672a:	e7d6      	b.n	80066da <__swbuf_r+0x2a>

0800672c <__swsetup_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4b29      	ldr	r3, [pc, #164]	@ (80067d4 <__swsetup_r+0xa8>)
 8006730:	4605      	mov	r5, r0
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	460c      	mov	r4, r1
 8006736:	b118      	cbz	r0, 8006740 <__swsetup_r+0x14>
 8006738:	6a03      	ldr	r3, [r0, #32]
 800673a:	b90b      	cbnz	r3, 8006740 <__swsetup_r+0x14>
 800673c:	f7fd ffb6 	bl	80046ac <__sinit>
 8006740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006744:	0719      	lsls	r1, r3, #28
 8006746:	d422      	bmi.n	800678e <__swsetup_r+0x62>
 8006748:	06da      	lsls	r2, r3, #27
 800674a:	d407      	bmi.n	800675c <__swsetup_r+0x30>
 800674c:	2209      	movs	r2, #9
 800674e:	602a      	str	r2, [r5, #0]
 8006750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800675a:	e033      	b.n	80067c4 <__swsetup_r+0x98>
 800675c:	0758      	lsls	r0, r3, #29
 800675e:	d512      	bpl.n	8006786 <__swsetup_r+0x5a>
 8006760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006762:	b141      	cbz	r1, 8006776 <__swsetup_r+0x4a>
 8006764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006768:	4299      	cmp	r1, r3
 800676a:	d002      	beq.n	8006772 <__swsetup_r+0x46>
 800676c:	4628      	mov	r0, r5
 800676e:	f7fe ff07 	bl	8005580 <_free_r>
 8006772:	2300      	movs	r3, #0
 8006774:	6363      	str	r3, [r4, #52]	@ 0x34
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	2300      	movs	r3, #0
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f043 0308 	orr.w	r3, r3, #8
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	b94b      	cbnz	r3, 80067a6 <__swsetup_r+0x7a>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679c:	d003      	beq.n	80067a6 <__swsetup_r+0x7a>
 800679e:	4621      	mov	r1, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	f000 f883 	bl	80068ac <__smakebuf_r>
 80067a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067aa:	f013 0201 	ands.w	r2, r3, #1
 80067ae:	d00a      	beq.n	80067c6 <__swsetup_r+0x9a>
 80067b0:	2200      	movs	r2, #0
 80067b2:	60a2      	str	r2, [r4, #8]
 80067b4:	6962      	ldr	r2, [r4, #20]
 80067b6:	4252      	negs	r2, r2
 80067b8:	61a2      	str	r2, [r4, #24]
 80067ba:	6922      	ldr	r2, [r4, #16]
 80067bc:	b942      	cbnz	r2, 80067d0 <__swsetup_r+0xa4>
 80067be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067c2:	d1c5      	bne.n	8006750 <__swsetup_r+0x24>
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	0799      	lsls	r1, r3, #30
 80067c8:	bf58      	it	pl
 80067ca:	6962      	ldrpl	r2, [r4, #20]
 80067cc:	60a2      	str	r2, [r4, #8]
 80067ce:	e7f4      	b.n	80067ba <__swsetup_r+0x8e>
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7f7      	b.n	80067c4 <__swsetup_r+0x98>
 80067d4:	20000018 	.word	0x20000018

080067d8 <_raise_r>:
 80067d8:	291f      	cmp	r1, #31
 80067da:	b538      	push	{r3, r4, r5, lr}
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	d904      	bls.n	80067ec <_raise_r+0x14>
 80067e2:	2316      	movs	r3, #22
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80067ee:	b112      	cbz	r2, 80067f6 <_raise_r+0x1e>
 80067f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067f4:	b94b      	cbnz	r3, 800680a <_raise_r+0x32>
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f830 	bl	800685c <_getpid_r>
 80067fc:	4622      	mov	r2, r4
 80067fe:	4601      	mov	r1, r0
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006806:	f000 b817 	b.w	8006838 <_kill_r>
 800680a:	2b01      	cmp	r3, #1
 800680c:	d00a      	beq.n	8006824 <_raise_r+0x4c>
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	d103      	bne.n	800681a <_raise_r+0x42>
 8006812:	2316      	movs	r3, #22
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	2001      	movs	r0, #1
 8006818:	e7e7      	b.n	80067ea <_raise_r+0x12>
 800681a:	2100      	movs	r1, #0
 800681c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006820:	4620      	mov	r0, r4
 8006822:	4798      	blx	r3
 8006824:	2000      	movs	r0, #0
 8006826:	e7e0      	b.n	80067ea <_raise_r+0x12>

08006828 <raise>:
 8006828:	4b02      	ldr	r3, [pc, #8]	@ (8006834 <raise+0xc>)
 800682a:	4601      	mov	r1, r0
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f7ff bfd3 	b.w	80067d8 <_raise_r>
 8006832:	bf00      	nop
 8006834:	20000018 	.word	0x20000018

08006838 <_kill_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d07      	ldr	r5, [pc, #28]	@ (8006858 <_kill_r+0x20>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	f7fa ffbe 	bl	80017c6 <_kill>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d102      	bne.n	8006854 <_kill_r+0x1c>
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	b103      	cbz	r3, 8006854 <_kill_r+0x1c>
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	bd38      	pop	{r3, r4, r5, pc}
 8006856:	bf00      	nop
 8006858:	20000400 	.word	0x20000400

0800685c <_getpid_r>:
 800685c:	f7fa bfac 	b.w	80017b8 <_getpid>

08006860 <__swhatbuf_r>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	2900      	cmp	r1, #0
 800686a:	b096      	sub	sp, #88	@ 0x58
 800686c:	4615      	mov	r5, r2
 800686e:	461e      	mov	r6, r3
 8006870:	da0d      	bge.n	800688e <__swhatbuf_r+0x2e>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006878:	f04f 0100 	mov.w	r1, #0
 800687c:	bf14      	ite	ne
 800687e:	2340      	movne	r3, #64	@ 0x40
 8006880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006884:	2000      	movs	r0, #0
 8006886:	6031      	str	r1, [r6, #0]
 8006888:	602b      	str	r3, [r5, #0]
 800688a:	b016      	add	sp, #88	@ 0x58
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	466a      	mov	r2, sp
 8006890:	f000 f848 	bl	8006924 <_fstat_r>
 8006894:	2800      	cmp	r0, #0
 8006896:	dbec      	blt.n	8006872 <__swhatbuf_r+0x12>
 8006898:	9901      	ldr	r1, [sp, #4]
 800689a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800689e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80068a2:	4259      	negs	r1, r3
 80068a4:	4159      	adcs	r1, r3
 80068a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068aa:	e7eb      	b.n	8006884 <__swhatbuf_r+0x24>

080068ac <__smakebuf_r>:
 80068ac:	898b      	ldrh	r3, [r1, #12]
 80068ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b0:	079d      	lsls	r5, r3, #30
 80068b2:	4606      	mov	r6, r0
 80068b4:	460c      	mov	r4, r1
 80068b6:	d507      	bpl.n	80068c8 <__smakebuf_r+0x1c>
 80068b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	2301      	movs	r3, #1
 80068c2:	6163      	str	r3, [r4, #20]
 80068c4:	b003      	add	sp, #12
 80068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c8:	ab01      	add	r3, sp, #4
 80068ca:	466a      	mov	r2, sp
 80068cc:	f7ff ffc8 	bl	8006860 <__swhatbuf_r>
 80068d0:	9f00      	ldr	r7, [sp, #0]
 80068d2:	4605      	mov	r5, r0
 80068d4:	4639      	mov	r1, r7
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7fe fec6 	bl	8005668 <_malloc_r>
 80068dc:	b948      	cbnz	r0, 80068f2 <__smakebuf_r+0x46>
 80068de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e2:	059a      	lsls	r2, r3, #22
 80068e4:	d4ee      	bmi.n	80068c4 <__smakebuf_r+0x18>
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	f043 0302 	orr.w	r3, r3, #2
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	e7e2      	b.n	80068b8 <__smakebuf_r+0xc>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	6020      	str	r0, [r4, #0]
 80068f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006902:	b15b      	cbz	r3, 800691c <__smakebuf_r+0x70>
 8006904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006908:	4630      	mov	r0, r6
 800690a:	f000 f81d 	bl	8006948 <_isatty_r>
 800690e:	b128      	cbz	r0, 800691c <__smakebuf_r+0x70>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	431d      	orrs	r5, r3
 8006920:	81a5      	strh	r5, [r4, #12]
 8006922:	e7cf      	b.n	80068c4 <__smakebuf_r+0x18>

08006924 <_fstat_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d07      	ldr	r5, [pc, #28]	@ (8006944 <_fstat_r+0x20>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	4611      	mov	r1, r2
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	f7fa ffa7 	bl	8001884 <_fstat>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d102      	bne.n	8006940 <_fstat_r+0x1c>
 800693a:	682b      	ldr	r3, [r5, #0]
 800693c:	b103      	cbz	r3, 8006940 <_fstat_r+0x1c>
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	bd38      	pop	{r3, r4, r5, pc}
 8006942:	bf00      	nop
 8006944:	20000400 	.word	0x20000400

08006948 <_isatty_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d06      	ldr	r5, [pc, #24]	@ (8006964 <_isatty_r+0x1c>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fa ffa5 	bl	80018a2 <_isatty>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_isatty_r+0x1a>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_isatty_r+0x1a>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000400 	.word	0x20000400

08006968 <_init>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	bf00      	nop
 800696c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696e:	bc08      	pop	{r3}
 8006970:	469e      	mov	lr, r3
 8006972:	4770      	bx	lr

08006974 <_fini>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	bf00      	nop
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr
