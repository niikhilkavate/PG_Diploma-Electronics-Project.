
day10_can_normal_mode_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008110  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080082a0  080082a0  000092a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008680  08008680  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008680  08008680  00009680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008684  08008684  00009684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008688  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e8  2**0
                  CONTENTS
 10 .bss          000002b8  200001e8  200001e8  0000a1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  0000a1e8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4e5  00000000  00000000  0000a212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ade  00000000  00000000  000146f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  000161d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071c  00000000  00000000  00016b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229cf  00000000  00000000  0001724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9a1  00000000  00000000  00039c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4089  00000000  00000000  000445bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118645  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b30  00000000  00000000  00118688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0011c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008288 	.word	0x08008288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008288 	.word	0x08008288

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eb6:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	@ 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	@ 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	@ 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__aeabi_f2uiz>:
 8001104:	0042      	lsls	r2, r0, #1
 8001106:	d20e      	bcs.n	8001126 <__aeabi_f2uiz+0x22>
 8001108:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800110c:	d30b      	bcc.n	8001126 <__aeabi_f2uiz+0x22>
 800110e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001112:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001116:	d409      	bmi.n	800112c <__aeabi_f2uiz+0x28>
 8001118:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2uiz+0x32>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d102      	bne.n	800113c <__aeabi_f2uiz+0x38>
 8001136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800113a:	4770      	bx	lr
 800113c:	f04f 0000 	mov.w	r0, #0
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <__aeabi_uldivmod>:
 8001144:	b953      	cbnz	r3, 800115c <__aeabi_uldivmod+0x18>
 8001146:	b94a      	cbnz	r2, 800115c <__aeabi_uldivmod+0x18>
 8001148:	2900      	cmp	r1, #0
 800114a:	bf08      	it	eq
 800114c:	2800      	cmpeq	r0, #0
 800114e:	bf1c      	itt	ne
 8001150:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001154:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001158:	f000 b96a 	b.w	8001430 <__aeabi_idiv0>
 800115c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001164:	f000 f806 	bl	8001174 <__udivmoddi4>
 8001168:	f8dd e004 	ldr.w	lr, [sp, #4]
 800116c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001170:	b004      	add	sp, #16
 8001172:	4770      	bx	lr

08001174 <__udivmoddi4>:
 8001174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001178:	9d08      	ldr	r5, [sp, #32]
 800117a:	460c      	mov	r4, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14e      	bne.n	800121e <__udivmoddi4+0xaa>
 8001180:	4694      	mov	ip, r2
 8001182:	458c      	cmp	ip, r1
 8001184:	4686      	mov	lr, r0
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	d962      	bls.n	8001252 <__udivmoddi4+0xde>
 800118c:	b14a      	cbz	r2, 80011a2 <__udivmoddi4+0x2e>
 800118e:	f1c2 0320 	rsb	r3, r2, #32
 8001192:	4091      	lsls	r1, r2
 8001194:	fa20 f303 	lsr.w	r3, r0, r3
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	4319      	orrs	r1, r3
 800119e:	fa00 fe02 	lsl.w	lr, r0, r2
 80011a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011a6:	fa1f f68c 	uxth.w	r6, ip
 80011aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80011ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ba:	fb04 f106 	mul.w	r1, r4, r6
 80011be:	4299      	cmp	r1, r3
 80011c0:	d90a      	bls.n	80011d8 <__udivmoddi4+0x64>
 80011c2:	eb1c 0303 	adds.w	r3, ip, r3
 80011c6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80011ca:	f080 8112 	bcs.w	80013f2 <__udivmoddi4+0x27e>
 80011ce:	4299      	cmp	r1, r3
 80011d0:	f240 810f 	bls.w	80013f2 <__udivmoddi4+0x27e>
 80011d4:	3c02      	subs	r4, #2
 80011d6:	4463      	add	r3, ip
 80011d8:	1a59      	subs	r1, r3, r1
 80011da:	fa1f f38e 	uxth.w	r3, lr
 80011de:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e2:	fb07 1110 	mls	r1, r7, r0, r1
 80011e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	429e      	cmp	r6, r3
 80011f0:	d90a      	bls.n	8001208 <__udivmoddi4+0x94>
 80011f2:	eb1c 0303 	adds.w	r3, ip, r3
 80011f6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80011fa:	f080 80fc 	bcs.w	80013f6 <__udivmoddi4+0x282>
 80011fe:	429e      	cmp	r6, r3
 8001200:	f240 80f9 	bls.w	80013f6 <__udivmoddi4+0x282>
 8001204:	4463      	add	r3, ip
 8001206:	3802      	subs	r0, #2
 8001208:	1b9b      	subs	r3, r3, r6
 800120a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800120e:	2100      	movs	r1, #0
 8001210:	b11d      	cbz	r5, 800121a <__udivmoddi4+0xa6>
 8001212:	40d3      	lsrs	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	e9c5 3200 	strd	r3, r2, [r5]
 800121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121e:	428b      	cmp	r3, r1
 8001220:	d905      	bls.n	800122e <__udivmoddi4+0xba>
 8001222:	b10d      	cbz	r5, 8001228 <__udivmoddi4+0xb4>
 8001224:	e9c5 0100 	strd	r0, r1, [r5]
 8001228:	2100      	movs	r1, #0
 800122a:	4608      	mov	r0, r1
 800122c:	e7f5      	b.n	800121a <__udivmoddi4+0xa6>
 800122e:	fab3 f183 	clz	r1, r3
 8001232:	2900      	cmp	r1, #0
 8001234:	d146      	bne.n	80012c4 <__udivmoddi4+0x150>
 8001236:	42a3      	cmp	r3, r4
 8001238:	d302      	bcc.n	8001240 <__udivmoddi4+0xcc>
 800123a:	4290      	cmp	r0, r2
 800123c:	f0c0 80f0 	bcc.w	8001420 <__udivmoddi4+0x2ac>
 8001240:	1a86      	subs	r6, r0, r2
 8001242:	eb64 0303 	sbc.w	r3, r4, r3
 8001246:	2001      	movs	r0, #1
 8001248:	2d00      	cmp	r5, #0
 800124a:	d0e6      	beq.n	800121a <__udivmoddi4+0xa6>
 800124c:	e9c5 6300 	strd	r6, r3, [r5]
 8001250:	e7e3      	b.n	800121a <__udivmoddi4+0xa6>
 8001252:	2a00      	cmp	r2, #0
 8001254:	f040 8090 	bne.w	8001378 <__udivmoddi4+0x204>
 8001258:	eba1 040c 	sub.w	r4, r1, ip
 800125c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001260:	fa1f f78c 	uxth.w	r7, ip
 8001264:	2101      	movs	r1, #1
 8001266:	fbb4 f6f8 	udiv	r6, r4, r8
 800126a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800126e:	fb08 4416 	mls	r4, r8, r6, r4
 8001272:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	4298      	cmp	r0, r3
 800127c:	d908      	bls.n	8001290 <__udivmoddi4+0x11c>
 800127e:	eb1c 0303 	adds.w	r3, ip, r3
 8001282:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001286:	d202      	bcs.n	800128e <__udivmoddi4+0x11a>
 8001288:	4298      	cmp	r0, r3
 800128a:	f200 80cd 	bhi.w	8001428 <__udivmoddi4+0x2b4>
 800128e:	4626      	mov	r6, r4
 8001290:	1a1c      	subs	r4, r3, r0
 8001292:	fa1f f38e 	uxth.w	r3, lr
 8001296:	fbb4 f0f8 	udiv	r0, r4, r8
 800129a:	fb08 4410 	mls	r4, r8, r0, r4
 800129e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	429f      	cmp	r7, r3
 80012a8:	d908      	bls.n	80012bc <__udivmoddi4+0x148>
 80012aa:	eb1c 0303 	adds.w	r3, ip, r3
 80012ae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80012b2:	d202      	bcs.n	80012ba <__udivmoddi4+0x146>
 80012b4:	429f      	cmp	r7, r3
 80012b6:	f200 80b0 	bhi.w	800141a <__udivmoddi4+0x2a6>
 80012ba:	4620      	mov	r0, r4
 80012bc:	1bdb      	subs	r3, r3, r7
 80012be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012c2:	e7a5      	b.n	8001210 <__udivmoddi4+0x9c>
 80012c4:	f1c1 0620 	rsb	r6, r1, #32
 80012c8:	408b      	lsls	r3, r1
 80012ca:	fa22 f706 	lsr.w	r7, r2, r6
 80012ce:	431f      	orrs	r7, r3
 80012d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80012d4:	fa04 f301 	lsl.w	r3, r4, r1
 80012d8:	ea43 030c 	orr.w	r3, r3, ip
 80012dc:	40f4      	lsrs	r4, r6
 80012de:	fa00 f801 	lsl.w	r8, r0, r1
 80012e2:	0c38      	lsrs	r0, r7, #16
 80012e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012e8:	fbb4 fef0 	udiv	lr, r4, r0
 80012ec:	fa1f fc87 	uxth.w	ip, r7
 80012f0:	fb00 441e 	mls	r4, r0, lr, r4
 80012f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012f8:	fb0e f90c 	mul.w	r9, lr, ip
 80012fc:	45a1      	cmp	r9, r4
 80012fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001302:	d90a      	bls.n	800131a <__udivmoddi4+0x1a6>
 8001304:	193c      	adds	r4, r7, r4
 8001306:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800130a:	f080 8084 	bcs.w	8001416 <__udivmoddi4+0x2a2>
 800130e:	45a1      	cmp	r9, r4
 8001310:	f240 8081 	bls.w	8001416 <__udivmoddi4+0x2a2>
 8001314:	f1ae 0e02 	sub.w	lr, lr, #2
 8001318:	443c      	add	r4, r7
 800131a:	eba4 0409 	sub.w	r4, r4, r9
 800131e:	fa1f f983 	uxth.w	r9, r3
 8001322:	fbb4 f3f0 	udiv	r3, r4, r0
 8001326:	fb00 4413 	mls	r4, r0, r3, r4
 800132a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800132e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001332:	45a4      	cmp	ip, r4
 8001334:	d907      	bls.n	8001346 <__udivmoddi4+0x1d2>
 8001336:	193c      	adds	r4, r7, r4
 8001338:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800133c:	d267      	bcs.n	800140e <__udivmoddi4+0x29a>
 800133e:	45a4      	cmp	ip, r4
 8001340:	d965      	bls.n	800140e <__udivmoddi4+0x29a>
 8001342:	3b02      	subs	r3, #2
 8001344:	443c      	add	r4, r7
 8001346:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800134a:	fba0 9302 	umull	r9, r3, r0, r2
 800134e:	eba4 040c 	sub.w	r4, r4, ip
 8001352:	429c      	cmp	r4, r3
 8001354:	46ce      	mov	lr, r9
 8001356:	469c      	mov	ip, r3
 8001358:	d351      	bcc.n	80013fe <__udivmoddi4+0x28a>
 800135a:	d04e      	beq.n	80013fa <__udivmoddi4+0x286>
 800135c:	b155      	cbz	r5, 8001374 <__udivmoddi4+0x200>
 800135e:	ebb8 030e 	subs.w	r3, r8, lr
 8001362:	eb64 040c 	sbc.w	r4, r4, ip
 8001366:	fa04 f606 	lsl.w	r6, r4, r6
 800136a:	40cb      	lsrs	r3, r1
 800136c:	431e      	orrs	r6, r3
 800136e:	40cc      	lsrs	r4, r1
 8001370:	e9c5 6400 	strd	r6, r4, [r5]
 8001374:	2100      	movs	r1, #0
 8001376:	e750      	b.n	800121a <__udivmoddi4+0xa6>
 8001378:	f1c2 0320 	rsb	r3, r2, #32
 800137c:	fa20 f103 	lsr.w	r1, r0, r3
 8001380:	fa0c fc02 	lsl.w	ip, ip, r2
 8001384:	fa24 f303 	lsr.w	r3, r4, r3
 8001388:	4094      	lsls	r4, r2
 800138a:	430c      	orrs	r4, r1
 800138c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fa1f f78c 	uxth.w	r7, ip
 8001398:	fbb3 f0f8 	udiv	r0, r3, r8
 800139c:	fb08 3110 	mls	r1, r8, r0, r3
 80013a0:	0c23      	lsrs	r3, r4, #16
 80013a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013a6:	fb00 f107 	mul.w	r1, r0, r7
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d908      	bls.n	80013c0 <__udivmoddi4+0x24c>
 80013ae:	eb1c 0303 	adds.w	r3, ip, r3
 80013b2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80013b6:	d22c      	bcs.n	8001412 <__udivmoddi4+0x29e>
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d92a      	bls.n	8001412 <__udivmoddi4+0x29e>
 80013bc:	3802      	subs	r0, #2
 80013be:	4463      	add	r3, ip
 80013c0:	1a5b      	subs	r3, r3, r1
 80013c2:	b2a4      	uxth	r4, r4
 80013c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80013c8:	fb08 3311 	mls	r3, r8, r1, r3
 80013cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d0:	fb01 f307 	mul.w	r3, r1, r7
 80013d4:	42a3      	cmp	r3, r4
 80013d6:	d908      	bls.n	80013ea <__udivmoddi4+0x276>
 80013d8:	eb1c 0404 	adds.w	r4, ip, r4
 80013dc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80013e0:	d213      	bcs.n	800140a <__udivmoddi4+0x296>
 80013e2:	42a3      	cmp	r3, r4
 80013e4:	d911      	bls.n	800140a <__udivmoddi4+0x296>
 80013e6:	3902      	subs	r1, #2
 80013e8:	4464      	add	r4, ip
 80013ea:	1ae4      	subs	r4, r4, r3
 80013ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f0:	e739      	b.n	8001266 <__udivmoddi4+0xf2>
 80013f2:	4604      	mov	r4, r0
 80013f4:	e6f0      	b.n	80011d8 <__udivmoddi4+0x64>
 80013f6:	4608      	mov	r0, r1
 80013f8:	e706      	b.n	8001208 <__udivmoddi4+0x94>
 80013fa:	45c8      	cmp	r8, r9
 80013fc:	d2ae      	bcs.n	800135c <__udivmoddi4+0x1e8>
 80013fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001402:	eb63 0c07 	sbc.w	ip, r3, r7
 8001406:	3801      	subs	r0, #1
 8001408:	e7a8      	b.n	800135c <__udivmoddi4+0x1e8>
 800140a:	4631      	mov	r1, r6
 800140c:	e7ed      	b.n	80013ea <__udivmoddi4+0x276>
 800140e:	4603      	mov	r3, r0
 8001410:	e799      	b.n	8001346 <__udivmoddi4+0x1d2>
 8001412:	4630      	mov	r0, r6
 8001414:	e7d4      	b.n	80013c0 <__udivmoddi4+0x24c>
 8001416:	46d6      	mov	lr, sl
 8001418:	e77f      	b.n	800131a <__udivmoddi4+0x1a6>
 800141a:	4463      	add	r3, ip
 800141c:	3802      	subs	r0, #2
 800141e:	e74d      	b.n	80012bc <__udivmoddi4+0x148>
 8001420:	4606      	mov	r6, r0
 8001422:	4623      	mov	r3, r4
 8001424:	4608      	mov	r0, r1
 8001426:	e70f      	b.n	8001248 <__udivmoddi4+0xd4>
 8001428:	3e02      	subs	r6, #2
 800142a:	4463      	add	r3, ip
 800142c:	e730      	b.n	8001290 <__udivmoddi4+0x11c>
 800142e:	bf00      	nop

08001430 <__aeabi_idiv0>:
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	0000      	movs	r0, r0
	...

08001438 <GetSensorValAndTransfer>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uartDataBuffer[50];

uint8_t GetSensorValAndTransfer(ADC_HandleTypeDef *hADC, uint32_t StdId)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0aa      	sub	sp, #168	@ 0xa8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	uint32_t RawSensorVal = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	char str[100];
	uint8_t tempVal, LightIntensityVal;
	float alcoholval;
	float ratio=0;
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	float concentration=0;
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	float Rs=0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	CAN_TxHeaderTypeDef SensorMsgTxHeader;
	SensorMsgTxHeader.DLC = 1;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
	SensorMsgTxHeader.RTR = CAN_RTR_DATA;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
	SensorMsgTxHeader.IDE = CAN_ID_STD;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
	SensorMsgTxHeader.StdId = StdId;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	61bb      	str	r3, [r7, #24]
	SensorMsgTxHeader.ExtId = 0x0000;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
	SensorMsgTxHeader.TransmitGlobalTime = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	uint8_t SensorData[8] = {0,0,0,0,0,0,0,0};
 800147a:	4a6f      	ldr	r2, [pc, #444]	@ (8001638 <GetSensorValAndTransfer+0x200>)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001484:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t TxMailBoxUsed;

	HAL_ADC_Start(hADC);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fe71 	bl	8002170 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(hADC, HAL_MAX_DELAY) == HAL_OK)
 800148e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ff70 	bl	8002378 <HAL_ADC_PollForConversion>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 80b5 	bne.w	800160a <GetSensorValAndTransfer+0x1d2>
	{
		RawSensorVal = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		RawSensorVal = HAL_ADC_GetValue(hADC);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fff1 	bl	800248e <HAL_ADC_GetValue>
 80014ac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		HAL_ADC_Stop(hADC);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 ff2f 	bl	8002314 <HAL_ADC_Stop>

		if(SensorMsgTxHeader.StdId == 0x0AB)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2bab      	cmp	r3, #171	@ 0xab
 80014ba:	f000 8094 	beq.w	80015e6 <GetSensorValAndTransfer+0x1ae>
			//sprintf(uartDataBuffer,"tempSensorVal = %d\r\n",tempVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			SensorData[0] = tempVal;
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);*/
		}else if(SensorMsgTxHeader.StdId == 0x0AC)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2bac      	cmp	r3, #172	@ 0xac
 80014c2:	f000 8090 	beq.w	80015e6 <GetSensorValAndTransfer+0x1ae>
			//sprintf(uartDataBuffer,"LightIntensityVal = %d\r\n",LightIntensityVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			SensorData[0] = LightIntensityVal;
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);*/
		}else if(SensorMsgTxHeader.StdId == 0x0AD)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2bad      	cmp	r3, #173	@ 0xad
 80014ca:	f040 808c 	bne.w	80015e6 <GetSensorValAndTransfer+0x1ae>
		{
			//alcoholVal = (RawSensorVal*1000)/4095;
			//sprintf(uartDataBuffer,"alcoholVal = %d\r\n",alcoholVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			                   alcoholval = RawSensorVal * 0.0012207;
 80014ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80014d2:	f7ff f817 	bl	8000504 <__aeabi_ui2d>
 80014d6:	a350      	add	r3, pc, #320	@ (adr r3, 8001618 <GetSensorValAndTransfer+0x1e0>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb5e 	bl	8000ba8 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						        Rs = 1 * ((5 - alcoholval) / alcoholval);
 80014f2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80014f6:	4851      	ldr	r0, [pc, #324]	@ (800163c <GetSensorValAndTransfer+0x204>)
 80014f8:	f7ff fbaa 	bl	8000c50 <__aeabi_fsub>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd62 	bl	8000fcc <__aeabi_fdiv>
 8001508:	4603      	mov	r3, r0
 800150a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
								ratio = Rs / R0;
 800150e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	a342      	add	r3, pc, #264	@ (adr r3, 8001620 <GetSensorValAndTransfer+0x1e8>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f996 	bl	800084c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb3e 	bl	8000ba8 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
								//concentration = A*pow(ratio, -B);
								concentration = (log(ratio)-b)/m;
 8001532:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f005 fda5 	bl	8007090 <log>
 8001546:	a338      	add	r3, pc, #224	@ (adr r3, 8001628 <GetSensorValAndTransfer+0x1f0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fe9c 	bl	8000288 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a335      	add	r3, pc, #212	@ (adr r3, 8001630 <GetSensorValAndTransfer+0x1f8>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f975 	bl	800084c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb1d 	bl	8000ba8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
								concentration = pow(10,concentration);
 8001574:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	492e      	ldr	r1, [pc, #184]	@ (8001640 <GetSensorValAndTransfer+0x208>)
 8001586:	f005 fdb5 	bl	80070f4 <pow>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fb09 	bl	8000ba8 <__aeabi_d2f>
 8001596:	4603      	mov	r3, r0
 8001598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						// converting value from milliVolts to degree Celcius scale factor(10mV per deg. Celcius)
						//val=val/10;
						//sprintf(str, "ADC = %f\r\n", val);
								sprintf(str, "Alcohol conc = %f\r\n", concentration);
 800159c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80015ac:	4925      	ldr	r1, [pc, #148]	@ (8001644 <GetSensorValAndTransfer+0x20c>)
 80015ae:	f003 fc45 	bl	8004e3c <siprintf>
								HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80015b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fe5a 	bl	8000270 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c8:	481f      	ldr	r0, [pc, #124]	@ (8001648 <GetSensorValAndTransfer+0x210>)
 80015ca:	f002 fb5b 	bl	8003c84 <HAL_UART_Transmit>

			SensorData[0] = concentration;
 80015ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015d2:	f7ff fd97 	bl	8001104 <__aeabi_f2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	743b      	strb	r3, [r7, #16]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80015dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e0:	481a      	ldr	r0, [pc, #104]	@ (800164c <GetSensorValAndTransfer+0x214>)
 80015e2:	f001 fe49 	bl	8003278 <HAL_GPIO_TogglePin>
		}

		// add sensor value in available CAN1 TxMailbox for transmission over CAN Bus
		if(HAL_CAN_AddTxMessage(&hcan1, &SensorMsgTxHeader, SensorData, &TxMailBoxUsed) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	f107 0210 	add.w	r2, r7, #16
 80015ee:	f107 0118 	add.w	r1, r7, #24
 80015f2:	4817      	ldr	r0, [pc, #92]	@ (8001650 <GetSensorValAndTransfer+0x218>)
 80015f4:	f001 fab5 	bl	8002b62 <HAL_CAN_AddTxMessage>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <GetSensorValAndTransfer+0x1ca>
			Error_Handler();
 80015fe:	f000 fa71 	bl	8001ae4 <Error_Handler>
		HAL_Delay(1000);
 8001602:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001606:	f000 fd4b 	bl	80020a0 <HAL_Delay>
	}
	return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	37a8      	adds	r7, #168	@ 0xa8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	a501aca8 	.word	0xa501aca8
 800161c:	3f53fffc 	.word	0x3f53fffc
 8001620:	0a3d70a4 	.word	0x0a3d70a4
 8001624:	4005a3d7 	.word	0x4005a3d7
 8001628:	d70a3d71 	.word	0xd70a3d71
 800162c:	3fc570a3 	.word	0x3fc570a3
 8001630:	a469d734 	.word	0xa469d734
 8001634:	bfdaf2a5 	.word	0xbfdaf2a5
 8001638:	080082b4 	.word	0x080082b4
 800163c:	40a00000 	.word	0x40a00000
 8001640:	40240000 	.word	0x40240000
 8001644:	080082a0 	.word	0x080082a0
 8001648:	20000304 	.word	0x20000304
 800164c:	40020c00 	.word	0x40020c00
 8001650:	200002dc 	.word	0x200002dc

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001658:	f000 fcb4 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 f822 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f000 f9e0 	bl	8001a24 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001664:	f000 f97e 	bl	8001964 <MX_CAN1_Init>
  MX_ADC1_Init();
 8001668:	f000 f886 	bl	8001778 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800166c:	f000 f9b0 	bl	80019d0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001670:	f000 f8d4 	bl	800181c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001674:	f000 f924 	bl	80018c0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <main+0x48>)
 800167a:	f001 fa2e 	bl	8002ada <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800167e:	2101      	movs	r1, #1
 8001680:	4806      	ldr	r0, [pc, #24]	@ (800169c <main+0x48>)
 8001682:	f001 fb3d 	bl	8002d00 <HAL_CAN_ActivateNotification>
	  // ADC2 IN0 Channel: LDR Sensor
	  if(GetSensorValAndTransfer(&hadc2, 0x0AC) != HAL_OK)
		  Error_Handler();*/

	  // ADC3 IN1 Channel: MQ3 Alcohol sensor
	  if(GetSensorValAndTransfer(&hadc3, 0x0AD) != HAL_OK)
 8001686:	21ad      	movs	r1, #173	@ 0xad
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <main+0x4c>)
 800168a:	f7ff fed5 	bl	8001438 <GetSensorValAndTransfer>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f8      	beq.n	8001686 <main+0x32>
		  Error_Handler();
 8001694:	f000 fa26 	bl	8001ae4 <Error_Handler>
	  if(GetSensorValAndTransfer(&hadc3, 0x0AD) != HAL_OK)
 8001698:	e7f5      	b.n	8001686 <main+0x32>
 800169a:	bf00      	nop
 800169c:	200002dc 	.word	0x200002dc
 80016a0:	20000294 	.word	0x20000294

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2230      	movs	r2, #48	@ 0x30
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fc25 	bl	8004f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <SystemClock_Config+0xcc>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a27      	ldr	r2, [pc, #156]	@ (8001770 <SystemClock_Config+0xcc>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <SystemClock_Config+0xcc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <SystemClock_Config+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a21      	ldr	r2, [pc, #132]	@ (8001774 <SystemClock_Config+0xd0>)
 80016ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <SystemClock_Config+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001700:	2301      	movs	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	2302      	movs	r3, #2
 800170c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001714:	2304      	movs	r3, #4
 8001716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001718:	2348      	movs	r3, #72	@ 0x48
 800171a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171c:	2302      	movs	r3, #2
 800171e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001720:	2307      	movs	r3, #7
 8001722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	4618      	mov	r0, r3
 800172a:	f001 fdbf 	bl	80032ac <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001734:	f000 f9d6 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
 800173a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2302      	movs	r3, #2
 800173e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2102      	movs	r1, #2
 8001756:	4618      	mov	r0, r3
 8001758:	f002 f820 	bl	800379c <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001762:	f000 f9bf 	bl	8001ae4 <Error_Handler>
  }
}
 8001766:	bf00      	nop
 8001768:	3750      	adds	r7, #80	@ 0x50
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <MX_ADC1_Init+0x98>)
 800178c:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <MX_ADC1_Init+0x9c>)
 800178e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <MX_ADC1_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <MX_ADC1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <MX_ADC1_Init+0xa0>)
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017d8:	f000 fc86 	bl	80020e8 <HAL_ADC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f000 f97f 	bl	8001ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017e6:	2310      	movs	r3, #16
 80017e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	@ (8001810 <MX_ADC1_Init+0x98>)
 80017f8:	f000 fe56 	bl	80024a8 <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001802:	f000 f96f 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000204 	.word	0x20000204
 8001814:	40012000 	.word	0x40012000
 8001818:	0f000001 	.word	0x0f000001

0800181c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800182e:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <MX_ADC2_Init+0x9c>)
 8001832:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185a:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800185c:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <MX_ADC2_Init+0xa0>)
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001868:	2201      	movs	r2, #1
 800186a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_ADC2_Init+0x98>)
 8001876:	2201      	movs	r2, #1
 8001878:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800187a:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800187c:	f000 fc34 	bl	80020e8 <HAL_ADC_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001886:	f000 f92d 	bl	8001ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <MX_ADC2_Init+0x98>)
 800189c:	f000 fe04 	bl	80024a8 <HAL_ADC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018a6:	f000 f91d 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000024c 	.word	0x2000024c
 80018b8:	40012100 	.word	0x40012100
 80018bc:	0f000001 	.word	0x0f000001

080018c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018d4:	4a21      	ldr	r2, [pc, #132]	@ (800195c <MX_ADC3_Init+0x9c>)
 80018d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_ADC3_Init+0x98>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_ADC3_Init+0x98>)
 8001900:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <MX_ADC3_Init+0xa0>)
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_ADC3_Init+0x98>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_ADC3_Init+0x98>)
 800190c:	2201      	movs	r2, #1
 800190e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_ADC3_Init+0x98>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_ADC3_Init+0x98>)
 800191a:	2201      	movs	r2, #1
 800191c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <MX_ADC3_Init+0x98>)
 8001920:	f000 fbe2 	bl	80020e8 <HAL_ADC_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800192a:	f000 f8db 	bl	8001ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800192e:	2301      	movs	r3, #1
 8001930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001932:	2301      	movs	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_ADC3_Init+0x98>)
 8001940:	f000 fdb2 	bl	80024a8 <HAL_ADC_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800194a:	f000 f8cb 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000294 	.word	0x20000294
 800195c:	40012200 	.word	0x40012200
 8001960:	0f000001 	.word	0x0f000001

08001964 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <MX_CAN1_Init+0x64>)
 800196a:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <MX_CAN1_Init+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <MX_CAN1_Init+0x64>)
 8001970:	2212      	movs	r2, #18
 8001972:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_CAN1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_CAN1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_CAN1_Init+0x64>)
 8001982:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001986:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <MX_CAN1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_CAN1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_CAN1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_CAN1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_CAN1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_CAN1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_CAN1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_CAN1_Init+0x64>)
 80019b4:	f000 ff96 	bl	80028e4 <HAL_CAN_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80019be:	f000 f891 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200002dc 	.word	0x200002dc
 80019cc:	40006400 	.word	0x40006400

080019d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f002 f8ec 	bl	8003be4 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f000 f867 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000304 	.word	0x20000304
 8001a20:	40004400 	.word	0x40004400

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a26      	ldr	r2, [pc, #152]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_GPIO_Init+0xb8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <MX_GPIO_Init+0xbc>)
 8001ab2:	f001 fbc9 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ab6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_GPIO_Init+0xbc>)
 8001ad0:	f001 fa20 	bl	8002f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001af0:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <Error_Handler+0x1c>)
 8001af2:	f001 fbc1 	bl	8003278 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001af6:	20c8      	movs	r0, #200	@ 0xc8
 8001af8:	f000 fad2 	bl	80020a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001afc:	bf00      	nop
 8001afe:	e7f5      	b.n	8001aec <Error_Handler+0x8>
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b42:	2007      	movs	r0, #7
 8001b44:	f001 f9b2 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	@ 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <HAL_ADC_MspInit+0x100>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10e      	bne.n	8001b94 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a36      	ldr	r2, [pc, #216]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b92:	e05a      	b.n	8001c4a <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a30      	ldr	r2, [pc, #192]	@ (8001c5c <HAL_ADC_MspInit+0x108>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d128      	bne.n	8001bf0 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	481d      	ldr	r0, [pc, #116]	@ (8001c60 <HAL_ADC_MspInit+0x10c>)
 8001bea:	f001 f993 	bl	8002f14 <HAL_GPIO_Init>
}
 8001bee:	e02c      	b.n	8001c4a <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_ADC_MspInit+0x110>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d127      	bne.n	8001c4a <HAL_ADC_MspInit+0xf6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	4a15      	ldr	r2, [pc, #84]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_ADC_MspInit+0x104>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <HAL_ADC_MspInit+0x10c>)
 8001c46:	f001 f965 	bl	8002f14 <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	3730      	adds	r7, #48	@ 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40012000 	.word	0x40012000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40012100 	.word	0x40012100
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40012200 	.word	0x40012200

08001c68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	@ (8001cec <HAL_CAN_MspInit+0x84>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12c      	bne.n	8001ce4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_CAN_MspInit+0x88>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cd4:	2309      	movs	r3, #9
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_CAN_MspInit+0x8c>)
 8001ce0:	f001 f918 	bl	8002f14 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	@ 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40006400 	.word	0x40006400
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_UART_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d52:	230c      	movs	r3, #12
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_UART_MspInit+0x8c>)
 8001d6e:	f001 f8d1 	bl	8002f14 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <MemManage_Handler+0x4>

08001da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <UsageFault_Handler+0x4>

08001db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd8:	f000 f946 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_kill>:

int _kill(int pid, int sig)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df8:	f003 f8d6 	bl	8004fa8 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2216      	movs	r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_exit>:

void _exit (int status)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffe7 	bl	8001dee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <_exit+0x12>

08001e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e00a      	b.n	8001e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e36:	f3af 8000 	nop.w
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf0      	blt.n	8001e36 <_read+0x12>
  }

  return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e009      	b.n	8001e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf1      	blt.n	8001e70 <_write+0x12>
  }
  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_close>:

int _close(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <_isatty>:

int _isatty(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
	...

08001ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f00:	4a14      	ldr	r2, [pc, #80]	@ (8001f54 <_sbrk+0x5c>)
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <_sbrk+0x60>)
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <_sbrk+0x64>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <_sbrk+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d207      	bcs.n	8001f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f28:	f003 f83e 	bl	8004fa8 <__errno>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f36:	e009      	b.n	8001f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <_sbrk+0x64>)
 8001f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20020000 	.word	0x20020000
 8001f58:	00000400 	.word	0x00000400
 8001f5c:	2000034c 	.word	0x2000034c
 8001f60:	200004a0 	.word	0x200004a0

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f74:	f7ff fff6 	bl	8001f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	@ (8001fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f003 f809 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7ff fb57 	bl	8001654 <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001fb4:	08008688 	.word	0x08008688
  ldr r2, =_sbss
 8001fb8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001fbc:	200004a0 	.word	0x200004a0

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_Init+0x40>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_Init+0x40>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_Init+0x40>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 ff5d 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fd84 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 ff67 	bl	8002efa <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002044:	f000 ff3d 	bl	8002ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000000 	.word	0x20000000
 8002060:	20000008 	.word	0x20000008
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_IncTick+0x1c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_IncTick+0x20>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a03      	ldr	r2, [pc, #12]	@ (8002088 <HAL_IncTick+0x20>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000008 	.word	0x20000008
 8002088:	20000350 	.word	0x20000350

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b02      	ldr	r3, [pc, #8]	@ (800209c <HAL_GetTick+0x10>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000350 	.word	0x20000350

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fff0 	bl	800208c <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffe0 	bl	800208c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008

080020e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e033      	b.n	8002166 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fd24 	bl	8001b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800212e:	f023 0302 	bic.w	r3, r3, #2
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fad6 	bl	80026ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
 8002156:	e001      	b.n	800215c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADC_Start+0x1a>
 8002186:	2302      	movs	r3, #2
 8002188:	e0b2      	b.n	80022f0 <HAL_ADC_Start+0x180>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d018      	beq.n	80021d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021b0:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <HAL_ADC_Start+0x18c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_ADC_Start+0x190>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9a      	lsrs	r2, r3, #18
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021c4:	e002      	b.n	80021cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f9      	bne.n	80021c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d17a      	bne.n	80022d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800220a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800221e:	d106      	bne.n	800222e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	f023 0206 	bic.w	r2, r3, #6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
 800222c:	e002      	b.n	8002234 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HAL_ADC_Start+0x194>)
 800223e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002248:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2b00      	cmp	r3, #0
 8002254:	d12a      	bne.n	80022ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2b      	ldr	r2, [pc, #172]	@ (8002308 <HAL_ADC_Start+0x198>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d015      	beq.n	800228c <HAL_ADC_Start+0x11c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a29      	ldr	r2, [pc, #164]	@ (800230c <HAL_ADC_Start+0x19c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d105      	bne.n	8002276 <HAL_ADC_Start+0x106>
 800226a:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <HAL_ADC_Start+0x194>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <HAL_ADC_Start+0x1a0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d136      	bne.n	80022ee <HAL_ADC_Start+0x17e>
 8002280:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_ADC_Start+0x194>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d130      	bne.n	80022ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d129      	bne.n	80022ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e020      	b.n	80022ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <HAL_ADC_Start+0x198>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11b      	bne.n	80022ee <HAL_ADC_Start+0x17e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d114      	bne.n	80022ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e00b      	b.n	80022ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000
 8002300:	431bde83 	.word	0x431bde83
 8002304:	40012300 	.word	0x40012300
 8002308:	40012000 	.word	0x40012000
 800230c:	40012100 	.word	0x40012100
 8002310:	40012200 	.word	0x40012200

08002314 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Stop+0x16>
 8002326:	2302      	movs	r3, #2
 8002328:	e021      	b.n	800236e <HAL_ADC_Stop+0x5a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002394:	d113      	bne.n	80023be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a4:	d10b      	bne.n	80023be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e063      	b.n	8002486 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023be:	f7ff fe65 	bl	800208c <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023c4:	e021      	b.n	800240a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023cc:	d01d      	beq.n	800240a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_ADC_PollForConversion+0x6c>
 80023d4:	f7ff fe5a 	bl	800208c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d212      	bcs.n	800240a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d00b      	beq.n	800240a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e03d      	b.n	8002486 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d1d6      	bne.n	80023c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0212 	mvn.w	r2, #18
 8002420:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d123      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11f      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e105      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x228>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b09      	cmp	r3, #9
 80024d2:	d925      	bls.n	8002520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	3b1e      	subs	r3, #30
 80024ea:	2207      	movs	r2, #7
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43da      	mvns	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	400a      	ands	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68d9      	ldr	r1, [r3, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	4603      	mov	r3, r0
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4403      	add	r3, r0
 8002512:	3b1e      	subs	r3, #30
 8002514:	409a      	lsls	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e022      	b.n	8002566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	2207      	movs	r2, #7
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	4603      	mov	r3, r0
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4403      	add	r3, r0
 800255c:	409a      	lsls	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b06      	cmp	r3, #6
 800256c:	d824      	bhi.n	80025b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b05      	subs	r3, #5
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b05      	subs	r3, #5
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b6:	e04c      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d824      	bhi.n	800260a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b23      	subs	r3, #35	@ 0x23
 80025d2:	221f      	movs	r2, #31
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	400a      	ands	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b23      	subs	r3, #35	@ 0x23
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
 8002608:	e023      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b41      	subs	r3, #65	@ 0x41
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b41      	subs	r3, #65	@ 0x41
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002652:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <HAL_ADC_ConfigChannel+0x234>)
 8002654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_ADC_ConfigChannel+0x238>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d109      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1cc>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b12      	cmp	r3, #18
 8002666:	d105      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <HAL_ADC_ConfigChannel+0x238>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d123      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x21e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d003      	beq.n	800268e <HAL_ADC_ConfigChannel+0x1e6>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b11      	cmp	r3, #17
 800268c:	d11b      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d111      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_ADC_ConfigChannel+0x23c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a10      	ldr	r2, [pc, #64]	@ (80026e8 <HAL_ADC_ConfigChannel+0x240>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	0c9a      	lsrs	r2, r3, #18
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b8:	e002      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f9      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40012300 	.word	0x40012300
 80026e0:	40012000 	.word	0x40012000
 80026e4:	20000000 	.word	0x20000000
 80026e8:	431bde83 	.word	0x431bde83

080026ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f4:	4b79      	ldr	r3, [pc, #484]	@ (80028dc <ADC_Init+0x1f0>)
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	021a      	lsls	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	4a58      	ldr	r2, [pc, #352]	@ (80028e0 <ADC_Init+0x1f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e00f      	b.n	80027ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0202 	bic.w	r2, r2, #2
 80027f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7e1b      	ldrb	r3, [r3, #24]
 8002804:	005a      	lsls	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002826:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	3b01      	subs	r3, #1
 8002844:	035a      	lsls	r2, r3, #13
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e007      	b.n	8002860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800286e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	3b01      	subs	r3, #1
 800287c:	051a      	lsls	r2, r3, #20
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028a2:	025a      	lsls	r2, r3, #9
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	029a      	lsls	r2, r3, #10
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40012300 	.word	0x40012300
 80028e0:	0f000001 	.word	0x0f000001

080028e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0ed      	b.n	8002ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff f9b0 	bl	8001c68 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002918:	f7ff fbb8 	bl	800208c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800291e:	e012      	b.n	8002946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002920:	f7ff fbb4 	bl	800208c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b0a      	cmp	r3, #10
 800292c:	d90b      	bls.n	8002946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2205      	movs	r2, #5
 800293e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0c5      	b.n	8002ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0e5      	beq.n	8002920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0202 	bic.w	r2, r2, #2
 8002962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002964:	f7ff fb92 	bl	800208c <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800296a:	e012      	b.n	8002992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800296c:	f7ff fb8e 	bl	800208c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b0a      	cmp	r3, #10
 8002978:	d90b      	bls.n	8002992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e09f      	b.n	8002ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e007      	b.n	80029ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7e5b      	ldrb	r3, [r3, #25]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7e9b      	ldrb	r3, [r3, #26]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e007      	b.n	8002a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0220 	bic.w	r2, r2, #32
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7edb      	ldrb	r3, [r3, #27]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d108      	bne.n	8002a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0210 	bic.w	r2, r2, #16
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0210 	orr.w	r2, r2, #16
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7f1b      	ldrb	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e007      	b.n	8002a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0208 	bic.w	r2, r2, #8
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7f5b      	ldrb	r3, [r3, #29]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0204 	orr.w	r2, r2, #4
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e007      	b.n	8002a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12e      	bne.n	8002b4c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b06:	f7ff fac1 	bl	800208c <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b0c:	e012      	b.n	8002b34 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b0e:	f7ff fabd 	bl	800208c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b0a      	cmp	r3, #10
 8002b1a:	d90b      	bls.n	8002b34 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e012      	b.n	8002b5a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e006      	b.n	8002b5a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
  }
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b089      	sub	sp, #36	@ 0x24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d003      	beq.n	8002b8e <HAL_CAN_AddTxMessage+0x2c>
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	f040 80ad 	bne.w	8002ce8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8095 	beq.w	8002cd8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	0e1b      	lsrs	r3, r3, #24
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bd4:	68f9      	ldr	r1, [r7, #12]
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	440b      	add	r3, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e00f      	b.n	8002c06 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bf0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bfa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3318      	adds	r3, #24
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	440b      	add	r3, r1
 8002c04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3318      	adds	r3, #24
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	440b      	add	r3, r1
 8002c16:	3304      	adds	r3, #4
 8002c18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	7d1b      	ldrb	r3, [r3, #20]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d111      	bne.n	8002c46 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3318      	adds	r3, #24
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	440b      	add	r3, r1
 8002c42:	3304      	adds	r3, #4
 8002c44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3307      	adds	r3, #7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	061a      	lsls	r2, r3, #24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3306      	adds	r3, #6
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3305      	adds	r3, #5
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	4313      	orrs	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	3204      	adds	r2, #4
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	4610      	mov	r0, r2
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	ea43 0200 	orr.w	r2, r3, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3303      	adds	r3, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	061a      	lsls	r2, r3, #24
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	ea43 0200 	orr.w	r2, r3, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002cb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3318      	adds	r3, #24
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	4413      	add	r3, r2
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	6811      	ldr	r1, [r2, #0]
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3318      	adds	r3, #24
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	440b      	add	r3, r1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e00e      	b.n	8002cf6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e006      	b.n	8002cf6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <HAL_CAN_ActivateNotification+0x1e>
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d109      	bne.n	8002d32 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6959      	ldr	r1, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e006      	b.n	8002d40 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e8c:	f7ff ff90 	bl	8002db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff49 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff5e 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff90 	bl	8002e04 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5f 	bl	8002db0 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffb0 	bl	8002e68 <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e16b      	b.n	8003208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 815a 	bne.w	8003202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80b4 	beq.w	8003202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b5f      	ldr	r3, [pc, #380]	@ (800321c <HAL_GPIO_Init+0x308>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	4a5e      	ldr	r2, [pc, #376]	@ (800321c <HAL_GPIO_Init+0x308>)
 80030a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030aa:	4b5c      	ldr	r3, [pc, #368]	@ (800321c <HAL_GPIO_Init+0x308>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003220 <HAL_GPIO_Init+0x30c>)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a51      	ldr	r2, [pc, #324]	@ (8003224 <HAL_GPIO_Init+0x310>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02b      	beq.n	800313a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <HAL_GPIO_Init+0x314>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	@ (800322c <HAL_GPIO_Init+0x318>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003230 <HAL_GPIO_Init+0x31c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x21a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003234 <HAL_GPIO_Init+0x320>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x216>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4c      	ldr	r2, [pc, #304]	@ (8003238 <HAL_GPIO_Init+0x324>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x212>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4b      	ldr	r2, [pc, #300]	@ (800323c <HAL_GPIO_Init+0x328>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x20e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4a      	ldr	r2, [pc, #296]	@ (8003240 <HAL_GPIO_Init+0x32c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x20a>
 800311a:	2307      	movs	r3, #7
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x228>
 800311e:	2308      	movs	r3, #8
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x228>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x228>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x228>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4934      	ldr	r1, [pc, #208]	@ (8003220 <HAL_GPIO_Init+0x30c>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_GPIO_Init+0x330>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a31      	ldr	r2, [pc, #196]	@ (8003244 <HAL_GPIO_Init+0x330>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b2f      	ldr	r3, [pc, #188]	@ (8003244 <HAL_GPIO_Init+0x330>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <HAL_GPIO_Init+0x330>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_GPIO_Init+0x330>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003244 <HAL_GPIO_Init+0x330>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_GPIO_Init+0x330>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <HAL_GPIO_Init+0x330>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae90 	bls.w	8002f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40023800 	.word	0x40023800
 8003220:	40013800 	.word	0x40013800
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40021800 	.word	0x40021800
 8003240:	40021c00 	.word	0x40021c00
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
 8003254:	4613      	mov	r3, r2
 8003256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003258:	787b      	ldrb	r3, [r7, #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003264:	e003      	b.n	800326e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	041a      	lsls	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	619a      	str	r2, [r3, #24]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43d9      	mvns	r1, r3
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	400b      	ands	r3, r1
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e267      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d075      	beq.n	80033b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ca:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b85      	ldr	r3, [pc, #532]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b82      	ldr	r3, [pc, #520]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b7e      	ldr	r3, [pc, #504]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x108>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e242      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x74>
 8003312:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b70      	ldr	r3, [pc, #448]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6d      	ldr	r3, [pc, #436]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6c      	ldr	r2, [pc, #432]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003344:	4b69      	ldr	r3, [pc, #420]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b66      	ldr	r3, [pc, #408]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fe92 	bl	800208c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fe8e 	bl	800208c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e207      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xc0>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fe7e 	bl	800208c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fe7a 	bl	800208c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e1f3      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b51      	ldr	r3, [pc, #324]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0xe8>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d063      	beq.n	800348a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033c2:	4b4a      	ldr	r3, [pc, #296]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b44      	ldr	r3, [pc, #272]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1c7      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3b      	ldr	r3, [pc, #236]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4937      	ldr	r1, [pc, #220]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_RCC_OscConfig+0x244>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fe33 	bl	800208c <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe fe2f 	bl	800208c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1a8      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b28      	ldr	r3, [pc, #160]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4925      	ldr	r1, [pc, #148]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_RCC_OscConfig+0x244>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fe12 	bl	800208c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe fe0e 	bl	800208c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e187      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe fdf2 	bl	800208c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe fdee 	bl	800208c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e167      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_OscConfig+0x240>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x200>
 80034ca:	e01b      	b.n	8003504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d2:	f7fe fddb 	bl	800208c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe fdd7 	bl	800208c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e150      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b88      	ldr	r3, [pc, #544]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ea      	bne.n	80034da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b81      	ldr	r3, [pc, #516]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b7d      	ldr	r3, [pc, #500]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a7c      	ldr	r2, [pc, #496]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
 8003532:	4b7a      	ldr	r3, [pc, #488]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b77      	ldr	r3, [pc, #476]	@ (8003720 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b74      	ldr	r3, [pc, #464]	@ (8003720 <HAL_RCC_OscConfig+0x474>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	@ (8003720 <HAL_RCC_OscConfig+0x474>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fd97 	bl	800208c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe fd93 	bl	800208c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e10c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b6a      	ldr	r3, [pc, #424]	@ (8003720 <HAL_RCC_OscConfig+0x474>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ea>
 8003588:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358c:	4a63      	ldr	r2, [pc, #396]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	@ 0x70
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x30c>
 800359e:	4b5f      	ldr	r3, [pc, #380]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	4a5e      	ldr	r2, [pc, #376]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035aa:	4b5c      	ldr	r3, [pc, #368]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a5b      	ldr	r2, [pc, #364]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 80035b8:	4b58      	ldr	r3, [pc, #352]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035bc:	4a57      	ldr	r2, [pc, #348]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c4:	4b55      	ldr	r3, [pc, #340]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c8:	4a54      	ldr	r2, [pc, #336]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fd58 	bl	800208c <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fd54 	bl	800208c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0cb      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	4b49      	ldr	r3, [pc, #292]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x334>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe fd42 	bl	800208c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fd3e 	bl	800208c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0b5      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	4a38      	ldr	r2, [pc, #224]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a1 	beq.w	800378c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364a:	4b34      	ldr	r3, [pc, #208]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d05c      	beq.n	8003710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d141      	bne.n	80036e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fd12 	bl	800208c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fd0e 	bl	800208c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e087      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b27      	ldr	r3, [pc, #156]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	491b      	ldr	r1, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x478>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe fce7 	bl	800208c <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fe fce3 	bl	800208c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e05c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x416>
 80036e0:	e054      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <HAL_RCC_OscConfig+0x478>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fcd0 	bl	800208c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fccc 	bl	800208c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e045      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_RCC_OscConfig+0x470>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
 800370e:	e03d      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e038      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_RCC_OscConfig+0x4ec>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d028      	beq.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d121      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800375e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cc      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b68      	ldr	r3, [pc, #416]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90c      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b65      	ldr	r3, [pc, #404]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b3f      	ldr	r3, [pc, #252]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e067      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b37      	ldr	r3, [pc, #220]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4934      	ldr	r1, [pc, #208]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fe fbfe 	bl	800208c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe fbfa 	bl	800208c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b22      	ldr	r3, [pc, #136]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fb60 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	080082bc 	.word	0x080082bc
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b094      	sub	sp, #80	@ 0x50
 800396e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003980:	4b7c      	ldr	r3, [pc, #496]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d00d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800398c:	2b08      	cmp	r3, #8
 800398e:	f200 80e7 	bhi.w	8003b60 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800399a:	e0e1      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b76      	ldr	r3, [pc, #472]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x210>)
 800399e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039a0:	e0e1      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b76      	ldr	r3, [pc, #472]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x214>)
 80039a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039a6:	e0de      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b72      	ldr	r3, [pc, #456]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b2:	4b70      	ldr	r3, [pc, #448]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d065      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b6d      	ldr	r3, [pc, #436]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	2200      	movs	r2, #0
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ec:	0150      	lsls	r0, r2, #5
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4621      	mov	r1, r4
 80039f4:	1a51      	subs	r1, r2, r1
 80039f6:	6139      	str	r1, [r7, #16]
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	018b      	lsls	r3, r1, #6
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a16:	4651      	mov	r1, sl
 8003a18:	018a      	lsls	r2, r1, #6
 8003a1a:	46d4      	mov	ip, sl
 8003a1c:	ebb2 080c 	subs.w	r8, r2, ip
 8003a20:	4659      	mov	r1, fp
 8003a22:	eb63 0901 	sbc.w	r9, r3, r1
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	eb18 0303 	adds.w	r3, r8, r3
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	462b      	mov	r3, r5
 8003a48:	eb49 0303 	adc.w	r3, r9, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	024b      	lsls	r3, r1, #9
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	4604      	mov	r4, r0
 8003a64:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003a68:	4601      	mov	r1, r0
 8003a6a:	024a      	lsls	r2, r1, #9
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a7c:	f7fd fb62 	bl	8001144 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a88:	e05c      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	4611      	mov	r1, r2
 8003a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	0159      	lsls	r1, r3, #5
 8003ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab6:	0150      	lsls	r0, r2, #5
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	46c4      	mov	ip, r8
 8003abe:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	468c      	mov	ip, r1
 8003ac8:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	00eb      	lsls	r3, r5, #3
 8003af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	4614      	mov	r4, r2
 8003afa:	461d      	mov	r5, r3
 8003afc:	4603      	mov	r3, r0
 8003afe:	18e3      	adds	r3, r4, r3
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	460b      	mov	r3, r1
 8003b04:	eb45 0303 	adc.w	r3, r5, r3
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b16:	4629      	mov	r1, r5
 8003b18:	028b      	lsls	r3, r1, #10
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4604      	mov	r4, r0
 8003b20:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b24:	4601      	mov	r1, r0
 8003b26:	028a      	lsls	r2, r1, #10
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	61fa      	str	r2, [r7, #28]
 8003b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b38:	f7fd fb04 	bl	8001144 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4613      	mov	r3, r2
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x210>)
 8003b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3750      	adds	r7, #80	@ 0x50
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	007a1200 	.word	0x007a1200

08003b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b84:	4b02      	ldr	r3, [pc, #8]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	20000000 	.word	0x20000000

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b98:	f7ff fff2 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0a9b      	lsrs	r3, r3, #10
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	@ (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	080082cc 	.word	0x080082cc

08003bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bc0:	f7ff ffde 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0b5b      	lsrs	r3, r3, #13
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	@ (8003be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	080082cc 	.word	0x080082cc

08003be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e042      	b.n	8003c7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f874 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	@ 0x24
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f971 	bl	8003f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	@ 0x28
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d175      	bne.n	8003d90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_UART_Transmit+0x2c>
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e06e      	b.n	8003d92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2221      	movs	r2, #33	@ 0x21
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc2:	f7fe f9e3 	bl	800208c <HAL_GetTick>
 8003cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cdc:	d108      	bne.n	8003cf0 <HAL_UART_Transmit+0x6c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	e003      	b.n	8003cf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cf8:	e02e      	b.n	8003d58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2180      	movs	r1, #128	@ 0x80
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f848 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03a      	b.n	8003d92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	3302      	adds	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e007      	b.n	8003d4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1cb      	bne.n	8003cfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2140      	movs	r1, #64	@ 0x40
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f814 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e006      	b.n	8003d92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003daa:	e03b      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003db2:	d037      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe f96a 	bl	800208c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	6a3a      	ldr	r2, [r7, #32]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e03a      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b80      	cmp	r3, #128	@ 0x80
 8003de0:	d020      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b40      	cmp	r3, #64	@ 0x40
 8003de6:	d01d      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d116      	bne.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f81d 	bl	8003e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2208      	movs	r2, #8
 8003e16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e00f      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d0b4      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b095      	sub	sp, #84	@ 0x54
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d119      	bne.n	8003ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee4:	61ba      	str	r2, [r7, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f06:	bf00      	nop
 8003f08:	3754      	adds	r7, #84	@ 0x54
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f14:	b0c0      	sub	sp, #256	@ 0x100
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	ea40 0301 	orr.w	r3, r0, r1
 8003f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f68:	f021 010c 	bic.w	r1, r1, #12
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f76:	430b      	orrs	r3, r1
 8003f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8a:	6999      	ldr	r1, [r3, #24]
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	ea40 0301 	orr.w	r3, r0, r1
 8003f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b91      	ldr	r3, [pc, #580]	@ (80041e4 <UART_SetConfig+0x2d4>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d005      	beq.n	8003fb0 <UART_SetConfig+0xa0>
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b8f      	ldr	r3, [pc, #572]	@ (80041e8 <UART_SetConfig+0x2d8>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d104      	bne.n	8003fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7ff fe04 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 8003fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fb8:	e003      	b.n	8003fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fba:	f7ff fdeb 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8003fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fcc:	f040 8110 	bne.w	80041f0 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fea:	415b      	adcs	r3, r3
 8003fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	eb12 0804 	adds.w	r8, r2, r4
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	eb43 0904 	adc.w	r9, r3, r4
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004016:	4690      	mov	r8, r2
 8004018:	4699      	mov	r9, r3
 800401a:	4603      	mov	r3, r0
 800401c:	eb18 0303 	adds.w	r3, r8, r3
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004024:	460b      	mov	r3, r1
 8004026:	eb49 0303 	adc.w	r3, r9, r3
 800402a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800403a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800403e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004042:	460b      	mov	r3, r1
 8004044:	18db      	adds	r3, r3, r3
 8004046:	653b      	str	r3, [r7, #80]	@ 0x50
 8004048:	4613      	mov	r3, r2
 800404a:	eb42 0303 	adc.w	r3, r2, r3
 800404e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004058:	f7fd f874 	bl	8001144 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b62      	ldr	r3, [pc, #392]	@ (80041ec <UART_SetConfig+0x2dc>)
 8004062:	fba3 2302 	umull	r2, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	011c      	lsls	r4, r3, #4
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004074:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004084:	415b      	adcs	r3, r3
 8004086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800408c:	4645      	mov	r5, r8
 800408e:	eb12 0a05 	adds.w	sl, r2, r5
 8004092:	4640      	mov	r0, r8
 8004094:	4649      	mov	r1, r9
 8004096:	460d      	mov	r5, r1
 8004098:	eb43 0b05 	adc.w	fp, r3, r5
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b0:	4692      	mov	sl, r2
 80040b2:	469b      	mov	fp, r3
 80040b4:	4603      	mov	r3, r0
 80040b6:	eb1a 0303 	adds.w	r3, sl, r3
 80040ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040be:	460b      	mov	r3, r1
 80040c0:	eb4b 0303 	adc.w	r3, fp, r3
 80040c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040dc:	460b      	mov	r3, r1
 80040de:	18db      	adds	r3, r3, r3
 80040e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040e2:	4613      	mov	r3, r2
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040f2:	f7fd f827 	bl	8001144 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	4b3b      	ldr	r3, [pc, #236]	@ (80041ec <UART_SetConfig+0x2dc>)
 80040fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2264      	movs	r2, #100	@ 0x64
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	1acb      	subs	r3, r1, r3
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004112:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <UART_SetConfig+0x2dc>)
 8004114:	fba3 2302 	umull	r2, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004120:	441c      	add	r4, r3
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800412c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800413c:	415b      	adcs	r3, r3
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	6339      	str	r1, [r7, #48]	@ 0x30
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4655      	mov	r5, sl
 8004162:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004178:	464b      	mov	r3, r9
 800417a:	460a      	mov	r2, r1
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004190:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004198:	460b      	mov	r3, r1
 800419a:	18db      	adds	r3, r3, r3
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800419e:	4613      	mov	r3, r2
 80041a0:	eb42 0303 	adc.w	r3, r2, r3
 80041a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041ae:	f7fc ffc9 	bl	8001144 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <UART_SetConfig+0x2dc>)
 80041b8:	fba3 1302 	umull	r1, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2164      	movs	r1, #100	@ 0x64
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	3332      	adds	r3, #50	@ 0x32
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <UART_SetConfig+0x2dc>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 0207 	and.w	r2, r3, #7
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4422      	add	r2, r4
 80041de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041e0:	e10a      	b.n	80043f8 <UART_SetConfig+0x4e8>
 80041e2:	bf00      	nop
 80041e4:	40011000 	.word	0x40011000
 80041e8:	40011400 	.word	0x40011400
 80041ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004202:	4642      	mov	r2, r8
 8004204:	464b      	mov	r3, r9
 8004206:	1891      	adds	r1, r2, r2
 8004208:	6239      	str	r1, [r7, #32]
 800420a:	415b      	adcs	r3, r3
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004212:	4641      	mov	r1, r8
 8004214:	1854      	adds	r4, r2, r1
 8004216:	46cc      	mov	ip, r9
 8004218:	eb43 050c 	adc.w	r5, r3, ip
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	00eb      	lsls	r3, r5, #3
 8004226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422a:	00e2      	lsls	r2, r4, #3
 800422c:	4614      	mov	r4, r2
 800422e:	461d      	mov	r5, r3
 8004230:	4640      	mov	r0, r8
 8004232:	4649      	mov	r1, r9
 8004234:	4603      	mov	r3, r0
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800423c:	460b      	mov	r3, r1
 800423e:	eb45 0303 	adc.w	r3, r5, r3
 8004242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004262:	4629      	mov	r1, r5
 8004264:	008b      	lsls	r3, r1, #2
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	4604      	mov	r4, r0
 800426c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004270:	4601      	mov	r1, r0
 8004272:	008a      	lsls	r2, r1, #2
 8004274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004278:	f7fc ff64 	bl	8001144 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4b60      	ldr	r3, [pc, #384]	@ (8004404 <UART_SetConfig+0x4f4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	011c      	lsls	r4, r3, #4
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004294:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004298:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	61b9      	str	r1, [r7, #24]
 80042a4:	415b      	adcs	r3, r3
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6139      	str	r1, [r7, #16]
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4655      	mov	r5, sl
 80042ca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004304:	4649      	mov	r1, r9
 8004306:	008b      	lsls	r3, r1, #2
 8004308:	4645      	mov	r5, r8
 800430a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800430e:	4641      	mov	r1, r8
 8004310:	008a      	lsls	r2, r1, #2
 8004312:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004316:	f7fc ff15 	bl	8001144 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4611      	mov	r1, r2
 8004320:	4b38      	ldr	r3, [pc, #224]	@ (8004404 <UART_SetConfig+0x4f4>)
 8004322:	fba3 2301 	umull	r2, r3, r3, r1
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2264      	movs	r2, #100	@ 0x64
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	1acb      	subs	r3, r1, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	@ 0x32
 8004334:	4a33      	ldr	r2, [pc, #204]	@ (8004404 <UART_SetConfig+0x4f4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	673b      	str	r3, [r7, #112]	@ 0x70
 800434a:	677a      	str	r2, [r7, #116]	@ 0x74
 800434c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	1891      	adds	r1, r2, r2
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	415b      	adcs	r3, r3
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004360:	4641      	mov	r1, r8
 8004362:	1851      	adds	r1, r2, r1
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	4649      	mov	r1, r9
 8004368:	414b      	adcs	r3, r1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004378:	4659      	mov	r1, fp
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4655      	mov	r5, sl
 800437e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004382:	4651      	mov	r1, sl
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4642      	mov	r2, r8
 800438e:	189b      	adds	r3, r3, r2
 8004390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004392:	464b      	mov	r3, r9
 8004394:	460a      	mov	r2, r1
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043b4:	4649      	mov	r1, r9
 80043b6:	008b      	lsls	r3, r1, #2
 80043b8:	4645      	mov	r5, r8
 80043ba:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80043be:	4641      	mov	r1, r8
 80043c0:	008a      	lsls	r2, r1, #2
 80043c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043c6:	f7fc febd 	bl	8001144 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <UART_SetConfig+0x4f4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	@ 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	3332      	adds	r3, #50	@ 0x32
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <UART_SetConfig+0x4f4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4422      	add	r2, r4
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004404:	51eb851f 	.word	0x51eb851f

08004408 <__cvt>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	461d      	mov	r5, r3
 8004412:	4614      	mov	r4, r2
 8004414:	bfbc      	itt	lt
 8004416:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800441a:	4614      	movlt	r4, r2
 800441c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800441e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004420:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004424:	bfb6      	itet	lt
 8004426:	461d      	movlt	r5, r3
 8004428:	2300      	movge	r3, #0
 800442a:	232d      	movlt	r3, #45	@ 0x2d
 800442c:	7013      	strb	r3, [r2, #0]
 800442e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004430:	f023 0820 	bic.w	r8, r3, #32
 8004434:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004438:	d005      	beq.n	8004446 <__cvt+0x3e>
 800443a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800443e:	d100      	bne.n	8004442 <__cvt+0x3a>
 8004440:	3601      	adds	r6, #1
 8004442:	2302      	movs	r3, #2
 8004444:	e000      	b.n	8004448 <__cvt+0x40>
 8004446:	2303      	movs	r3, #3
 8004448:	aa07      	add	r2, sp, #28
 800444a:	9204      	str	r2, [sp, #16]
 800444c:	aa06      	add	r2, sp, #24
 800444e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004452:	e9cd 3600 	strd	r3, r6, [sp]
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	f000 fe5d 	bl	8005118 <_dtoa_r>
 800445e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004462:	4607      	mov	r7, r0
 8004464:	d119      	bne.n	800449a <__cvt+0x92>
 8004466:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004468:	07db      	lsls	r3, r3, #31
 800446a:	d50e      	bpl.n	800448a <__cvt+0x82>
 800446c:	eb00 0906 	add.w	r9, r0, r6
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	4620      	mov	r0, r4
 8004476:	4629      	mov	r1, r5
 8004478:	f7fc fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800447c:	b108      	cbz	r0, 8004482 <__cvt+0x7a>
 800447e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004482:	2230      	movs	r2, #48	@ 0x30
 8004484:	9b07      	ldr	r3, [sp, #28]
 8004486:	454b      	cmp	r3, r9
 8004488:	d31e      	bcc.n	80044c8 <__cvt+0xc0>
 800448a:	9b07      	ldr	r3, [sp, #28]
 800448c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800448e:	1bdb      	subs	r3, r3, r7
 8004490:	4638      	mov	r0, r7
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	b008      	add	sp, #32
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800449e:	eb00 0906 	add.w	r9, r0, r6
 80044a2:	d1e5      	bne.n	8004470 <__cvt+0x68>
 80044a4:	7803      	ldrb	r3, [r0, #0]
 80044a6:	2b30      	cmp	r3, #48	@ 0x30
 80044a8:	d10a      	bne.n	80044c0 <__cvt+0xb8>
 80044aa:	2200      	movs	r2, #0
 80044ac:	2300      	movs	r3, #0
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f7fc fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80044b6:	b918      	cbnz	r0, 80044c0 <__cvt+0xb8>
 80044b8:	f1c6 0601 	rsb	r6, r6, #1
 80044bc:	f8ca 6000 	str.w	r6, [sl]
 80044c0:	f8da 3000 	ldr.w	r3, [sl]
 80044c4:	4499      	add	r9, r3
 80044c6:	e7d3      	b.n	8004470 <__cvt+0x68>
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	9107      	str	r1, [sp, #28]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e7d9      	b.n	8004484 <__cvt+0x7c>

080044d0 <__exponent>:
 80044d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044d2:	2900      	cmp	r1, #0
 80044d4:	bfba      	itte	lt
 80044d6:	4249      	neglt	r1, r1
 80044d8:	232d      	movlt	r3, #45	@ 0x2d
 80044da:	232b      	movge	r3, #43	@ 0x2b
 80044dc:	2909      	cmp	r1, #9
 80044de:	7002      	strb	r2, [r0, #0]
 80044e0:	7043      	strb	r3, [r0, #1]
 80044e2:	dd29      	ble.n	8004538 <__exponent+0x68>
 80044e4:	f10d 0307 	add.w	r3, sp, #7
 80044e8:	461d      	mov	r5, r3
 80044ea:	270a      	movs	r7, #10
 80044ec:	461a      	mov	r2, r3
 80044ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80044f2:	fb07 1416 	mls	r4, r7, r6, r1
 80044f6:	3430      	adds	r4, #48	@ 0x30
 80044f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80044fc:	460c      	mov	r4, r1
 80044fe:	2c63      	cmp	r4, #99	@ 0x63
 8004500:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004504:	4631      	mov	r1, r6
 8004506:	dcf1      	bgt.n	80044ec <__exponent+0x1c>
 8004508:	3130      	adds	r1, #48	@ 0x30
 800450a:	1e94      	subs	r4, r2, #2
 800450c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004510:	1c41      	adds	r1, r0, #1
 8004512:	4623      	mov	r3, r4
 8004514:	42ab      	cmp	r3, r5
 8004516:	d30a      	bcc.n	800452e <__exponent+0x5e>
 8004518:	f10d 0309 	add.w	r3, sp, #9
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	42ac      	cmp	r4, r5
 8004520:	bf88      	it	hi
 8004522:	2300      	movhi	r3, #0
 8004524:	3302      	adds	r3, #2
 8004526:	4403      	add	r3, r0
 8004528:	1a18      	subs	r0, r3, r0
 800452a:	b003      	add	sp, #12
 800452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004532:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004536:	e7ed      	b.n	8004514 <__exponent+0x44>
 8004538:	2330      	movs	r3, #48	@ 0x30
 800453a:	3130      	adds	r1, #48	@ 0x30
 800453c:	7083      	strb	r3, [r0, #2]
 800453e:	70c1      	strb	r1, [r0, #3]
 8004540:	1d03      	adds	r3, r0, #4
 8004542:	e7f1      	b.n	8004528 <__exponent+0x58>

08004544 <_printf_float>:
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	b091      	sub	sp, #68	@ 0x44
 800454a:	460c      	mov	r4, r1
 800454c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004550:	4616      	mov	r6, r2
 8004552:	461f      	mov	r7, r3
 8004554:	4605      	mov	r5, r0
 8004556:	f000 fcdd 	bl	8004f14 <_localeconv_r>
 800455a:	6803      	ldr	r3, [r0, #0]
 800455c:	9308      	str	r3, [sp, #32]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb fe86 	bl	8000270 <strlen>
 8004564:	2300      	movs	r3, #0
 8004566:	930e      	str	r3, [sp, #56]	@ 0x38
 8004568:	f8d8 3000 	ldr.w	r3, [r8]
 800456c:	9009      	str	r0, [sp, #36]	@ 0x24
 800456e:	3307      	adds	r3, #7
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	f103 0208 	add.w	r2, r3, #8
 8004578:	f894 a018 	ldrb.w	sl, [r4, #24]
 800457c:	f8d4 b000 	ldr.w	fp, [r4]
 8004580:	f8c8 2000 	str.w	r2, [r8]
 8004584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004588:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800458c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800458e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004592:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800459a:	4b9d      	ldr	r3, [pc, #628]	@ (8004810 <_printf_float+0x2cc>)
 800459c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045a0:	f7fc fac4 	bl	8000b2c <__aeabi_dcmpun>
 80045a4:	bb70      	cbnz	r0, 8004604 <_printf_float+0xc0>
 80045a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045aa:	4b99      	ldr	r3, [pc, #612]	@ (8004810 <_printf_float+0x2cc>)
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045b0:	f7fc fa9e 	bl	8000af0 <__aeabi_dcmple>
 80045b4:	bb30      	cbnz	r0, 8004604 <_printf_float+0xc0>
 80045b6:	2200      	movs	r2, #0
 80045b8:	2300      	movs	r3, #0
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fc fa8d 	bl	8000adc <__aeabi_dcmplt>
 80045c2:	b110      	cbz	r0, 80045ca <_printf_float+0x86>
 80045c4:	232d      	movs	r3, #45	@ 0x2d
 80045c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ca:	4a92      	ldr	r2, [pc, #584]	@ (8004814 <_printf_float+0x2d0>)
 80045cc:	4b92      	ldr	r3, [pc, #584]	@ (8004818 <_printf_float+0x2d4>)
 80045ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80045d2:	bf94      	ite	ls
 80045d4:	4690      	movls	r8, r2
 80045d6:	4698      	movhi	r8, r3
 80045d8:	2303      	movs	r3, #3
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	f02b 0304 	bic.w	r3, fp, #4
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	f04f 0900 	mov.w	r9, #0
 80045e6:	9700      	str	r7, [sp, #0]
 80045e8:	4633      	mov	r3, r6
 80045ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f9d4 	bl	800499c <_printf_common>
 80045f4:	3001      	adds	r0, #1
 80045f6:	f040 808f 	bne.w	8004718 <_printf_float+0x1d4>
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045fe:	b011      	add	sp, #68	@ 0x44
 8004600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fc fa8e 	bl	8000b2c <__aeabi_dcmpun>
 8004610:	b140      	cbz	r0, 8004624 <_printf_float+0xe0>
 8004612:	464b      	mov	r3, r9
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfbc      	itt	lt
 8004618:	232d      	movlt	r3, #45	@ 0x2d
 800461a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800461e:	4a7f      	ldr	r2, [pc, #508]	@ (800481c <_printf_float+0x2d8>)
 8004620:	4b7f      	ldr	r3, [pc, #508]	@ (8004820 <_printf_float+0x2dc>)
 8004622:	e7d4      	b.n	80045ce <_printf_float+0x8a>
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800462c:	d13f      	bne.n	80046ae <_printf_float+0x16a>
 800462e:	2306      	movs	r3, #6
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004636:	2200      	movs	r2, #0
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	9206      	str	r2, [sp, #24]
 800463c:	aa0e      	add	r2, sp, #56	@ 0x38
 800463e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004642:	aa0d      	add	r2, sp, #52	@ 0x34
 8004644:	9203      	str	r2, [sp, #12]
 8004646:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800464a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800464e:	6863      	ldr	r3, [r4, #4]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4642      	mov	r2, r8
 8004654:	464b      	mov	r3, r9
 8004656:	4628      	mov	r0, r5
 8004658:	910a      	str	r1, [sp, #40]	@ 0x28
 800465a:	f7ff fed5 	bl	8004408 <__cvt>
 800465e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004660:	2947      	cmp	r1, #71	@ 0x47
 8004662:	4680      	mov	r8, r0
 8004664:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004666:	d128      	bne.n	80046ba <_printf_float+0x176>
 8004668:	1cc8      	adds	r0, r1, #3
 800466a:	db02      	blt.n	8004672 <_printf_float+0x12e>
 800466c:	6863      	ldr	r3, [r4, #4]
 800466e:	4299      	cmp	r1, r3
 8004670:	dd40      	ble.n	80046f4 <_printf_float+0x1b0>
 8004672:	f1aa 0a02 	sub.w	sl, sl, #2
 8004676:	fa5f fa8a 	uxtb.w	sl, sl
 800467a:	3901      	subs	r1, #1
 800467c:	4652      	mov	r2, sl
 800467e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004682:	910d      	str	r1, [sp, #52]	@ 0x34
 8004684:	f7ff ff24 	bl	80044d0 <__exponent>
 8004688:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800468a:	1813      	adds	r3, r2, r0
 800468c:	2a01      	cmp	r2, #1
 800468e:	4681      	mov	r9, r0
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	dc02      	bgt.n	800469a <_printf_float+0x156>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	07d2      	lsls	r2, r2, #31
 8004698:	d501      	bpl.n	800469e <_printf_float+0x15a>
 800469a:	3301      	adds	r3, #1
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d09f      	beq.n	80045e6 <_printf_float+0xa2>
 80046a6:	232d      	movs	r3, #45	@ 0x2d
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ac:	e79b      	b.n	80045e6 <_printf_float+0xa2>
 80046ae:	2947      	cmp	r1, #71	@ 0x47
 80046b0:	d1bf      	bne.n	8004632 <_printf_float+0xee>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1bd      	bne.n	8004632 <_printf_float+0xee>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e7ba      	b.n	8004630 <_printf_float+0xec>
 80046ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80046be:	d9dc      	bls.n	800467a <_printf_float+0x136>
 80046c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80046c4:	d118      	bne.n	80046f8 <_printf_float+0x1b4>
 80046c6:	2900      	cmp	r1, #0
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	dd0b      	ble.n	80046e4 <_printf_float+0x1a0>
 80046cc:	6121      	str	r1, [r4, #16]
 80046ce:	b913      	cbnz	r3, 80046d6 <_printf_float+0x192>
 80046d0:	6822      	ldr	r2, [r4, #0]
 80046d2:	07d0      	lsls	r0, r2, #31
 80046d4:	d502      	bpl.n	80046dc <_printf_float+0x198>
 80046d6:	3301      	adds	r3, #1
 80046d8:	440b      	add	r3, r1
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80046de:	f04f 0900 	mov.w	r9, #0
 80046e2:	e7dc      	b.n	800469e <_printf_float+0x15a>
 80046e4:	b913      	cbnz	r3, 80046ec <_printf_float+0x1a8>
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	07d2      	lsls	r2, r2, #31
 80046ea:	d501      	bpl.n	80046f0 <_printf_float+0x1ac>
 80046ec:	3302      	adds	r3, #2
 80046ee:	e7f4      	b.n	80046da <_printf_float+0x196>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e7f2      	b.n	80046da <_printf_float+0x196>
 80046f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80046f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046fa:	4299      	cmp	r1, r3
 80046fc:	db05      	blt.n	800470a <_printf_float+0x1c6>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	6121      	str	r1, [r4, #16]
 8004702:	07d8      	lsls	r0, r3, #31
 8004704:	d5ea      	bpl.n	80046dc <_printf_float+0x198>
 8004706:	1c4b      	adds	r3, r1, #1
 8004708:	e7e7      	b.n	80046da <_printf_float+0x196>
 800470a:	2900      	cmp	r1, #0
 800470c:	bfd4      	ite	le
 800470e:	f1c1 0202 	rsble	r2, r1, #2
 8004712:	2201      	movgt	r2, #1
 8004714:	4413      	add	r3, r2
 8004716:	e7e0      	b.n	80046da <_printf_float+0x196>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	055a      	lsls	r2, r3, #21
 800471c:	d407      	bmi.n	800472e <_printf_float+0x1ea>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	4642      	mov	r2, r8
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	d12b      	bne.n	8004784 <_printf_float+0x240>
 800472c:	e765      	b.n	80045fa <_printf_float+0xb6>
 800472e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004732:	f240 80dd 	bls.w	80048f0 <_printf_float+0x3ac>
 8004736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800473a:	2200      	movs	r2, #0
 800473c:	2300      	movs	r3, #0
 800473e:	f7fc f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004742:	2800      	cmp	r0, #0
 8004744:	d033      	beq.n	80047ae <_printf_float+0x26a>
 8004746:	4a37      	ldr	r2, [pc, #220]	@ (8004824 <_printf_float+0x2e0>)
 8004748:	2301      	movs	r3, #1
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	f43f af52 	beq.w	80045fa <_printf_float+0xb6>
 8004756:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800475a:	4543      	cmp	r3, r8
 800475c:	db02      	blt.n	8004764 <_printf_float+0x220>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	07d8      	lsls	r0, r3, #31
 8004762:	d50f      	bpl.n	8004784 <_printf_float+0x240>
 8004764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	f43f af43 	beq.w	80045fa <_printf_float+0xb6>
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800477c:	f104 0a1a 	add.w	sl, r4, #26
 8004780:	45c8      	cmp	r8, r9
 8004782:	dc09      	bgt.n	8004798 <_printf_float+0x254>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	079b      	lsls	r3, r3, #30
 8004788:	f100 8103 	bmi.w	8004992 <_printf_float+0x44e>
 800478c:	68e0      	ldr	r0, [r4, #12]
 800478e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004790:	4298      	cmp	r0, r3
 8004792:	bfb8      	it	lt
 8004794:	4618      	movlt	r0, r3
 8004796:	e732      	b.n	80045fe <_printf_float+0xba>
 8004798:	2301      	movs	r3, #1
 800479a:	4652      	mov	r2, sl
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	f43f af29 	beq.w	80045fa <_printf_float+0xb6>
 80047a8:	f109 0901 	add.w	r9, r9, #1
 80047ac:	e7e8      	b.n	8004780 <_printf_float+0x23c>
 80047ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc39      	bgt.n	8004828 <_printf_float+0x2e4>
 80047b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <_printf_float+0x2e0>)
 80047b6:	2301      	movs	r3, #1
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f af1b 	beq.w	80045fa <_printf_float+0xb6>
 80047c4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80047c8:	ea59 0303 	orrs.w	r3, r9, r3
 80047cc:	d102      	bne.n	80047d4 <_printf_float+0x290>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07d9      	lsls	r1, r3, #31
 80047d2:	d5d7      	bpl.n	8004784 <_printf_float+0x240>
 80047d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af0b 	beq.w	80045fa <_printf_float+0xb6>
 80047e4:	f04f 0a00 	mov.w	sl, #0
 80047e8:	f104 0b1a 	add.w	fp, r4, #26
 80047ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047ee:	425b      	negs	r3, r3
 80047f0:	4553      	cmp	r3, sl
 80047f2:	dc01      	bgt.n	80047f8 <_printf_float+0x2b4>
 80047f4:	464b      	mov	r3, r9
 80047f6:	e793      	b.n	8004720 <_printf_float+0x1dc>
 80047f8:	2301      	movs	r3, #1
 80047fa:	465a      	mov	r2, fp
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f aef9 	beq.w	80045fa <_printf_float+0xb6>
 8004808:	f10a 0a01 	add.w	sl, sl, #1
 800480c:	e7ee      	b.n	80047ec <_printf_float+0x2a8>
 800480e:	bf00      	nop
 8004810:	7fefffff 	.word	0x7fefffff
 8004814:	080082d4 	.word	0x080082d4
 8004818:	080082d8 	.word	0x080082d8
 800481c:	080082dc 	.word	0x080082dc
 8004820:	080082e0 	.word	0x080082e0
 8004824:	080082e4 	.word	0x080082e4
 8004828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800482a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800482e:	4553      	cmp	r3, sl
 8004830:	bfa8      	it	ge
 8004832:	4653      	movge	r3, sl
 8004834:	2b00      	cmp	r3, #0
 8004836:	4699      	mov	r9, r3
 8004838:	dc36      	bgt.n	80048a8 <_printf_float+0x364>
 800483a:	f04f 0b00 	mov.w	fp, #0
 800483e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004842:	f104 021a 	add.w	r2, r4, #26
 8004846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004848:	930a      	str	r3, [sp, #40]	@ 0x28
 800484a:	eba3 0309 	sub.w	r3, r3, r9
 800484e:	455b      	cmp	r3, fp
 8004850:	dc31      	bgt.n	80048b6 <_printf_float+0x372>
 8004852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004854:	459a      	cmp	sl, r3
 8004856:	dc3a      	bgt.n	80048ce <_printf_float+0x38a>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07da      	lsls	r2, r3, #31
 800485c:	d437      	bmi.n	80048ce <_printf_float+0x38a>
 800485e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004860:	ebaa 0903 	sub.w	r9, sl, r3
 8004864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004866:	ebaa 0303 	sub.w	r3, sl, r3
 800486a:	4599      	cmp	r9, r3
 800486c:	bfa8      	it	ge
 800486e:	4699      	movge	r9, r3
 8004870:	f1b9 0f00 	cmp.w	r9, #0
 8004874:	dc33      	bgt.n	80048de <_printf_float+0x39a>
 8004876:	f04f 0800 	mov.w	r8, #0
 800487a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800487e:	f104 0b1a 	add.w	fp, r4, #26
 8004882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004884:	ebaa 0303 	sub.w	r3, sl, r3
 8004888:	eba3 0309 	sub.w	r3, r3, r9
 800488c:	4543      	cmp	r3, r8
 800488e:	f77f af79 	ble.w	8004784 <_printf_float+0x240>
 8004892:	2301      	movs	r3, #1
 8004894:	465a      	mov	r2, fp
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f aeac 	beq.w	80045fa <_printf_float+0xb6>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	e7ec      	b.n	8004882 <_printf_float+0x33e>
 80048a8:	4642      	mov	r2, r8
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	d1c2      	bne.n	800483a <_printf_float+0x2f6>
 80048b4:	e6a1      	b.n	80045fa <_printf_float+0xb6>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f ae9a 	beq.w	80045fa <_printf_float+0xb6>
 80048c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048c8:	f10b 0b01 	add.w	fp, fp, #1
 80048cc:	e7bb      	b.n	8004846 <_printf_float+0x302>
 80048ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	d1c0      	bne.n	800485e <_printf_float+0x31a>
 80048dc:	e68d      	b.n	80045fa <_printf_float+0xb6>
 80048de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048e0:	464b      	mov	r3, r9
 80048e2:	4442      	add	r2, r8
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	d1c3      	bne.n	8004876 <_printf_float+0x332>
 80048ee:	e684      	b.n	80045fa <_printf_float+0xb6>
 80048f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80048f4:	f1ba 0f01 	cmp.w	sl, #1
 80048f8:	dc01      	bgt.n	80048fe <_printf_float+0x3ba>
 80048fa:	07db      	lsls	r3, r3, #31
 80048fc:	d536      	bpl.n	800496c <_printf_float+0x428>
 80048fe:	2301      	movs	r3, #1
 8004900:	4642      	mov	r2, r8
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f ae76 	beq.w	80045fa <_printf_float+0xb6>
 800490e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	f43f ae6e 	beq.w	80045fa <_printf_float+0xb6>
 800491e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800492a:	f7fc f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800492e:	b9c0      	cbnz	r0, 8004962 <_printf_float+0x41e>
 8004930:	4653      	mov	r3, sl
 8004932:	f108 0201 	add.w	r2, r8, #1
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	d10c      	bne.n	800495a <_printf_float+0x416>
 8004940:	e65b      	b.n	80045fa <_printf_float+0xb6>
 8004942:	2301      	movs	r3, #1
 8004944:	465a      	mov	r2, fp
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f ae54 	beq.w	80045fa <_printf_float+0xb6>
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	45d0      	cmp	r8, sl
 8004958:	dbf3      	blt.n	8004942 <_printf_float+0x3fe>
 800495a:	464b      	mov	r3, r9
 800495c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004960:	e6df      	b.n	8004722 <_printf_float+0x1de>
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	f104 0b1a 	add.w	fp, r4, #26
 800496a:	e7f4      	b.n	8004956 <_printf_float+0x412>
 800496c:	2301      	movs	r3, #1
 800496e:	4642      	mov	r2, r8
 8004970:	e7e1      	b.n	8004936 <_printf_float+0x3f2>
 8004972:	2301      	movs	r3, #1
 8004974:	464a      	mov	r2, r9
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	f43f ae3c 	beq.w	80045fa <_printf_float+0xb6>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800498a:	1a5b      	subs	r3, r3, r1
 800498c:	4543      	cmp	r3, r8
 800498e:	dcf0      	bgt.n	8004972 <_printf_float+0x42e>
 8004990:	e6fc      	b.n	800478c <_printf_float+0x248>
 8004992:	f04f 0800 	mov.w	r8, #0
 8004996:	f104 0919 	add.w	r9, r4, #25
 800499a:	e7f4      	b.n	8004986 <_printf_float+0x442>

0800499c <_printf_common>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	4616      	mov	r6, r2
 80049a2:	4698      	mov	r8, r3
 80049a4:	688a      	ldr	r2, [r1, #8]
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	bfb8      	it	lt
 80049b0:	4613      	movlt	r3, r2
 80049b2:	6033      	str	r3, [r6, #0]
 80049b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049b8:	4607      	mov	r7, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	b10a      	cbz	r2, 80049c2 <_printf_common+0x26>
 80049be:	3301      	adds	r3, #1
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	0699      	lsls	r1, r3, #26
 80049c6:	bf42      	ittt	mi
 80049c8:	6833      	ldrmi	r3, [r6, #0]
 80049ca:	3302      	addmi	r3, #2
 80049cc:	6033      	strmi	r3, [r6, #0]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d106      	bne.n	80049e4 <_printf_common+0x48>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dc26      	bgt.n	8004a32 <_printf_common+0x96>
 80049e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	3b00      	subs	r3, #0
 80049ec:	bf18      	it	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	0692      	lsls	r2, r2, #26
 80049f2:	d42b      	bmi.n	8004a4c <_printf_common+0xb0>
 80049f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049f8:	4641      	mov	r1, r8
 80049fa:	4638      	mov	r0, r7
 80049fc:	47c8      	blx	r9
 80049fe:	3001      	adds	r0, #1
 8004a00:	d01e      	beq.n	8004a40 <_printf_common+0xa4>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf02      	ittt	eq
 8004a0e:	68e5      	ldreq	r5, [r4, #12]
 8004a10:	6833      	ldreq	r3, [r6, #0]
 8004a12:	1aed      	subeq	r5, r5, r3
 8004a14:	68a3      	ldr	r3, [r4, #8]
 8004a16:	bf0c      	ite	eq
 8004a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a1c:	2500      	movne	r5, #0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bfc4      	itt	gt
 8004a22:	1a9b      	subgt	r3, r3, r2
 8004a24:	18ed      	addgt	r5, r5, r3
 8004a26:	2600      	movs	r6, #0
 8004a28:	341a      	adds	r4, #26
 8004a2a:	42b5      	cmp	r5, r6
 8004a2c:	d11a      	bne.n	8004a64 <_printf_common+0xc8>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e008      	b.n	8004a44 <_printf_common+0xa8>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4652      	mov	r2, sl
 8004a36:	4641      	mov	r1, r8
 8004a38:	4638      	mov	r0, r7
 8004a3a:	47c8      	blx	r9
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d103      	bne.n	8004a48 <_printf_common+0xac>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	3501      	adds	r5, #1
 8004a4a:	e7c6      	b.n	80049da <_printf_common+0x3e>
 8004a4c:	18e1      	adds	r1, r4, r3
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	2030      	movs	r0, #48	@ 0x30
 8004a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a56:	4422      	add	r2, r4
 8004a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a60:	3302      	adds	r3, #2
 8004a62:	e7c7      	b.n	80049f4 <_printf_common+0x58>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4622      	mov	r2, r4
 8004a68:	4641      	mov	r1, r8
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	47c8      	blx	r9
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0e6      	beq.n	8004a40 <_printf_common+0xa4>
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7d9      	b.n	8004a2a <_printf_common+0x8e>
	...

08004a78 <_printf_i>:
 8004a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7c:	7e0f      	ldrb	r7, [r1, #24]
 8004a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a80:	2f78      	cmp	r7, #120	@ 0x78
 8004a82:	4691      	mov	r9, r2
 8004a84:	4680      	mov	r8, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a8e:	d807      	bhi.n	8004aa0 <_printf_i+0x28>
 8004a90:	2f62      	cmp	r7, #98	@ 0x62
 8004a92:	d80a      	bhi.n	8004aaa <_printf_i+0x32>
 8004a94:	2f00      	cmp	r7, #0
 8004a96:	f000 80d2 	beq.w	8004c3e <_printf_i+0x1c6>
 8004a9a:	2f58      	cmp	r7, #88	@ 0x58
 8004a9c:	f000 80b9 	beq.w	8004c12 <_printf_i+0x19a>
 8004aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004aa8:	e03a      	b.n	8004b20 <_printf_i+0xa8>
 8004aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004aae:	2b15      	cmp	r3, #21
 8004ab0:	d8f6      	bhi.n	8004aa0 <_printf_i+0x28>
 8004ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ab8 <_printf_i+0x40>)
 8004ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ab8:	08004b11 	.word	0x08004b11
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004aa1 	.word	0x08004aa1
 8004ac4:	08004aa1 	.word	0x08004aa1
 8004ac8:	08004aa1 	.word	0x08004aa1
 8004acc:	08004aa1 	.word	0x08004aa1
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004aa1 	.word	0x08004aa1
 8004ad8:	08004aa1 	.word	0x08004aa1
 8004adc:	08004aa1 	.word	0x08004aa1
 8004ae0:	08004aa1 	.word	0x08004aa1
 8004ae4:	08004c25 	.word	0x08004c25
 8004ae8:	08004b4f 	.word	0x08004b4f
 8004aec:	08004bdf 	.word	0x08004bdf
 8004af0:	08004aa1 	.word	0x08004aa1
 8004af4:	08004aa1 	.word	0x08004aa1
 8004af8:	08004c47 	.word	0x08004c47
 8004afc:	08004aa1 	.word	0x08004aa1
 8004b00:	08004b4f 	.word	0x08004b4f
 8004b04:	08004aa1 	.word	0x08004aa1
 8004b08:	08004aa1 	.word	0x08004aa1
 8004b0c:	08004be7 	.word	0x08004be7
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6032      	str	r2, [r6, #0]
 8004b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b20:	2301      	movs	r3, #1
 8004b22:	e09d      	b.n	8004c60 <_printf_i+0x1e8>
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	6031      	str	r1, [r6, #0]
 8004b2c:	0606      	lsls	r6, r0, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0xbc>
 8004b30:	681d      	ldr	r5, [r3, #0]
 8004b32:	e003      	b.n	8004b3c <_printf_i+0xc4>
 8004b34:	0645      	lsls	r5, r0, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0xb8>
 8004b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	da03      	bge.n	8004b48 <_printf_i+0xd0>
 8004b40:	232d      	movs	r3, #45	@ 0x2d
 8004b42:	426d      	negs	r5, r5
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b48:	4859      	ldr	r0, [pc, #356]	@ (8004cb0 <_printf_i+0x238>)
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	e011      	b.n	8004b72 <_printf_i+0xfa>
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	6833      	ldr	r3, [r6, #0]
 8004b52:	0608      	lsls	r0, r1, #24
 8004b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b58:	d402      	bmi.n	8004b60 <_printf_i+0xe8>
 8004b5a:	0649      	lsls	r1, r1, #25
 8004b5c:	bf48      	it	mi
 8004b5e:	b2ad      	uxthmi	r5, r5
 8004b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b62:	4853      	ldr	r0, [pc, #332]	@ (8004cb0 <_printf_i+0x238>)
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	bf14      	ite	ne
 8004b68:	230a      	movne	r3, #10
 8004b6a:	2308      	moveq	r3, #8
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b72:	6866      	ldr	r6, [r4, #4]
 8004b74:	60a6      	str	r6, [r4, #8]
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	bfa2      	ittt	ge
 8004b7a:	6821      	ldrge	r1, [r4, #0]
 8004b7c:	f021 0104 	bicge.w	r1, r1, #4
 8004b80:	6021      	strge	r1, [r4, #0]
 8004b82:	b90d      	cbnz	r5, 8004b88 <_printf_i+0x110>
 8004b84:	2e00      	cmp	r6, #0
 8004b86:	d04b      	beq.n	8004c20 <_printf_i+0x1a8>
 8004b88:	4616      	mov	r6, r2
 8004b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b92:	5dc7      	ldrb	r7, [r0, r7]
 8004b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b98:	462f      	mov	r7, r5
 8004b9a:	42bb      	cmp	r3, r7
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	d9f4      	bls.n	8004b8a <_printf_i+0x112>
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d10b      	bne.n	8004bbc <_printf_i+0x144>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	07df      	lsls	r7, r3, #31
 8004ba8:	d508      	bpl.n	8004bbc <_printf_i+0x144>
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	6861      	ldr	r1, [r4, #4]
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	bfde      	ittt	le
 8004bb2:	2330      	movle	r3, #48	@ 0x30
 8004bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004bbc:	1b92      	subs	r2, r2, r6
 8004bbe:	6122      	str	r2, [r4, #16]
 8004bc0:	f8cd a000 	str.w	sl, [sp]
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	aa03      	add	r2, sp, #12
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f7ff fee6 	bl	800499c <_printf_common>
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d14a      	bne.n	8004c6a <_printf_i+0x1f2>
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd8:	b004      	add	sp, #16
 8004bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f043 0320 	orr.w	r3, r3, #32
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	4833      	ldr	r0, [pc, #204]	@ (8004cb4 <_printf_i+0x23c>)
 8004be8:	2778      	movs	r7, #120	@ 0x78
 8004bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	6831      	ldr	r1, [r6, #0]
 8004bf2:	061f      	lsls	r7, r3, #24
 8004bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bf8:	d402      	bmi.n	8004c00 <_printf_i+0x188>
 8004bfa:	065f      	lsls	r7, r3, #25
 8004bfc:	bf48      	it	mi
 8004bfe:	b2ad      	uxthmi	r5, r5
 8004c00:	6031      	str	r1, [r6, #0]
 8004c02:	07d9      	lsls	r1, r3, #31
 8004c04:	bf44      	itt	mi
 8004c06:	f043 0320 	orrmi.w	r3, r3, #32
 8004c0a:	6023      	strmi	r3, [r4, #0]
 8004c0c:	b11d      	cbz	r5, 8004c16 <_printf_i+0x19e>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	e7ac      	b.n	8004b6c <_printf_i+0xf4>
 8004c12:	4827      	ldr	r0, [pc, #156]	@ (8004cb0 <_printf_i+0x238>)
 8004c14:	e7e9      	b.n	8004bea <_printf_i+0x172>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f023 0320 	bic.w	r3, r3, #32
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	e7f6      	b.n	8004c0e <_printf_i+0x196>
 8004c20:	4616      	mov	r6, r2
 8004c22:	e7bd      	b.n	8004ba0 <_printf_i+0x128>
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	6961      	ldr	r1, [r4, #20]
 8004c2a:	1d18      	adds	r0, r3, #4
 8004c2c:	6030      	str	r0, [r6, #0]
 8004c2e:	062e      	lsls	r6, r5, #24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	d501      	bpl.n	8004c38 <_printf_i+0x1c0>
 8004c34:	6019      	str	r1, [r3, #0]
 8004c36:	e002      	b.n	8004c3e <_printf_i+0x1c6>
 8004c38:	0668      	lsls	r0, r5, #25
 8004c3a:	d5fb      	bpl.n	8004c34 <_printf_i+0x1bc>
 8004c3c:	8019      	strh	r1, [r3, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	4616      	mov	r6, r2
 8004c44:	e7bc      	b.n	8004bc0 <_printf_i+0x148>
 8004c46:	6833      	ldr	r3, [r6, #0]
 8004c48:	1d1a      	adds	r2, r3, #4
 8004c4a:	6032      	str	r2, [r6, #0]
 8004c4c:	681e      	ldr	r6, [r3, #0]
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	2100      	movs	r1, #0
 8004c52:	4630      	mov	r0, r6
 8004c54:	f7fb fabc 	bl	80001d0 <memchr>
 8004c58:	b108      	cbz	r0, 8004c5e <_printf_i+0x1e6>
 8004c5a:	1b80      	subs	r0, r0, r6
 8004c5c:	6060      	str	r0, [r4, #4]
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	2300      	movs	r3, #0
 8004c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c68:	e7aa      	b.n	8004bc0 <_printf_i+0x148>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	47d0      	blx	sl
 8004c74:	3001      	adds	r0, #1
 8004c76:	d0ad      	beq.n	8004bd4 <_printf_i+0x15c>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	079b      	lsls	r3, r3, #30
 8004c7c:	d413      	bmi.n	8004ca6 <_printf_i+0x22e>
 8004c7e:	68e0      	ldr	r0, [r4, #12]
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	4298      	cmp	r0, r3
 8004c84:	bfb8      	it	lt
 8004c86:	4618      	movlt	r0, r3
 8004c88:	e7a6      	b.n	8004bd8 <_printf_i+0x160>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	47d0      	blx	sl
 8004c94:	3001      	adds	r0, #1
 8004c96:	d09d      	beq.n	8004bd4 <_printf_i+0x15c>
 8004c98:	3501      	adds	r5, #1
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	9903      	ldr	r1, [sp, #12]
 8004c9e:	1a5b      	subs	r3, r3, r1
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dcf2      	bgt.n	8004c8a <_printf_i+0x212>
 8004ca4:	e7eb      	b.n	8004c7e <_printf_i+0x206>
 8004ca6:	2500      	movs	r5, #0
 8004ca8:	f104 0619 	add.w	r6, r4, #25
 8004cac:	e7f5      	b.n	8004c9a <_printf_i+0x222>
 8004cae:	bf00      	nop
 8004cb0:	080082e6 	.word	0x080082e6
 8004cb4:	080082f7 	.word	0x080082f7

08004cb8 <std>:
 8004cb8:	2300      	movs	r3, #0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc6:	6083      	str	r3, [r0, #8]
 8004cc8:	8181      	strh	r1, [r0, #12]
 8004cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ccc:	81c2      	strh	r2, [r0, #14]
 8004cce:	6183      	str	r3, [r0, #24]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	305c      	adds	r0, #92	@ 0x5c
 8004cd6:	f000 f914 	bl	8004f02 <memset>
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <std+0x58>)
 8004cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <std+0x5c>)
 8004ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <std+0x60>)
 8004ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <std+0x64>)
 8004ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <std+0x68>)
 8004cec:	6224      	str	r4, [r4, #32]
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	d006      	beq.n	8004d00 <std+0x48>
 8004cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cf6:	4294      	cmp	r4, r2
 8004cf8:	d002      	beq.n	8004d00 <std+0x48>
 8004cfa:	33d0      	adds	r3, #208	@ 0xd0
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	d105      	bne.n	8004d0c <std+0x54>
 8004d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d08:	f000 b978 	b.w	8004ffc <__retarget_lock_init_recursive>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	08004e7d 	.word	0x08004e7d
 8004d14:	08004e9f 	.word	0x08004e9f
 8004d18:	08004ed7 	.word	0x08004ed7
 8004d1c:	08004efb 	.word	0x08004efb
 8004d20:	20000354 	.word	0x20000354

08004d24 <stdio_exit_handler>:
 8004d24:	4a02      	ldr	r2, [pc, #8]	@ (8004d30 <stdio_exit_handler+0xc>)
 8004d26:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <stdio_exit_handler+0x10>)
 8004d28:	4803      	ldr	r0, [pc, #12]	@ (8004d38 <stdio_exit_handler+0x14>)
 8004d2a:	f000 b869 	b.w	8004e00 <_fwalk_sglue>
 8004d2e:	bf00      	nop
 8004d30:	2000000c 	.word	0x2000000c
 8004d34:	08006959 	.word	0x08006959
 8004d38:	2000001c 	.word	0x2000001c

08004d3c <cleanup_stdio>:
 8004d3c:	6841      	ldr	r1, [r0, #4]
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <cleanup_stdio+0x34>)
 8004d40:	4299      	cmp	r1, r3
 8004d42:	b510      	push	{r4, lr}
 8004d44:	4604      	mov	r4, r0
 8004d46:	d001      	beq.n	8004d4c <cleanup_stdio+0x10>
 8004d48:	f001 fe06 	bl	8006958 <_fflush_r>
 8004d4c:	68a1      	ldr	r1, [r4, #8]
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <cleanup_stdio+0x38>)
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d002      	beq.n	8004d5a <cleanup_stdio+0x1e>
 8004d54:	4620      	mov	r0, r4
 8004d56:	f001 fdff 	bl	8006958 <_fflush_r>
 8004d5a:	68e1      	ldr	r1, [r4, #12]
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <cleanup_stdio+0x3c>)
 8004d5e:	4299      	cmp	r1, r3
 8004d60:	d004      	beq.n	8004d6c <cleanup_stdio+0x30>
 8004d62:	4620      	mov	r0, r4
 8004d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d68:	f001 bdf6 	b.w	8006958 <_fflush_r>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000354 	.word	0x20000354
 8004d74:	200003bc 	.word	0x200003bc
 8004d78:	20000424 	.word	0x20000424

08004d7c <global_stdio_init.part.0>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <global_stdio_init.part.0+0x30>)
 8004d80:	4c0b      	ldr	r4, [pc, #44]	@ (8004db0 <global_stdio_init.part.0+0x34>)
 8004d82:	4a0c      	ldr	r2, [pc, #48]	@ (8004db4 <global_stdio_init.part.0+0x38>)
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	4620      	mov	r0, r4
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	f7ff ff94 	bl	8004cb8 <std>
 8004d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d94:	2201      	movs	r2, #1
 8004d96:	2109      	movs	r1, #9
 8004d98:	f7ff ff8e 	bl	8004cb8 <std>
 8004d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004da0:	2202      	movs	r2, #2
 8004da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da6:	2112      	movs	r1, #18
 8004da8:	f7ff bf86 	b.w	8004cb8 <std>
 8004dac:	2000048c 	.word	0x2000048c
 8004db0:	20000354 	.word	0x20000354
 8004db4:	08004d25 	.word	0x08004d25

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	@ (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b920 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20000495 	.word	0x20000495

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	@ (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b91b 	b.w	8005000 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000495 	.word	0x20000495

08004dd0 <__sinit>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	f7ff fff0 	bl	8004db8 <__sfp_lock_acquire>
 8004dd8:	6a23      	ldr	r3, [r4, #32]
 8004dda:	b11b      	cbz	r3, 8004de4 <__sinit+0x14>
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de0:	f7ff bff0 	b.w	8004dc4 <__sfp_lock_release>
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <__sinit+0x28>)
 8004de6:	6223      	str	r3, [r4, #32]
 8004de8:	4b04      	ldr	r3, [pc, #16]	@ (8004dfc <__sinit+0x2c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f5      	bne.n	8004ddc <__sinit+0xc>
 8004df0:	f7ff ffc4 	bl	8004d7c <global_stdio_init.part.0>
 8004df4:	e7f2      	b.n	8004ddc <__sinit+0xc>
 8004df6:	bf00      	nop
 8004df8:	08004d3d 	.word	0x08004d3d
 8004dfc:	2000048c 	.word	0x2000048c

08004e00 <_fwalk_sglue>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	4607      	mov	r7, r0
 8004e06:	4688      	mov	r8, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e10:	f1b9 0901 	subs.w	r9, r9, #1
 8004e14:	d505      	bpl.n	8004e22 <_fwalk_sglue+0x22>
 8004e16:	6824      	ldr	r4, [r4, #0]
 8004e18:	2c00      	cmp	r4, #0
 8004e1a:	d1f7      	bne.n	8004e0c <_fwalk_sglue+0xc>
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d907      	bls.n	8004e38 <_fwalk_sglue+0x38>
 8004e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	d003      	beq.n	8004e38 <_fwalk_sglue+0x38>
 8004e30:	4629      	mov	r1, r5
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	4306      	orrs	r6, r0
 8004e38:	3568      	adds	r5, #104	@ 0x68
 8004e3a:	e7e9      	b.n	8004e10 <_fwalk_sglue+0x10>

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	@ 0x70
 8004e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	@ (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	@ (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f001 fbfe 	bl	8006660 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	@ 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000018 	.word	0x20000018
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <__sread>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	460c      	mov	r4, r1
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	f000 f86c 	bl	8004f60 <_read_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bfab      	itete	ge
 8004e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e90:	181b      	addge	r3, r3, r0
 8004e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e96:	bfac      	ite	ge
 8004e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e9a:	81a3      	strhlt	r3, [r4, #12]
 8004e9c:	bd10      	pop	{r4, pc}

08004e9e <__swrite>:
 8004e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	898b      	ldrh	r3, [r1, #12]
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4616      	mov	r6, r2
 8004eae:	d505      	bpl.n	8004ebc <__swrite+0x1e>
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f000 f840 	bl	8004f3c <_lseek_r>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	f000 b857 	b.w	8004f84 <_write_r>

08004ed6 <__sseek>:
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	460c      	mov	r4, r1
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 f82d 	bl	8004f3c <_lseek_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	bf15      	itete	ne
 8004ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ef2:	81a3      	strheq	r3, [r4, #12]
 8004ef4:	bf18      	it	ne
 8004ef6:	81a3      	strhne	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__sclose>:
 8004efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efe:	f000 b80d 	b.w	8004f1c <_close_r>

08004f02 <memset>:
 8004f02:	4402      	add	r2, r0
 8004f04:	4603      	mov	r3, r0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d100      	bne.n	8004f0c <memset+0xa>
 8004f0a:	4770      	bx	lr
 8004f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f10:	e7f9      	b.n	8004f06 <memset+0x4>
	...

08004f14 <_localeconv_r>:
 8004f14:	4800      	ldr	r0, [pc, #0]	@ (8004f18 <_localeconv_r+0x4>)
 8004f16:	4770      	bx	lr
 8004f18:	20000158 	.word	0x20000158

08004f1c <_close_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	@ (8004f38 <_close_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc ffb5 	bl	8001e96 <_close>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_close_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_close_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000490 	.word	0x20000490

08004f3c <_lseek_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	@ (8004f5c <_lseek_r+0x20>)
 8004f40:	4604      	mov	r4, r0
 8004f42:	4608      	mov	r0, r1
 8004f44:	4611      	mov	r1, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fc ffc7 	bl	8001ede <_lseek>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_lseek_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_lseek_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000490 	.word	0x20000490

08004f60 <_read_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	@ (8004f80 <_read_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fc ff58 	bl	8001e24 <_read>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_read_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_read_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000490 	.word	0x20000490

08004f84 <_write_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	@ (8004fa4 <_write_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fc ff63 	bl	8001e5e <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_write_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_write_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000490 	.word	0x20000490

08004fa8 <__errno>:
 8004fa8:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <__errno+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000018 	.word	0x20000018

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f003 f95e 	bl	8008288 <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	08008680 	.word	0x08008680
 8004ff0:	08008680 	.word	0x08008680
 8004ff4:	08008680 	.word	0x08008680
 8004ff8:	08008684 	.word	0x08008684

08004ffc <__retarget_lock_init_recursive>:
 8004ffc:	4770      	bx	lr

08004ffe <__retarget_lock_acquire_recursive>:
 8004ffe:	4770      	bx	lr

08005000 <__retarget_lock_release_recursive>:
 8005000:	4770      	bx	lr

08005002 <quorem>:
 8005002:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	6903      	ldr	r3, [r0, #16]
 8005008:	690c      	ldr	r4, [r1, #16]
 800500a:	42a3      	cmp	r3, r4
 800500c:	4607      	mov	r7, r0
 800500e:	db7e      	blt.n	800510e <quorem+0x10c>
 8005010:	3c01      	subs	r4, #1
 8005012:	f101 0814 	add.w	r8, r1, #20
 8005016:	00a3      	lsls	r3, r4, #2
 8005018:	f100 0514 	add.w	r5, r0, #20
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800502c:	3301      	adds	r3, #1
 800502e:	429a      	cmp	r2, r3
 8005030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005034:	fbb2 f6f3 	udiv	r6, r2, r3
 8005038:	d32e      	bcc.n	8005098 <quorem+0x96>
 800503a:	f04f 0a00 	mov.w	sl, #0
 800503e:	46c4      	mov	ip, r8
 8005040:	46ae      	mov	lr, r5
 8005042:	46d3      	mov	fp, sl
 8005044:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005048:	b298      	uxth	r0, r3
 800504a:	fb06 a000 	mla	r0, r6, r0, sl
 800504e:	0c02      	lsrs	r2, r0, #16
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	fb06 2303 	mla	r3, r6, r3, r2
 8005056:	f8de 2000 	ldr.w	r2, [lr]
 800505a:	b280      	uxth	r0, r0
 800505c:	b292      	uxth	r2, r2
 800505e:	1a12      	subs	r2, r2, r0
 8005060:	445a      	add	r2, fp
 8005062:	f8de 0000 	ldr.w	r0, [lr]
 8005066:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800506a:	b29b      	uxth	r3, r3
 800506c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005070:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005074:	b292      	uxth	r2, r2
 8005076:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800507a:	45e1      	cmp	r9, ip
 800507c:	f84e 2b04 	str.w	r2, [lr], #4
 8005080:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005084:	d2de      	bcs.n	8005044 <quorem+0x42>
 8005086:	9b00      	ldr	r3, [sp, #0]
 8005088:	58eb      	ldr	r3, [r5, r3]
 800508a:	b92b      	cbnz	r3, 8005098 <quorem+0x96>
 800508c:	9b01      	ldr	r3, [sp, #4]
 800508e:	3b04      	subs	r3, #4
 8005090:	429d      	cmp	r5, r3
 8005092:	461a      	mov	r2, r3
 8005094:	d32f      	bcc.n	80050f6 <quorem+0xf4>
 8005096:	613c      	str	r4, [r7, #16]
 8005098:	4638      	mov	r0, r7
 800509a:	f001 f97f 	bl	800639c <__mcmp>
 800509e:	2800      	cmp	r0, #0
 80050a0:	db25      	blt.n	80050ee <quorem+0xec>
 80050a2:	4629      	mov	r1, r5
 80050a4:	2000      	movs	r0, #0
 80050a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80050aa:	f8d1 c000 	ldr.w	ip, [r1]
 80050ae:	fa1f fe82 	uxth.w	lr, r2
 80050b2:	fa1f f38c 	uxth.w	r3, ip
 80050b6:	eba3 030e 	sub.w	r3, r3, lr
 80050ba:	4403      	add	r3, r0
 80050bc:	0c12      	lsrs	r2, r2, #16
 80050be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050cc:	45c1      	cmp	r9, r8
 80050ce:	f841 3b04 	str.w	r3, [r1], #4
 80050d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050d6:	d2e6      	bcs.n	80050a6 <quorem+0xa4>
 80050d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050e0:	b922      	cbnz	r2, 80050ec <quorem+0xea>
 80050e2:	3b04      	subs	r3, #4
 80050e4:	429d      	cmp	r5, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	d30b      	bcc.n	8005102 <quorem+0x100>
 80050ea:	613c      	str	r4, [r7, #16]
 80050ec:	3601      	adds	r6, #1
 80050ee:	4630      	mov	r0, r6
 80050f0:	b003      	add	sp, #12
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d1cb      	bne.n	8005096 <quorem+0x94>
 80050fe:	3c01      	subs	r4, #1
 8005100:	e7c6      	b.n	8005090 <quorem+0x8e>
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	3b04      	subs	r3, #4
 8005106:	2a00      	cmp	r2, #0
 8005108:	d1ef      	bne.n	80050ea <quorem+0xe8>
 800510a:	3c01      	subs	r4, #1
 800510c:	e7ea      	b.n	80050e4 <quorem+0xe2>
 800510e:	2000      	movs	r0, #0
 8005110:	e7ee      	b.n	80050f0 <quorem+0xee>
 8005112:	0000      	movs	r0, r0
 8005114:	0000      	movs	r0, r0
	...

08005118 <_dtoa_r>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	69c7      	ldr	r7, [r0, #28]
 800511e:	b097      	sub	sp, #92	@ 0x5c
 8005120:	4614      	mov	r4, r2
 8005122:	461d      	mov	r5, r3
 8005124:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005128:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800512a:	4683      	mov	fp, r0
 800512c:	b97f      	cbnz	r7, 800514e <_dtoa_r+0x36>
 800512e:	2010      	movs	r0, #16
 8005130:	f000 fe04 	bl	8005d3c <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	f8cb 001c 	str.w	r0, [fp, #28]
 800513a:	b920      	cbnz	r0, 8005146 <_dtoa_r+0x2e>
 800513c:	4ba8      	ldr	r3, [pc, #672]	@ (80053e0 <_dtoa_r+0x2c8>)
 800513e:	21ef      	movs	r1, #239	@ 0xef
 8005140:	48a8      	ldr	r0, [pc, #672]	@ (80053e4 <_dtoa_r+0x2cc>)
 8005142:	f001 fc69 	bl	8006a18 <__assert_func>
 8005146:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800514a:	6007      	str	r7, [r0, #0]
 800514c:	60c7      	str	r7, [r0, #12]
 800514e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	b159      	cbz	r1, 800516e <_dtoa_r+0x56>
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	604a      	str	r2, [r1, #4]
 800515a:	2301      	movs	r3, #1
 800515c:	4093      	lsls	r3, r2
 800515e:	608b      	str	r3, [r1, #8]
 8005160:	4658      	mov	r0, fp
 8005162:	f000 fee1 	bl	8005f28 <_Bfree>
 8005166:	f8db 301c 	ldr.w	r3, [fp, #28]
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	1e2b      	subs	r3, r5, #0
 8005170:	bfb9      	ittee	lt
 8005172:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005176:	9303      	strlt	r3, [sp, #12]
 8005178:	2300      	movge	r3, #0
 800517a:	6033      	strge	r3, [r6, #0]
 800517c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005180:	4b99      	ldr	r3, [pc, #612]	@ (80053e8 <_dtoa_r+0x2d0>)
 8005182:	bfbc      	itt	lt
 8005184:	2201      	movlt	r2, #1
 8005186:	6032      	strlt	r2, [r6, #0]
 8005188:	ea33 0308 	bics.w	r3, r3, r8
 800518c:	d112      	bne.n	80051b4 <_dtoa_r+0x9c>
 800518e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005190:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800519a:	4323      	orrs	r3, r4
 800519c:	f000 8551 	beq.w	8005c42 <_dtoa_r+0xb2a>
 80051a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051a2:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80053ec <_dtoa_r+0x2d4>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8553 	beq.w	8005c52 <_dtoa_r+0xb3a>
 80051ac:	f10a 0303 	add.w	r3, sl, #3
 80051b0:	f000 bd4d 	b.w	8005c4e <_dtoa_r+0xb36>
 80051b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80051bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	f7fb fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 80051c8:	4607      	mov	r7, r0
 80051ca:	b158      	cbz	r0, 80051e4 <_dtoa_r+0xcc>
 80051cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80051ce:	2301      	movs	r3, #1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051d4:	b113      	cbz	r3, 80051dc <_dtoa_r+0xc4>
 80051d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <_dtoa_r+0x2d8>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80053f4 <_dtoa_r+0x2dc>
 80051e0:	f000 bd37 	b.w	8005c52 <_dtoa_r+0xb3a>
 80051e4:	ab14      	add	r3, sp, #80	@ 0x50
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	ab15      	add	r3, sp, #84	@ 0x54
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4658      	mov	r0, fp
 80051ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80051f2:	f001 f981 	bl	80064f8 <__d2b>
 80051f6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80051fa:	4681      	mov	r9, r0
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	d076      	beq.n	80052ee <_dtoa_r+0x1d6>
 8005200:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005202:	9712      	str	r7, [sp, #72]	@ 0x48
 8005204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800520c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005218:	4619      	mov	r1, r3
 800521a:	2200      	movs	r2, #0
 800521c:	4b76      	ldr	r3, [pc, #472]	@ (80053f8 <_dtoa_r+0x2e0>)
 800521e:	f7fb f833 	bl	8000288 <__aeabi_dsub>
 8005222:	a369      	add	r3, pc, #420	@ (adr r3, 80053c8 <_dtoa_r+0x2b0>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9e6 	bl	80005f8 <__aeabi_dmul>
 800522c:	a368      	add	r3, pc, #416	@ (adr r3, 80053d0 <_dtoa_r+0x2b8>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f82b 	bl	800028c <__adddf3>
 8005236:	4604      	mov	r4, r0
 8005238:	4630      	mov	r0, r6
 800523a:	460d      	mov	r5, r1
 800523c:	f7fb f972 	bl	8000524 <__aeabi_i2d>
 8005240:	a365      	add	r3, pc, #404	@ (adr r3, 80053d8 <_dtoa_r+0x2c0>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f9d7 	bl	80005f8 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4620      	mov	r0, r4
 8005250:	4629      	mov	r1, r5
 8005252:	f7fb f81b 	bl	800028c <__adddf3>
 8005256:	4604      	mov	r4, r0
 8005258:	460d      	mov	r5, r1
 800525a:	f7fb fc7d 	bl	8000b58 <__aeabi_d2iz>
 800525e:	2200      	movs	r2, #0
 8005260:	4607      	mov	r7, r0
 8005262:	2300      	movs	r3, #0
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb fc38 	bl	8000adc <__aeabi_dcmplt>
 800526c:	b140      	cbz	r0, 8005280 <_dtoa_r+0x168>
 800526e:	4638      	mov	r0, r7
 8005270:	f7fb f958 	bl	8000524 <__aeabi_i2d>
 8005274:	4622      	mov	r2, r4
 8005276:	462b      	mov	r3, r5
 8005278:	f7fb fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800527c:	b900      	cbnz	r0, 8005280 <_dtoa_r+0x168>
 800527e:	3f01      	subs	r7, #1
 8005280:	2f16      	cmp	r7, #22
 8005282:	d852      	bhi.n	800532a <_dtoa_r+0x212>
 8005284:	4b5d      	ldr	r3, [pc, #372]	@ (80053fc <_dtoa_r+0x2e4>)
 8005286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005292:	f7fb fc23 	bl	8000adc <__aeabi_dcmplt>
 8005296:	2800      	cmp	r0, #0
 8005298:	d049      	beq.n	800532e <_dtoa_r+0x216>
 800529a:	3f01      	subs	r7, #1
 800529c:	2300      	movs	r3, #0
 800529e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052a2:	1b9b      	subs	r3, r3, r6
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	bf44      	itt	mi
 80052a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80052ac:	2300      	movmi	r3, #0
 80052ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80052b0:	bf54      	ite	pl
 80052b2:	f04f 0800 	movpl.w	r8, #0
 80052b6:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	db3a      	blt.n	8005332 <_dtoa_r+0x21a>
 80052bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052be:	970e      	str	r7, [sp, #56]	@ 0x38
 80052c0:	443b      	add	r3, r7
 80052c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c4:	2300      	movs	r3, #0
 80052c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d865      	bhi.n	800539a <_dtoa_r+0x282>
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	bfc4      	itt	gt
 80052d2:	3b04      	subgt	r3, #4
 80052d4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80052d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052d8:	f1a3 0302 	sub.w	r3, r3, #2
 80052dc:	bfcc      	ite	gt
 80052de:	2400      	movgt	r4, #0
 80052e0:	2401      	movle	r4, #1
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d864      	bhi.n	80053b0 <_dtoa_r+0x298>
 80052e6:	e8df f003 	tbb	[pc, r3]
 80052ea:	382b      	.short	0x382b
 80052ec:	5636      	.short	0x5636
 80052ee:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80052f2:	441e      	add	r6, r3
 80052f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	bfc1      	itttt	gt
 80052fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005300:	fa08 f803 	lslgt.w	r8, r8, r3
 8005304:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005308:	fa24 f303 	lsrgt.w	r3, r4, r3
 800530c:	bfd6      	itet	le
 800530e:	f1c3 0320 	rsble	r3, r3, #32
 8005312:	ea48 0003 	orrgt.w	r0, r8, r3
 8005316:	fa04 f003 	lslle.w	r0, r4, r3
 800531a:	f7fb f8f3 	bl	8000504 <__aeabi_ui2d>
 800531e:	2201      	movs	r2, #1
 8005320:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005324:	3e01      	subs	r6, #1
 8005326:	9212      	str	r2, [sp, #72]	@ 0x48
 8005328:	e776      	b.n	8005218 <_dtoa_r+0x100>
 800532a:	2301      	movs	r3, #1
 800532c:	e7b7      	b.n	800529e <_dtoa_r+0x186>
 800532e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005330:	e7b6      	b.n	80052a0 <_dtoa_r+0x188>
 8005332:	427b      	negs	r3, r7
 8005334:	930a      	str	r3, [sp, #40]	@ 0x28
 8005336:	2300      	movs	r3, #0
 8005338:	eba8 0807 	sub.w	r8, r8, r7
 800533c:	930e      	str	r3, [sp, #56]	@ 0x38
 800533e:	e7c3      	b.n	80052c8 <_dtoa_r+0x1b0>
 8005340:	2300      	movs	r3, #0
 8005342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005344:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005346:	2b00      	cmp	r3, #0
 8005348:	dc35      	bgt.n	80053b6 <_dtoa_r+0x29e>
 800534a:	2301      	movs	r3, #1
 800534c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005350:	461a      	mov	r2, r3
 8005352:	9221      	str	r2, [sp, #132]	@ 0x84
 8005354:	e00b      	b.n	800536e <_dtoa_r+0x256>
 8005356:	2301      	movs	r3, #1
 8005358:	e7f3      	b.n	8005342 <_dtoa_r+0x22a>
 800535a:	2300      	movs	r3, #0
 800535c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800535e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	9308      	str	r3, [sp, #32]
 8005364:	3301      	adds	r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	bfb8      	it	lt
 800536c:	2301      	movlt	r3, #1
 800536e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005372:	2100      	movs	r1, #0
 8005374:	2204      	movs	r2, #4
 8005376:	f102 0514 	add.w	r5, r2, #20
 800537a:	429d      	cmp	r5, r3
 800537c:	d91f      	bls.n	80053be <_dtoa_r+0x2a6>
 800537e:	6041      	str	r1, [r0, #4]
 8005380:	4658      	mov	r0, fp
 8005382:	f000 fd91 	bl	8005ea8 <_Balloc>
 8005386:	4682      	mov	sl, r0
 8005388:	2800      	cmp	r0, #0
 800538a:	d13b      	bne.n	8005404 <_dtoa_r+0x2ec>
 800538c:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <_dtoa_r+0x2e8>)
 800538e:	4602      	mov	r2, r0
 8005390:	f240 11af 	movw	r1, #431	@ 0x1af
 8005394:	e6d4      	b.n	8005140 <_dtoa_r+0x28>
 8005396:	2301      	movs	r3, #1
 8005398:	e7e0      	b.n	800535c <_dtoa_r+0x244>
 800539a:	2401      	movs	r4, #1
 800539c:	2300      	movs	r3, #0
 800539e:	9320      	str	r3, [sp, #128]	@ 0x80
 80053a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2312      	movs	r3, #18
 80053ae:	e7d0      	b.n	8005352 <_dtoa_r+0x23a>
 80053b0:	2301      	movs	r3, #1
 80053b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053b4:	e7f5      	b.n	80053a2 <_dtoa_r+0x28a>
 80053b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80053bc:	e7d7      	b.n	800536e <_dtoa_r+0x256>
 80053be:	3101      	adds	r1, #1
 80053c0:	0052      	lsls	r2, r2, #1
 80053c2:	e7d8      	b.n	8005376 <_dtoa_r+0x25e>
 80053c4:	f3af 8000 	nop.w
 80053c8:	636f4361 	.word	0x636f4361
 80053cc:	3fd287a7 	.word	0x3fd287a7
 80053d0:	8b60c8b3 	.word	0x8b60c8b3
 80053d4:	3fc68a28 	.word	0x3fc68a28
 80053d8:	509f79fb 	.word	0x509f79fb
 80053dc:	3fd34413 	.word	0x3fd34413
 80053e0:	08008315 	.word	0x08008315
 80053e4:	0800832c 	.word	0x0800832c
 80053e8:	7ff00000 	.word	0x7ff00000
 80053ec:	08008311 	.word	0x08008311
 80053f0:	080082e5 	.word	0x080082e5
 80053f4:	080082e4 	.word	0x080082e4
 80053f8:	3ff80000 	.word	0x3ff80000
 80053fc:	08008428 	.word	0x08008428
 8005400:	08008384 	.word	0x08008384
 8005404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005408:	6018      	str	r0, [r3, #0]
 800540a:	9b07      	ldr	r3, [sp, #28]
 800540c:	2b0e      	cmp	r3, #14
 800540e:	f200 80a4 	bhi.w	800555a <_dtoa_r+0x442>
 8005412:	2c00      	cmp	r4, #0
 8005414:	f000 80a1 	beq.w	800555a <_dtoa_r+0x442>
 8005418:	2f00      	cmp	r7, #0
 800541a:	dd33      	ble.n	8005484 <_dtoa_r+0x36c>
 800541c:	4b86      	ldr	r3, [pc, #536]	@ (8005638 <_dtoa_r+0x520>)
 800541e:	f007 020f 	and.w	r2, r7, #15
 8005422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005426:	e9d3 3400 	ldrd	r3, r4, [r3]
 800542a:	05f8      	lsls	r0, r7, #23
 800542c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005434:	d516      	bpl.n	8005464 <_dtoa_r+0x34c>
 8005436:	4b81      	ldr	r3, [pc, #516]	@ (800563c <_dtoa_r+0x524>)
 8005438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800543c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005440:	f7fb fa04 	bl	800084c <__aeabi_ddiv>
 8005444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005448:	f004 040f 	and.w	r4, r4, #15
 800544c:	2603      	movs	r6, #3
 800544e:	4d7b      	ldr	r5, [pc, #492]	@ (800563c <_dtoa_r+0x524>)
 8005450:	b954      	cbnz	r4, 8005468 <_dtoa_r+0x350>
 8005452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800545a:	f7fb f9f7 	bl	800084c <__aeabi_ddiv>
 800545e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005462:	e028      	b.n	80054b6 <_dtoa_r+0x39e>
 8005464:	2602      	movs	r6, #2
 8005466:	e7f2      	b.n	800544e <_dtoa_r+0x336>
 8005468:	07e1      	lsls	r1, r4, #31
 800546a:	d508      	bpl.n	800547e <_dtoa_r+0x366>
 800546c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005474:	f7fb f8c0 	bl	80005f8 <__aeabi_dmul>
 8005478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800547c:	3601      	adds	r6, #1
 800547e:	1064      	asrs	r4, r4, #1
 8005480:	3508      	adds	r5, #8
 8005482:	e7e5      	b.n	8005450 <_dtoa_r+0x338>
 8005484:	f000 80d2 	beq.w	800562c <_dtoa_r+0x514>
 8005488:	427c      	negs	r4, r7
 800548a:	4b6b      	ldr	r3, [pc, #428]	@ (8005638 <_dtoa_r+0x520>)
 800548c:	4d6b      	ldr	r5, [pc, #428]	@ (800563c <_dtoa_r+0x524>)
 800548e:	f004 020f 	and.w	r2, r4, #15
 8005492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800549e:	f7fb f8ab 	bl	80005f8 <__aeabi_dmul>
 80054a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a6:	1124      	asrs	r4, r4, #4
 80054a8:	2300      	movs	r3, #0
 80054aa:	2602      	movs	r6, #2
 80054ac:	2c00      	cmp	r4, #0
 80054ae:	f040 80b2 	bne.w	8005616 <_dtoa_r+0x4fe>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1d3      	bne.n	800545e <_dtoa_r+0x346>
 80054b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80b7 	beq.w	8005630 <_dtoa_r+0x518>
 80054c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005640 <_dtoa_r+0x528>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	f7fb fb07 	bl	8000adc <__aeabi_dcmplt>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f000 80ae 	beq.w	8005630 <_dtoa_r+0x518>
 80054d4:	9b07      	ldr	r3, [sp, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80aa 	beq.w	8005630 <_dtoa_r+0x518>
 80054dc:	9b08      	ldr	r3, [sp, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	dd37      	ble.n	8005552 <_dtoa_r+0x43a>
 80054e2:	1e7b      	subs	r3, r7, #1
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	4620      	mov	r0, r4
 80054e8:	4b56      	ldr	r3, [pc, #344]	@ (8005644 <_dtoa_r+0x52c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb f883 	bl	80005f8 <__aeabi_dmul>
 80054f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f6:	9c08      	ldr	r4, [sp, #32]
 80054f8:	3601      	adds	r6, #1
 80054fa:	4630      	mov	r0, r6
 80054fc:	f7fb f812 	bl	8000524 <__aeabi_i2d>
 8005500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005504:	f7fb f878 	bl	80005f8 <__aeabi_dmul>
 8005508:	4b4f      	ldr	r3, [pc, #316]	@ (8005648 <_dtoa_r+0x530>)
 800550a:	2200      	movs	r2, #0
 800550c:	f7fa febe 	bl	800028c <__adddf3>
 8005510:	4605      	mov	r5, r0
 8005512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005516:	2c00      	cmp	r4, #0
 8005518:	f040 809a 	bne.w	8005650 <_dtoa_r+0x538>
 800551c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005520:	4b4a      	ldr	r3, [pc, #296]	@ (800564c <_dtoa_r+0x534>)
 8005522:	2200      	movs	r2, #0
 8005524:	f7fa feb0 	bl	8000288 <__aeabi_dsub>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005530:	462a      	mov	r2, r5
 8005532:	4633      	mov	r3, r6
 8005534:	f7fb faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8005538:	2800      	cmp	r0, #0
 800553a:	f040 828e 	bne.w	8005a5a <_dtoa_r+0x942>
 800553e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005542:	462a      	mov	r2, r5
 8005544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005548:	f7fb fac8 	bl	8000adc <__aeabi_dcmplt>
 800554c:	2800      	cmp	r0, #0
 800554e:	f040 8127 	bne.w	80057a0 <_dtoa_r+0x688>
 8005552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800555a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800555c:	2b00      	cmp	r3, #0
 800555e:	f2c0 8163 	blt.w	8005828 <_dtoa_r+0x710>
 8005562:	2f0e      	cmp	r7, #14
 8005564:	f300 8160 	bgt.w	8005828 <_dtoa_r+0x710>
 8005568:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <_dtoa_r+0x520>)
 800556a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800556e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005572:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005578:	2b00      	cmp	r3, #0
 800557a:	da03      	bge.n	8005584 <_dtoa_r+0x46c>
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f340 8100 	ble.w	8005784 <_dtoa_r+0x66c>
 8005584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005588:	4656      	mov	r6, sl
 800558a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800558e:	4620      	mov	r0, r4
 8005590:	4629      	mov	r1, r5
 8005592:	f7fb f95b 	bl	800084c <__aeabi_ddiv>
 8005596:	f7fb fadf 	bl	8000b58 <__aeabi_d2iz>
 800559a:	4680      	mov	r8, r0
 800559c:	f7fa ffc2 	bl	8000524 <__aeabi_i2d>
 80055a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a4:	f7fb f828 	bl	80005f8 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055b4:	f7fa fe68 	bl	8000288 <__aeabi_dsub>
 80055b8:	f806 4b01 	strb.w	r4, [r6], #1
 80055bc:	9d07      	ldr	r5, [sp, #28]
 80055be:	eba6 040a 	sub.w	r4, r6, sl
 80055c2:	42a5      	cmp	r5, r4
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	f040 8116 	bne.w	80057f8 <_dtoa_r+0x6e0>
 80055cc:	f7fa fe5e 	bl	800028c <__adddf3>
 80055d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d4:	4604      	mov	r4, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	f7fb fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f040 80f8 	bne.w	80057d2 <_dtoa_r+0x6ba>
 80055e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fb fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ee:	b118      	cbz	r0, 80055f8 <_dtoa_r+0x4e0>
 80055f0:	f018 0f01 	tst.w	r8, #1
 80055f4:	f040 80ed 	bne.w	80057d2 <_dtoa_r+0x6ba>
 80055f8:	4649      	mov	r1, r9
 80055fa:	4658      	mov	r0, fp
 80055fc:	f000 fc94 	bl	8005f28 <_Bfree>
 8005600:	2300      	movs	r3, #0
 8005602:	7033      	strb	r3, [r6, #0]
 8005604:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005606:	3701      	adds	r7, #1
 8005608:	601f      	str	r7, [r3, #0]
 800560a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8320 	beq.w	8005c52 <_dtoa_r+0xb3a>
 8005612:	601e      	str	r6, [r3, #0]
 8005614:	e31d      	b.n	8005c52 <_dtoa_r+0xb3a>
 8005616:	07e2      	lsls	r2, r4, #31
 8005618:	d505      	bpl.n	8005626 <_dtoa_r+0x50e>
 800561a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800561e:	f7fa ffeb 	bl	80005f8 <__aeabi_dmul>
 8005622:	3601      	adds	r6, #1
 8005624:	2301      	movs	r3, #1
 8005626:	1064      	asrs	r4, r4, #1
 8005628:	3508      	adds	r5, #8
 800562a:	e73f      	b.n	80054ac <_dtoa_r+0x394>
 800562c:	2602      	movs	r6, #2
 800562e:	e742      	b.n	80054b6 <_dtoa_r+0x39e>
 8005630:	9c07      	ldr	r4, [sp, #28]
 8005632:	9704      	str	r7, [sp, #16]
 8005634:	e761      	b.n	80054fa <_dtoa_r+0x3e2>
 8005636:	bf00      	nop
 8005638:	08008428 	.word	0x08008428
 800563c:	08008400 	.word	0x08008400
 8005640:	3ff00000 	.word	0x3ff00000
 8005644:	40240000 	.word	0x40240000
 8005648:	401c0000 	.word	0x401c0000
 800564c:	40140000 	.word	0x40140000
 8005650:	4b70      	ldr	r3, [pc, #448]	@ (8005814 <_dtoa_r+0x6fc>)
 8005652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800565c:	4454      	add	r4, sl
 800565e:	2900      	cmp	r1, #0
 8005660:	d045      	beq.n	80056ee <_dtoa_r+0x5d6>
 8005662:	496d      	ldr	r1, [pc, #436]	@ (8005818 <_dtoa_r+0x700>)
 8005664:	2000      	movs	r0, #0
 8005666:	f7fb f8f1 	bl	800084c <__aeabi_ddiv>
 800566a:	4633      	mov	r3, r6
 800566c:	462a      	mov	r2, r5
 800566e:	f7fa fe0b 	bl	8000288 <__aeabi_dsub>
 8005672:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005676:	4656      	mov	r6, sl
 8005678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800567c:	f7fb fa6c 	bl	8000b58 <__aeabi_d2iz>
 8005680:	4605      	mov	r5, r0
 8005682:	f7fa ff4f 	bl	8000524 <__aeabi_i2d>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800568e:	f7fa fdfb 	bl	8000288 <__aeabi_dsub>
 8005692:	3530      	adds	r5, #48	@ 0x30
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800569c:	f806 5b01 	strb.w	r5, [r6], #1
 80056a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056a4:	f7fb fa1a 	bl	8000adc <__aeabi_dcmplt>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d163      	bne.n	8005774 <_dtoa_r+0x65c>
 80056ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b0:	495a      	ldr	r1, [pc, #360]	@ (800581c <_dtoa_r+0x704>)
 80056b2:	2000      	movs	r0, #0
 80056b4:	f7fa fde8 	bl	8000288 <__aeabi_dsub>
 80056b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056bc:	f7fb fa0e 	bl	8000adc <__aeabi_dcmplt>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f040 8087 	bne.w	80057d4 <_dtoa_r+0x6bc>
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	f43f af43 	beq.w	8005552 <_dtoa_r+0x43a>
 80056cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056d0:	4b53      	ldr	r3, [pc, #332]	@ (8005820 <_dtoa_r+0x708>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	f7fa ff90 	bl	80005f8 <__aeabi_dmul>
 80056d8:	4b51      	ldr	r3, [pc, #324]	@ (8005820 <_dtoa_r+0x708>)
 80056da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056de:	2200      	movs	r2, #0
 80056e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056e4:	f7fa ff88 	bl	80005f8 <__aeabi_dmul>
 80056e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ec:	e7c4      	b.n	8005678 <_dtoa_r+0x560>
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	f7fa ff81 	bl	80005f8 <__aeabi_dmul>
 80056f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80056fc:	4656      	mov	r6, sl
 80056fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005702:	f7fb fa29 	bl	8000b58 <__aeabi_d2iz>
 8005706:	4605      	mov	r5, r0
 8005708:	f7fa ff0c 	bl	8000524 <__aeabi_i2d>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005714:	f7fa fdb8 	bl	8000288 <__aeabi_dsub>
 8005718:	3530      	adds	r5, #48	@ 0x30
 800571a:	f806 5b01 	strb.w	r5, [r6], #1
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	42a6      	cmp	r6, r4
 8005724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	d124      	bne.n	8005778 <_dtoa_r+0x660>
 800572e:	4b3a      	ldr	r3, [pc, #232]	@ (8005818 <_dtoa_r+0x700>)
 8005730:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005734:	f7fa fdaa 	bl	800028c <__adddf3>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005740:	f7fb f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8005744:	2800      	cmp	r0, #0
 8005746:	d145      	bne.n	80057d4 <_dtoa_r+0x6bc>
 8005748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800574c:	4932      	ldr	r1, [pc, #200]	@ (8005818 <_dtoa_r+0x700>)
 800574e:	2000      	movs	r0, #0
 8005750:	f7fa fd9a 	bl	8000288 <__aeabi_dsub>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800575c:	f7fb f9be 	bl	8000adc <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	f43f aef6 	beq.w	8005552 <_dtoa_r+0x43a>
 8005766:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005768:	1e73      	subs	r3, r6, #1
 800576a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800576c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005770:	2b30      	cmp	r3, #48	@ 0x30
 8005772:	d0f8      	beq.n	8005766 <_dtoa_r+0x64e>
 8005774:	9f04      	ldr	r7, [sp, #16]
 8005776:	e73f      	b.n	80055f8 <_dtoa_r+0x4e0>
 8005778:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <_dtoa_r+0x708>)
 800577a:	f7fa ff3d 	bl	80005f8 <__aeabi_dmul>
 800577e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005782:	e7bc      	b.n	80056fe <_dtoa_r+0x5e6>
 8005784:	d10c      	bne.n	80057a0 <_dtoa_r+0x688>
 8005786:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <_dtoa_r+0x70c>)
 8005788:	2200      	movs	r2, #0
 800578a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800578e:	f7fa ff33 	bl	80005f8 <__aeabi_dmul>
 8005792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005796:	f7fb f9b5 	bl	8000b04 <__aeabi_dcmpge>
 800579a:	2800      	cmp	r0, #0
 800579c:	f000 815b 	beq.w	8005a56 <_dtoa_r+0x93e>
 80057a0:	2400      	movs	r4, #0
 80057a2:	4625      	mov	r5, r4
 80057a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057a6:	43db      	mvns	r3, r3
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	4656      	mov	r6, sl
 80057ac:	2700      	movs	r7, #0
 80057ae:	4621      	mov	r1, r4
 80057b0:	4658      	mov	r0, fp
 80057b2:	f000 fbb9 	bl	8005f28 <_Bfree>
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d0dc      	beq.n	8005774 <_dtoa_r+0x65c>
 80057ba:	b12f      	cbz	r7, 80057c8 <_dtoa_r+0x6b0>
 80057bc:	42af      	cmp	r7, r5
 80057be:	d003      	beq.n	80057c8 <_dtoa_r+0x6b0>
 80057c0:	4639      	mov	r1, r7
 80057c2:	4658      	mov	r0, fp
 80057c4:	f000 fbb0 	bl	8005f28 <_Bfree>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4658      	mov	r0, fp
 80057cc:	f000 fbac 	bl	8005f28 <_Bfree>
 80057d0:	e7d0      	b.n	8005774 <_dtoa_r+0x65c>
 80057d2:	9704      	str	r7, [sp, #16]
 80057d4:	4633      	mov	r3, r6
 80057d6:	461e      	mov	r6, r3
 80057d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057dc:	2a39      	cmp	r2, #57	@ 0x39
 80057de:	d107      	bne.n	80057f0 <_dtoa_r+0x6d8>
 80057e0:	459a      	cmp	sl, r3
 80057e2:	d1f8      	bne.n	80057d6 <_dtoa_r+0x6be>
 80057e4:	9a04      	ldr	r2, [sp, #16]
 80057e6:	3201      	adds	r2, #1
 80057e8:	9204      	str	r2, [sp, #16]
 80057ea:	2230      	movs	r2, #48	@ 0x30
 80057ec:	f88a 2000 	strb.w	r2, [sl]
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	3201      	adds	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e7bd      	b.n	8005774 <_dtoa_r+0x65c>
 80057f8:	4b09      	ldr	r3, [pc, #36]	@ (8005820 <_dtoa_r+0x708>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	f7fa fefc 	bl	80005f8 <__aeabi_dmul>
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	f7fb f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800580c:	2800      	cmp	r0, #0
 800580e:	f43f aebc 	beq.w	800558a <_dtoa_r+0x472>
 8005812:	e6f1      	b.n	80055f8 <_dtoa_r+0x4e0>
 8005814:	08008428 	.word	0x08008428
 8005818:	3fe00000 	.word	0x3fe00000
 800581c:	3ff00000 	.word	0x3ff00000
 8005820:	40240000 	.word	0x40240000
 8005824:	40140000 	.word	0x40140000
 8005828:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800582a:	2a00      	cmp	r2, #0
 800582c:	f000 80db 	beq.w	80059e6 <_dtoa_r+0x8ce>
 8005830:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005832:	2a01      	cmp	r2, #1
 8005834:	f300 80bf 	bgt.w	80059b6 <_dtoa_r+0x89e>
 8005838:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800583a:	2a00      	cmp	r2, #0
 800583c:	f000 80b7 	beq.w	80059ae <_dtoa_r+0x896>
 8005840:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005846:	4646      	mov	r6, r8
 8005848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800584a:	2101      	movs	r1, #1
 800584c:	441a      	add	r2, r3
 800584e:	4658      	mov	r0, fp
 8005850:	4498      	add	r8, r3
 8005852:	9209      	str	r2, [sp, #36]	@ 0x24
 8005854:	f000 fc1c 	bl	8006090 <__i2b>
 8005858:	4605      	mov	r5, r0
 800585a:	b15e      	cbz	r6, 8005874 <_dtoa_r+0x75c>
 800585c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	dd08      	ble.n	8005874 <_dtoa_r+0x75c>
 8005862:	42b3      	cmp	r3, r6
 8005864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005866:	bfa8      	it	ge
 8005868:	4633      	movge	r3, r6
 800586a:	eba8 0803 	sub.w	r8, r8, r3
 800586e:	1af6      	subs	r6, r6, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	9309      	str	r3, [sp, #36]	@ 0x24
 8005874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005876:	b1f3      	cbz	r3, 80058b6 <_dtoa_r+0x79e>
 8005878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80b7 	beq.w	80059ee <_dtoa_r+0x8d6>
 8005880:	b18c      	cbz	r4, 80058a6 <_dtoa_r+0x78e>
 8005882:	4629      	mov	r1, r5
 8005884:	4622      	mov	r2, r4
 8005886:	4658      	mov	r0, fp
 8005888:	f000 fcc2 	bl	8006210 <__pow5mult>
 800588c:	464a      	mov	r2, r9
 800588e:	4601      	mov	r1, r0
 8005890:	4605      	mov	r5, r0
 8005892:	4658      	mov	r0, fp
 8005894:	f000 fc12 	bl	80060bc <__multiply>
 8005898:	4649      	mov	r1, r9
 800589a:	9004      	str	r0, [sp, #16]
 800589c:	4658      	mov	r0, fp
 800589e:	f000 fb43 	bl	8005f28 <_Bfree>
 80058a2:	9b04      	ldr	r3, [sp, #16]
 80058a4:	4699      	mov	r9, r3
 80058a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058a8:	1b1a      	subs	r2, r3, r4
 80058aa:	d004      	beq.n	80058b6 <_dtoa_r+0x79e>
 80058ac:	4649      	mov	r1, r9
 80058ae:	4658      	mov	r0, fp
 80058b0:	f000 fcae 	bl	8006210 <__pow5mult>
 80058b4:	4681      	mov	r9, r0
 80058b6:	2101      	movs	r1, #1
 80058b8:	4658      	mov	r0, fp
 80058ba:	f000 fbe9 	bl	8006090 <__i2b>
 80058be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058c0:	4604      	mov	r4, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 81c9 	beq.w	8005c5a <_dtoa_r+0xb42>
 80058c8:	461a      	mov	r2, r3
 80058ca:	4601      	mov	r1, r0
 80058cc:	4658      	mov	r0, fp
 80058ce:	f000 fc9f 	bl	8006210 <__pow5mult>
 80058d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	4604      	mov	r4, r0
 80058d8:	f300 808f 	bgt.w	80059fa <_dtoa_r+0x8e2>
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 8087 	bne.w	80059f2 <_dtoa_r+0x8da>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 8083 	bne.w	80059f6 <_dtoa_r+0x8de>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058f6:	0d1b      	lsrs	r3, r3, #20
 80058f8:	051b      	lsls	r3, r3, #20
 80058fa:	b12b      	cbz	r3, 8005908 <_dtoa_r+0x7f0>
 80058fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fe:	3301      	adds	r3, #1
 8005900:	9309      	str	r3, [sp, #36]	@ 0x24
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	2301      	movs	r3, #1
 8005908:	930a      	str	r3, [sp, #40]	@ 0x28
 800590a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 81aa 	beq.w	8005c66 <_dtoa_r+0xb4e>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005918:	6918      	ldr	r0, [r3, #16]
 800591a:	f000 fb6d 	bl	8005ff8 <__hi0bits>
 800591e:	f1c0 0020 	rsb	r0, r0, #32
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	4418      	add	r0, r3
 8005926:	f010 001f 	ands.w	r0, r0, #31
 800592a:	d071      	beq.n	8005a10 <_dtoa_r+0x8f8>
 800592c:	f1c0 0320 	rsb	r3, r0, #32
 8005930:	2b04      	cmp	r3, #4
 8005932:	dd65      	ble.n	8005a00 <_dtoa_r+0x8e8>
 8005934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005936:	f1c0 001c 	rsb	r0, r0, #28
 800593a:	4403      	add	r3, r0
 800593c:	4480      	add	r8, r0
 800593e:	4406      	add	r6, r0
 8005940:	9309      	str	r3, [sp, #36]	@ 0x24
 8005942:	f1b8 0f00 	cmp.w	r8, #0
 8005946:	dd05      	ble.n	8005954 <_dtoa_r+0x83c>
 8005948:	4649      	mov	r1, r9
 800594a:	4642      	mov	r2, r8
 800594c:	4658      	mov	r0, fp
 800594e:	f000 fcb9 	bl	80062c4 <__lshift>
 8005952:	4681      	mov	r9, r0
 8005954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd05      	ble.n	8005966 <_dtoa_r+0x84e>
 800595a:	4621      	mov	r1, r4
 800595c:	461a      	mov	r2, r3
 800595e:	4658      	mov	r0, fp
 8005960:	f000 fcb0 	bl	80062c4 <__lshift>
 8005964:	4604      	mov	r4, r0
 8005966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d053      	beq.n	8005a14 <_dtoa_r+0x8fc>
 800596c:	4621      	mov	r1, r4
 800596e:	4648      	mov	r0, r9
 8005970:	f000 fd14 	bl	800639c <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	da4d      	bge.n	8005a14 <_dtoa_r+0x8fc>
 8005978:	1e7b      	subs	r3, r7, #1
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	4649      	mov	r1, r9
 800597e:	2300      	movs	r3, #0
 8005980:	220a      	movs	r2, #10
 8005982:	4658      	mov	r0, fp
 8005984:	f000 faf2 	bl	8005f6c <__multadd>
 8005988:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800598a:	4681      	mov	r9, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 816c 	beq.w	8005c6a <_dtoa_r+0xb52>
 8005992:	2300      	movs	r3, #0
 8005994:	4629      	mov	r1, r5
 8005996:	220a      	movs	r2, #10
 8005998:	4658      	mov	r0, fp
 800599a:	f000 fae7 	bl	8005f6c <__multadd>
 800599e:	9b08      	ldr	r3, [sp, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	4605      	mov	r5, r0
 80059a4:	dc61      	bgt.n	8005a6a <_dtoa_r+0x952>
 80059a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	dc3b      	bgt.n	8005a24 <_dtoa_r+0x90c>
 80059ac:	e05d      	b.n	8005a6a <_dtoa_r+0x952>
 80059ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80059b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80059b4:	e746      	b.n	8005844 <_dtoa_r+0x72c>
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	1e5c      	subs	r4, r3, #1
 80059ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059bc:	42a3      	cmp	r3, r4
 80059be:	bfbf      	itttt	lt
 80059c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80059c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80059c4:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80059c6:	1ae3      	sublt	r3, r4, r3
 80059c8:	bfb4      	ite	lt
 80059ca:	18d2      	addlt	r2, r2, r3
 80059cc:	1b1c      	subge	r4, r3, r4
 80059ce:	9b07      	ldr	r3, [sp, #28]
 80059d0:	bfbc      	itt	lt
 80059d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80059d4:	2400      	movlt	r4, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfb5      	itete	lt
 80059da:	eba8 0603 	sublt.w	r6, r8, r3
 80059de:	9b07      	ldrge	r3, [sp, #28]
 80059e0:	2300      	movlt	r3, #0
 80059e2:	4646      	movge	r6, r8
 80059e4:	e730      	b.n	8005848 <_dtoa_r+0x730>
 80059e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059e8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80059ea:	4646      	mov	r6, r8
 80059ec:	e735      	b.n	800585a <_dtoa_r+0x742>
 80059ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059f0:	e75c      	b.n	80058ac <_dtoa_r+0x794>
 80059f2:	2300      	movs	r3, #0
 80059f4:	e788      	b.n	8005908 <_dtoa_r+0x7f0>
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	e786      	b.n	8005908 <_dtoa_r+0x7f0>
 80059fa:	2300      	movs	r3, #0
 80059fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80059fe:	e788      	b.n	8005912 <_dtoa_r+0x7fa>
 8005a00:	d09f      	beq.n	8005942 <_dtoa_r+0x82a>
 8005a02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a04:	331c      	adds	r3, #28
 8005a06:	441a      	add	r2, r3
 8005a08:	4498      	add	r8, r3
 8005a0a:	441e      	add	r6, r3
 8005a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a0e:	e798      	b.n	8005942 <_dtoa_r+0x82a>
 8005a10:	4603      	mov	r3, r0
 8005a12:	e7f6      	b.n	8005a02 <_dtoa_r+0x8ea>
 8005a14:	9b07      	ldr	r3, [sp, #28]
 8005a16:	9704      	str	r7, [sp, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc20      	bgt.n	8005a5e <_dtoa_r+0x946>
 8005a1c:	9308      	str	r3, [sp, #32]
 8005a1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	dd1e      	ble.n	8005a62 <_dtoa_r+0x94a>
 8005a24:	9b08      	ldr	r3, [sp, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f47f aebc 	bne.w	80057a4 <_dtoa_r+0x68c>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	2205      	movs	r2, #5
 8005a30:	4658      	mov	r0, fp
 8005a32:	f000 fa9b 	bl	8005f6c <__multadd>
 8005a36:	4601      	mov	r1, r0
 8005a38:	4604      	mov	r4, r0
 8005a3a:	4648      	mov	r0, r9
 8005a3c:	f000 fcae 	bl	800639c <__mcmp>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f77f aeaf 	ble.w	80057a4 <_dtoa_r+0x68c>
 8005a46:	4656      	mov	r6, sl
 8005a48:	2331      	movs	r3, #49	@ 0x31
 8005a4a:	f806 3b01 	strb.w	r3, [r6], #1
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	e6aa      	b.n	80057ac <_dtoa_r+0x694>
 8005a56:	9c07      	ldr	r4, [sp, #28]
 8005a58:	9704      	str	r7, [sp, #16]
 8005a5a:	4625      	mov	r5, r4
 8005a5c:	e7f3      	b.n	8005a46 <_dtoa_r+0x92e>
 8005a5e:	9b07      	ldr	r3, [sp, #28]
 8005a60:	9308      	str	r3, [sp, #32]
 8005a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8104 	beq.w	8005c72 <_dtoa_r+0xb5a>
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	dd05      	ble.n	8005a7a <_dtoa_r+0x962>
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4632      	mov	r2, r6
 8005a72:	4658      	mov	r0, fp
 8005a74:	f000 fc26 	bl	80062c4 <__lshift>
 8005a78:	4605      	mov	r5, r0
 8005a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d05a      	beq.n	8005b36 <_dtoa_r+0xa1e>
 8005a80:	6869      	ldr	r1, [r5, #4]
 8005a82:	4658      	mov	r0, fp
 8005a84:	f000 fa10 	bl	8005ea8 <_Balloc>
 8005a88:	4606      	mov	r6, r0
 8005a8a:	b928      	cbnz	r0, 8005a98 <_dtoa_r+0x980>
 8005a8c:	4b84      	ldr	r3, [pc, #528]	@ (8005ca0 <_dtoa_r+0xb88>)
 8005a8e:	4602      	mov	r2, r0
 8005a90:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a94:	f7ff bb54 	b.w	8005140 <_dtoa_r+0x28>
 8005a98:	692a      	ldr	r2, [r5, #16]
 8005a9a:	3202      	adds	r2, #2
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	f105 010c 	add.w	r1, r5, #12
 8005aa2:	300c      	adds	r0, #12
 8005aa4:	f000 ffaa 	bl	80069fc <memcpy>
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4658      	mov	r0, fp
 8005aae:	f000 fc09 	bl	80062c4 <__lshift>
 8005ab2:	f10a 0301 	add.w	r3, sl, #1
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	4453      	add	r3, sl
 8005abc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005abe:	9b02      	ldr	r3, [sp, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	462f      	mov	r7, r5
 8005ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ac8:	4605      	mov	r5, r0
 8005aca:	9b07      	ldr	r3, [sp, #28]
 8005acc:	4621      	mov	r1, r4
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	f7ff fa95 	bl	8005002 <quorem>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	9008      	str	r0, [sp, #32]
 8005adc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ae0:	4648      	mov	r0, r9
 8005ae2:	f000 fc5b 	bl	800639c <__mcmp>
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005aea:	4621      	mov	r1, r4
 8005aec:	4658      	mov	r0, fp
 8005aee:	f000 fc71 	bl	80063d4 <__mdiff>
 8005af2:	68c2      	ldr	r2, [r0, #12]
 8005af4:	4606      	mov	r6, r0
 8005af6:	bb02      	cbnz	r2, 8005b3a <_dtoa_r+0xa22>
 8005af8:	4601      	mov	r1, r0
 8005afa:	4648      	mov	r0, r9
 8005afc:	f000 fc4e 	bl	800639c <__mcmp>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4631      	mov	r1, r6
 8005b04:	4658      	mov	r0, fp
 8005b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b08:	f000 fa0e 	bl	8005f28 <_Bfree>
 8005b0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b10:	9e07      	ldr	r6, [sp, #28]
 8005b12:	ea43 0102 	orr.w	r1, r3, r2
 8005b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b18:	4319      	orrs	r1, r3
 8005b1a:	d110      	bne.n	8005b3e <_dtoa_r+0xa26>
 8005b1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b20:	d029      	beq.n	8005b76 <_dtoa_r+0xa5e>
 8005b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dd02      	ble.n	8005b2e <_dtoa_r+0xa16>
 8005b28:	9b08      	ldr	r3, [sp, #32]
 8005b2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	f883 8000 	strb.w	r8, [r3]
 8005b34:	e63b      	b.n	80057ae <_dtoa_r+0x696>
 8005b36:	4628      	mov	r0, r5
 8005b38:	e7bb      	b.n	8005ab2 <_dtoa_r+0x99a>
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	e7e1      	b.n	8005b02 <_dtoa_r+0x9ea>
 8005b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db04      	blt.n	8005b4e <_dtoa_r+0xa36>
 8005b44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005b46:	430b      	orrs	r3, r1
 8005b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	d120      	bne.n	8005b90 <_dtoa_r+0xa78>
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	dded      	ble.n	8005b2e <_dtoa_r+0xa16>
 8005b52:	4649      	mov	r1, r9
 8005b54:	2201      	movs	r2, #1
 8005b56:	4658      	mov	r0, fp
 8005b58:	f000 fbb4 	bl	80062c4 <__lshift>
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4681      	mov	r9, r0
 8005b60:	f000 fc1c 	bl	800639c <__mcmp>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	dc03      	bgt.n	8005b70 <_dtoa_r+0xa58>
 8005b68:	d1e1      	bne.n	8005b2e <_dtoa_r+0xa16>
 8005b6a:	f018 0f01 	tst.w	r8, #1
 8005b6e:	d0de      	beq.n	8005b2e <_dtoa_r+0xa16>
 8005b70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b74:	d1d8      	bne.n	8005b28 <_dtoa_r+0xa10>
 8005b76:	9a02      	ldr	r2, [sp, #8]
 8005b78:	2339      	movs	r3, #57	@ 0x39
 8005b7a:	7013      	strb	r3, [r2, #0]
 8005b7c:	4633      	mov	r3, r6
 8005b7e:	461e      	mov	r6, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b86:	2a39      	cmp	r2, #57	@ 0x39
 8005b88:	d052      	beq.n	8005c30 <_dtoa_r+0xb18>
 8005b8a:	3201      	adds	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e60e      	b.n	80057ae <_dtoa_r+0x696>
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	dd07      	ble.n	8005ba4 <_dtoa_r+0xa8c>
 8005b94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b98:	d0ed      	beq.n	8005b76 <_dtoa_r+0xa5e>
 8005b9a:	9a02      	ldr	r2, [sp, #8]
 8005b9c:	f108 0301 	add.w	r3, r8, #1
 8005ba0:	7013      	strb	r3, [r2, #0]
 8005ba2:	e604      	b.n	80057ae <_dtoa_r+0x696>
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	9a07      	ldr	r2, [sp, #28]
 8005ba8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d028      	beq.n	8005c04 <_dtoa_r+0xaec>
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4658      	mov	r0, fp
 8005bba:	f000 f9d7 	bl	8005f6c <__multadd>
 8005bbe:	42af      	cmp	r7, r5
 8005bc0:	4681      	mov	r9, r0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f04f 020a 	mov.w	r2, #10
 8005bca:	4639      	mov	r1, r7
 8005bcc:	4658      	mov	r0, fp
 8005bce:	d107      	bne.n	8005be0 <_dtoa_r+0xac8>
 8005bd0:	f000 f9cc 	bl	8005f6c <__multadd>
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	e774      	b.n	8005aca <_dtoa_r+0x9b2>
 8005be0:	f000 f9c4 	bl	8005f6c <__multadd>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4607      	mov	r7, r0
 8005be8:	2300      	movs	r3, #0
 8005bea:	220a      	movs	r2, #10
 8005bec:	4658      	mov	r0, fp
 8005bee:	f000 f9bd 	bl	8005f6c <__multadd>
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	e7f0      	b.n	8005bd8 <_dtoa_r+0xac0>
 8005bf6:	9b08      	ldr	r3, [sp, #32]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bfcc      	ite	gt
 8005bfc:	461e      	movgt	r6, r3
 8005bfe:	2601      	movle	r6, #1
 8005c00:	4456      	add	r6, sl
 8005c02:	2700      	movs	r7, #0
 8005c04:	4649      	mov	r1, r9
 8005c06:	2201      	movs	r2, #1
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fb5b 	bl	80062c4 <__lshift>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4681      	mov	r9, r0
 8005c12:	f000 fbc3 	bl	800639c <__mcmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	dcb0      	bgt.n	8005b7c <_dtoa_r+0xa64>
 8005c1a:	d102      	bne.n	8005c22 <_dtoa_r+0xb0a>
 8005c1c:	f018 0f01 	tst.w	r8, #1
 8005c20:	d1ac      	bne.n	8005b7c <_dtoa_r+0xa64>
 8005c22:	4633      	mov	r3, r6
 8005c24:	461e      	mov	r6, r3
 8005c26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c2a:	2a30      	cmp	r2, #48	@ 0x30
 8005c2c:	d0fa      	beq.n	8005c24 <_dtoa_r+0xb0c>
 8005c2e:	e5be      	b.n	80057ae <_dtoa_r+0x696>
 8005c30:	459a      	cmp	sl, r3
 8005c32:	d1a4      	bne.n	8005b7e <_dtoa_r+0xa66>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	3301      	adds	r3, #1
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	2331      	movs	r3, #49	@ 0x31
 8005c3c:	f88a 3000 	strb.w	r3, [sl]
 8005c40:	e5b5      	b.n	80057ae <_dtoa_r+0x696>
 8005c42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ca4 <_dtoa_r+0xb8c>
 8005c48:	b11b      	cbz	r3, 8005c52 <_dtoa_r+0xb3a>
 8005c4a:	f10a 0308 	add.w	r3, sl, #8
 8005c4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4650      	mov	r0, sl
 8005c54:	b017      	add	sp, #92	@ 0x5c
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f77f ae3d 	ble.w	80058dc <_dtoa_r+0x7c4>
 8005c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c66:	2001      	movs	r0, #1
 8005c68:	e65b      	b.n	8005922 <_dtoa_r+0x80a>
 8005c6a:	9b08      	ldr	r3, [sp, #32]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f77f aed6 	ble.w	8005a1e <_dtoa_r+0x906>
 8005c72:	4656      	mov	r6, sl
 8005c74:	4621      	mov	r1, r4
 8005c76:	4648      	mov	r0, r9
 8005c78:	f7ff f9c3 	bl	8005002 <quorem>
 8005c7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c80:	f806 8b01 	strb.w	r8, [r6], #1
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	eba6 020a 	sub.w	r2, r6, sl
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	ddb3      	ble.n	8005bf6 <_dtoa_r+0xade>
 8005c8e:	4649      	mov	r1, r9
 8005c90:	2300      	movs	r3, #0
 8005c92:	220a      	movs	r2, #10
 8005c94:	4658      	mov	r0, fp
 8005c96:	f000 f969 	bl	8005f6c <__multadd>
 8005c9a:	4681      	mov	r9, r0
 8005c9c:	e7ea      	b.n	8005c74 <_dtoa_r+0xb5c>
 8005c9e:	bf00      	nop
 8005ca0:	08008384 	.word	0x08008384
 8005ca4:	08008308 	.word	0x08008308

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d041      	beq.n	8005d34 <_free_r+0x8c>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 f8e8 	bl	8005e90 <__malloc_lock>
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <_free_r+0x90>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_free_r+0x2c>
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	4628      	mov	r0, r5
 8005ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd0:	f000 b8e4 	b.w	8005e9c <__malloc_unlock>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x42>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	1821      	adds	r1, r4, r0
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf01      	itttt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	1809      	addeq	r1, r1, r0
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	e7ed      	b.n	8005cc6 <_free_r+0x1e>
 8005cea:	461a      	mov	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b10b      	cbz	r3, 8005cf4 <_free_r+0x4c>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d9fa      	bls.n	8005cea <_free_r+0x42>
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	1850      	adds	r0, r2, r1
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d10b      	bne.n	8005d14 <_free_r+0x6c>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	4401      	add	r1, r0
 8005d00:	1850      	adds	r0, r2, r1
 8005d02:	4283      	cmp	r3, r0
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	d1e0      	bne.n	8005cca <_free_r+0x22>
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	4408      	add	r0, r1
 8005d10:	6010      	str	r0, [r2, #0]
 8005d12:	e7da      	b.n	8005cca <_free_r+0x22>
 8005d14:	d902      	bls.n	8005d1c <_free_r+0x74>
 8005d16:	230c      	movs	r3, #12
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	e7d6      	b.n	8005cca <_free_r+0x22>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf04      	itt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	bf04      	itt	eq
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	6054      	str	r4, [r2, #4]
 8005d32:	e7ca      	b.n	8005cca <_free_r+0x22>
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	2000049c 	.word	0x2000049c

08005d3c <malloc>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <malloc+0xc>)
 8005d3e:	4601      	mov	r1, r0
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f000 b825 	b.w	8005d90 <_malloc_r>
 8005d46:	bf00      	nop
 8005d48:	20000018 	.word	0x20000018

08005d4c <sbrk_aligned>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d8c <sbrk_aligned+0x40>)
 8005d50:	460c      	mov	r4, r1
 8005d52:	6831      	ldr	r1, [r6, #0]
 8005d54:	4605      	mov	r5, r0
 8005d56:	b911      	cbnz	r1, 8005d5e <sbrk_aligned+0x12>
 8005d58:	f000 fe40 	bl	80069dc <_sbrk_r>
 8005d5c:	6030      	str	r0, [r6, #0]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 fe3b 	bl	80069dc <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d103      	bne.n	8005d72 <sbrk_aligned+0x26>
 8005d6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d6e:	4620      	mov	r0, r4
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	1cc4      	adds	r4, r0, #3
 8005d74:	f024 0403 	bic.w	r4, r4, #3
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d0f8      	beq.n	8005d6e <sbrk_aligned+0x22>
 8005d7c:	1a21      	subs	r1, r4, r0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 fe2c 	bl	80069dc <_sbrk_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1f2      	bne.n	8005d6e <sbrk_aligned+0x22>
 8005d88:	e7ef      	b.n	8005d6a <sbrk_aligned+0x1e>
 8005d8a:	bf00      	nop
 8005d8c:	20000498 	.word	0x20000498

08005d90 <_malloc_r>:
 8005d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d94:	1ccd      	adds	r5, r1, #3
 8005d96:	f025 0503 	bic.w	r5, r5, #3
 8005d9a:	3508      	adds	r5, #8
 8005d9c:	2d0c      	cmp	r5, #12
 8005d9e:	bf38      	it	cc
 8005da0:	250c      	movcc	r5, #12
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	db01      	blt.n	8005dac <_malloc_r+0x1c>
 8005da8:	42a9      	cmp	r1, r5
 8005daa:	d904      	bls.n	8005db6 <_malloc_r+0x26>
 8005dac:	230c      	movs	r3, #12
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e8c <_malloc_r+0xfc>
 8005dba:	f000 f869 	bl	8005e90 <__malloc_lock>
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	461c      	mov	r4, r3
 8005dc4:	bb44      	cbnz	r4, 8005e18 <_malloc_r+0x88>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff ffbf 	bl	8005d4c <sbrk_aligned>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	d158      	bne.n	8005e86 <_malloc_r+0xf6>
 8005dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd8:	4627      	mov	r7, r4
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d143      	bne.n	8005e66 <_malloc_r+0xd6>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	d04b      	beq.n	8005e7a <_malloc_r+0xea>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	4639      	mov	r1, r7
 8005de6:	4630      	mov	r0, r6
 8005de8:	eb04 0903 	add.w	r9, r4, r3
 8005dec:	f000 fdf6 	bl	80069dc <_sbrk_r>
 8005df0:	4581      	cmp	r9, r0
 8005df2:	d142      	bne.n	8005e7a <_malloc_r+0xea>
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	1a6d      	subs	r5, r5, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ffa6 	bl	8005d4c <sbrk_aligned>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d03a      	beq.n	8005e7a <_malloc_r+0xea>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	442b      	add	r3, r5
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	bb62      	cbnz	r2, 8005e6c <_malloc_r+0xdc>
 8005e12:	f8c8 7000 	str.w	r7, [r8]
 8005e16:	e00f      	b.n	8005e38 <_malloc_r+0xa8>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	1b52      	subs	r2, r2, r5
 8005e1c:	d420      	bmi.n	8005e60 <_malloc_r+0xd0>
 8005e1e:	2a0b      	cmp	r2, #11
 8005e20:	d917      	bls.n	8005e52 <_malloc_r+0xc2>
 8005e22:	1961      	adds	r1, r4, r5
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	6025      	str	r5, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	6059      	strne	r1, [r3, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	bf08      	it	eq
 8005e30:	f8c8 1000 	streq.w	r1, [r8]
 8005e34:	5162      	str	r2, [r4, r5]
 8005e36:	604b      	str	r3, [r1, #4]
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 f82f 	bl	8005e9c <__malloc_unlock>
 8005e3e:	f104 000b 	add.w	r0, r4, #11
 8005e42:	1d23      	adds	r3, r4, #4
 8005e44:	f020 0007 	bic.w	r0, r0, #7
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	bf1c      	itt	ne
 8005e4c:	1a1b      	subne	r3, r3, r0
 8005e4e:	50a3      	strne	r3, [r4, r2]
 8005e50:	e7af      	b.n	8005db2 <_malloc_r+0x22>
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	bf0c      	ite	eq
 8005e58:	f8c8 2000 	streq.w	r2, [r8]
 8005e5c:	605a      	strne	r2, [r3, #4]
 8005e5e:	e7eb      	b.n	8005e38 <_malloc_r+0xa8>
 8005e60:	4623      	mov	r3, r4
 8005e62:	6864      	ldr	r4, [r4, #4]
 8005e64:	e7ae      	b.n	8005dc4 <_malloc_r+0x34>
 8005e66:	463c      	mov	r4, r7
 8005e68:	687f      	ldr	r7, [r7, #4]
 8005e6a:	e7b6      	b.n	8005dda <_malloc_r+0x4a>
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d1fb      	bne.n	8005e6c <_malloc_r+0xdc>
 8005e74:	2300      	movs	r3, #0
 8005e76:	6053      	str	r3, [r2, #4]
 8005e78:	e7de      	b.n	8005e38 <_malloc_r+0xa8>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f000 f80c 	bl	8005e9c <__malloc_unlock>
 8005e84:	e794      	b.n	8005db0 <_malloc_r+0x20>
 8005e86:	6005      	str	r5, [r0, #0]
 8005e88:	e7d6      	b.n	8005e38 <_malloc_r+0xa8>
 8005e8a:	bf00      	nop
 8005e8c:	2000049c 	.word	0x2000049c

08005e90 <__malloc_lock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <__malloc_lock+0x8>)
 8005e92:	f7ff b8b4 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 8005e96:	bf00      	nop
 8005e98:	20000494 	.word	0x20000494

08005e9c <__malloc_unlock>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	@ (8005ea4 <__malloc_unlock+0x8>)
 8005e9e:	f7ff b8af 	b.w	8005000 <__retarget_lock_release_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	20000494 	.word	0x20000494

08005ea8 <_Balloc>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	69c6      	ldr	r6, [r0, #28]
 8005eac:	4604      	mov	r4, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	b976      	cbnz	r6, 8005ed0 <_Balloc+0x28>
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f7ff ff42 	bl	8005d3c <malloc>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	61e0      	str	r0, [r4, #28]
 8005ebc:	b920      	cbnz	r0, 8005ec8 <_Balloc+0x20>
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <_Balloc+0x78>)
 8005ec0:	4818      	ldr	r0, [pc, #96]	@ (8005f24 <_Balloc+0x7c>)
 8005ec2:	216b      	movs	r1, #107	@ 0x6b
 8005ec4:	f000 fda8 	bl	8006a18 <__assert_func>
 8005ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ecc:	6006      	str	r6, [r0, #0]
 8005ece:	60c6      	str	r6, [r0, #12]
 8005ed0:	69e6      	ldr	r6, [r4, #28]
 8005ed2:	68f3      	ldr	r3, [r6, #12]
 8005ed4:	b183      	cbz	r3, 8005ef8 <_Balloc+0x50>
 8005ed6:	69e3      	ldr	r3, [r4, #28]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ede:	b9b8      	cbnz	r0, 8005f10 <_Balloc+0x68>
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ee6:	1d72      	adds	r2, r6, #5
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fdb2 	bl	8006a54 <_calloc_r>
 8005ef0:	b160      	cbz	r0, 8005f0c <_Balloc+0x64>
 8005ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ef6:	e00e      	b.n	8005f16 <_Balloc+0x6e>
 8005ef8:	2221      	movs	r2, #33	@ 0x21
 8005efa:	2104      	movs	r1, #4
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fda9 	bl	8006a54 <_calloc_r>
 8005f02:	69e3      	ldr	r3, [r4, #28]
 8005f04:	60f0      	str	r0, [r6, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <_Balloc+0x2e>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	6802      	ldr	r2, [r0, #0]
 8005f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f16:	2300      	movs	r3, #0
 8005f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f1c:	e7f7      	b.n	8005f0e <_Balloc+0x66>
 8005f1e:	bf00      	nop
 8005f20:	08008315 	.word	0x08008315
 8005f24:	08008395 	.word	0x08008395

08005f28 <_Bfree>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	69c6      	ldr	r6, [r0, #28]
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	b976      	cbnz	r6, 8005f50 <_Bfree+0x28>
 8005f32:	2010      	movs	r0, #16
 8005f34:	f7ff ff02 	bl	8005d3c <malloc>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	61e8      	str	r0, [r5, #28]
 8005f3c:	b920      	cbnz	r0, 8005f48 <_Bfree+0x20>
 8005f3e:	4b09      	ldr	r3, [pc, #36]	@ (8005f64 <_Bfree+0x3c>)
 8005f40:	4809      	ldr	r0, [pc, #36]	@ (8005f68 <_Bfree+0x40>)
 8005f42:	218f      	movs	r1, #143	@ 0x8f
 8005f44:	f000 fd68 	bl	8006a18 <__assert_func>
 8005f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f4c:	6006      	str	r6, [r0, #0]
 8005f4e:	60c6      	str	r6, [r0, #12]
 8005f50:	b13c      	cbz	r4, 8005f62 <_Bfree+0x3a>
 8005f52:	69eb      	ldr	r3, [r5, #28]
 8005f54:	6862      	ldr	r2, [r4, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f5c:	6021      	str	r1, [r4, #0]
 8005f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	08008315 	.word	0x08008315
 8005f68:	08008395 	.word	0x08008395

08005f6c <__multadd>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	690d      	ldr	r5, [r1, #16]
 8005f72:	4607      	mov	r7, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	461e      	mov	r6, r3
 8005f78:	f101 0c14 	add.w	ip, r1, #20
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f82:	b299      	uxth	r1, r3
 8005f84:	fb02 6101 	mla	r1, r2, r1, r6
 8005f88:	0c1e      	lsrs	r6, r3, #16
 8005f8a:	0c0b      	lsrs	r3, r1, #16
 8005f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f90:	b289      	uxth	r1, r1
 8005f92:	3001      	adds	r0, #1
 8005f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f98:	4285      	cmp	r5, r0
 8005f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fa2:	dcec      	bgt.n	8005f7e <__multadd+0x12>
 8005fa4:	b30e      	cbz	r6, 8005fea <__multadd+0x7e>
 8005fa6:	68a3      	ldr	r3, [r4, #8]
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	dc19      	bgt.n	8005fe0 <__multadd+0x74>
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4638      	mov	r0, r7
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	f7ff ff79 	bl	8005ea8 <_Balloc>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <__multadd+0x5a>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <__multadd+0x84>)
 8005fbe:	480d      	ldr	r0, [pc, #52]	@ (8005ff4 <__multadd+0x88>)
 8005fc0:	21ba      	movs	r1, #186	@ 0xba
 8005fc2:	f000 fd29 	bl	8006a18 <__assert_func>
 8005fc6:	6922      	ldr	r2, [r4, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	f104 010c 	add.w	r1, r4, #12
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f000 fd13 	bl	80069fc <memcpy>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ffa5 	bl	8005f28 <_Bfree>
 8005fde:	4644      	mov	r4, r8
 8005fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	615e      	str	r6, [r3, #20]
 8005fe8:	6125      	str	r5, [r4, #16]
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	08008384 	.word	0x08008384
 8005ff4:	08008395 	.word	0x08008395

08005ff8 <__hi0bits>:
 8005ff8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	bf36      	itet	cc
 8006000:	0403      	lslcc	r3, r0, #16
 8006002:	2000      	movcs	r0, #0
 8006004:	2010      	movcc	r0, #16
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600a:	bf3c      	itt	cc
 800600c:	021b      	lslcc	r3, r3, #8
 800600e:	3008      	addcc	r0, #8
 8006010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006014:	bf3c      	itt	cc
 8006016:	011b      	lslcc	r3, r3, #4
 8006018:	3004      	addcc	r0, #4
 800601a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601e:	bf3c      	itt	cc
 8006020:	009b      	lslcc	r3, r3, #2
 8006022:	3002      	addcc	r0, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	db05      	blt.n	8006034 <__hi0bits+0x3c>
 8006028:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800602c:	f100 0001 	add.w	r0, r0, #1
 8006030:	bf08      	it	eq
 8006032:	2020      	moveq	r0, #32
 8006034:	4770      	bx	lr

08006036 <__lo0bits>:
 8006036:	6803      	ldr	r3, [r0, #0]
 8006038:	4602      	mov	r2, r0
 800603a:	f013 0007 	ands.w	r0, r3, #7
 800603e:	d00b      	beq.n	8006058 <__lo0bits+0x22>
 8006040:	07d9      	lsls	r1, r3, #31
 8006042:	d421      	bmi.n	8006088 <__lo0bits+0x52>
 8006044:	0798      	lsls	r0, r3, #30
 8006046:	bf49      	itett	mi
 8006048:	085b      	lsrmi	r3, r3, #1
 800604a:	089b      	lsrpl	r3, r3, #2
 800604c:	2001      	movmi	r0, #1
 800604e:	6013      	strmi	r3, [r2, #0]
 8006050:	bf5c      	itt	pl
 8006052:	6013      	strpl	r3, [r2, #0]
 8006054:	2002      	movpl	r0, #2
 8006056:	4770      	bx	lr
 8006058:	b299      	uxth	r1, r3
 800605a:	b909      	cbnz	r1, 8006060 <__lo0bits+0x2a>
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	2010      	movs	r0, #16
 8006060:	b2d9      	uxtb	r1, r3
 8006062:	b909      	cbnz	r1, 8006068 <__lo0bits+0x32>
 8006064:	3008      	adds	r0, #8
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	0719      	lsls	r1, r3, #28
 800606a:	bf04      	itt	eq
 800606c:	091b      	lsreq	r3, r3, #4
 800606e:	3004      	addeq	r0, #4
 8006070:	0799      	lsls	r1, r3, #30
 8006072:	bf04      	itt	eq
 8006074:	089b      	lsreq	r3, r3, #2
 8006076:	3002      	addeq	r0, #2
 8006078:	07d9      	lsls	r1, r3, #31
 800607a:	d403      	bmi.n	8006084 <__lo0bits+0x4e>
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	f100 0001 	add.w	r0, r0, #1
 8006082:	d003      	beq.n	800608c <__lo0bits+0x56>
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	4770      	bx	lr
 8006088:	2000      	movs	r0, #0
 800608a:	4770      	bx	lr
 800608c:	2020      	movs	r0, #32
 800608e:	4770      	bx	lr

08006090 <__i2b>:
 8006090:	b510      	push	{r4, lr}
 8006092:	460c      	mov	r4, r1
 8006094:	2101      	movs	r1, #1
 8006096:	f7ff ff07 	bl	8005ea8 <_Balloc>
 800609a:	4602      	mov	r2, r0
 800609c:	b928      	cbnz	r0, 80060aa <__i2b+0x1a>
 800609e:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <__i2b+0x24>)
 80060a0:	4805      	ldr	r0, [pc, #20]	@ (80060b8 <__i2b+0x28>)
 80060a2:	f240 1145 	movw	r1, #325	@ 0x145
 80060a6:	f000 fcb7 	bl	8006a18 <__assert_func>
 80060aa:	2301      	movs	r3, #1
 80060ac:	6144      	str	r4, [r0, #20]
 80060ae:	6103      	str	r3, [r0, #16]
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	bf00      	nop
 80060b4:	08008384 	.word	0x08008384
 80060b8:	08008395 	.word	0x08008395

080060bc <__multiply>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	4614      	mov	r4, r2
 80060c2:	690a      	ldr	r2, [r1, #16]
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	bfa8      	it	ge
 80060ca:	4623      	movge	r3, r4
 80060cc:	460f      	mov	r7, r1
 80060ce:	bfa4      	itt	ge
 80060d0:	460c      	movge	r4, r1
 80060d2:	461f      	movge	r7, r3
 80060d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	6861      	ldr	r1, [r4, #4]
 80060e0:	eb0a 0609 	add.w	r6, sl, r9
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	b085      	sub	sp, #20
 80060e8:	bfb8      	it	lt
 80060ea:	3101      	addlt	r1, #1
 80060ec:	f7ff fedc 	bl	8005ea8 <_Balloc>
 80060f0:	b930      	cbnz	r0, 8006100 <__multiply+0x44>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4b44      	ldr	r3, [pc, #272]	@ (8006208 <__multiply+0x14c>)
 80060f6:	4845      	ldr	r0, [pc, #276]	@ (800620c <__multiply+0x150>)
 80060f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060fc:	f000 fc8c 	bl	8006a18 <__assert_func>
 8006100:	f100 0514 	add.w	r5, r0, #20
 8006104:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006108:	462b      	mov	r3, r5
 800610a:	2200      	movs	r2, #0
 800610c:	4543      	cmp	r3, r8
 800610e:	d321      	bcc.n	8006154 <__multiply+0x98>
 8006110:	f107 0114 	add.w	r1, r7, #20
 8006114:	f104 0214 	add.w	r2, r4, #20
 8006118:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800611c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	1b13      	subs	r3, r2, r4
 8006124:	3b15      	subs	r3, #21
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	3304      	adds	r3, #4
 800612c:	f104 0715 	add.w	r7, r4, #21
 8006130:	42ba      	cmp	r2, r7
 8006132:	bf38      	it	cc
 8006134:	2304      	movcc	r3, #4
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	9103      	str	r1, [sp, #12]
 800613c:	428b      	cmp	r3, r1
 800613e:	d80c      	bhi.n	800615a <__multiply+0x9e>
 8006140:	2e00      	cmp	r6, #0
 8006142:	dd03      	ble.n	800614c <__multiply+0x90>
 8006144:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006148:	2b00      	cmp	r3, #0
 800614a:	d05a      	beq.n	8006202 <__multiply+0x146>
 800614c:	6106      	str	r6, [r0, #16]
 800614e:	b005      	add	sp, #20
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	f843 2b04 	str.w	r2, [r3], #4
 8006158:	e7d8      	b.n	800610c <__multiply+0x50>
 800615a:	f8b1 a000 	ldrh.w	sl, [r1]
 800615e:	f1ba 0f00 	cmp.w	sl, #0
 8006162:	d023      	beq.n	80061ac <__multiply+0xf0>
 8006164:	f104 0e14 	add.w	lr, r4, #20
 8006168:	46a9      	mov	r9, r5
 800616a:	f04f 0c00 	mov.w	ip, #0
 800616e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006172:	f8d9 3000 	ldr.w	r3, [r9]
 8006176:	fa1f fb87 	uxth.w	fp, r7
 800617a:	b29b      	uxth	r3, r3
 800617c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006180:	4463      	add	r3, ip
 8006182:	f8d9 c000 	ldr.w	ip, [r9]
 8006186:	0c3f      	lsrs	r7, r7, #16
 8006188:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800618c:	fb0a c707 	mla	r7, sl, r7, ip
 8006190:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800619a:	4572      	cmp	r2, lr
 800619c:	f849 3b04 	str.w	r3, [r9], #4
 80061a0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80061a4:	d8e3      	bhi.n	800616e <__multiply+0xb2>
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	f845 c003 	str.w	ip, [r5, r3]
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80061b2:	3104      	adds	r1, #4
 80061b4:	f1b9 0f00 	cmp.w	r9, #0
 80061b8:	d021      	beq.n	80061fe <__multiply+0x142>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	f104 0c14 	add.w	ip, r4, #20
 80061c0:	46ae      	mov	lr, r5
 80061c2:	f04f 0a00 	mov.w	sl, #0
 80061c6:	f8bc b000 	ldrh.w	fp, [ip]
 80061ca:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80061ce:	fb09 770b 	mla	r7, r9, fp, r7
 80061d2:	4457      	add	r7, sl
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80061da:	f84e 3b04 	str.w	r3, [lr], #4
 80061de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061e6:	f8be 3000 	ldrh.w	r3, [lr]
 80061ea:	fb09 330a 	mla	r3, r9, sl, r3
 80061ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80061f2:	4562      	cmp	r2, ip
 80061f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061f8:	d8e5      	bhi.n	80061c6 <__multiply+0x10a>
 80061fa:	9f01      	ldr	r7, [sp, #4]
 80061fc:	51eb      	str	r3, [r5, r7]
 80061fe:	3504      	adds	r5, #4
 8006200:	e79a      	b.n	8006138 <__multiply+0x7c>
 8006202:	3e01      	subs	r6, #1
 8006204:	e79c      	b.n	8006140 <__multiply+0x84>
 8006206:	bf00      	nop
 8006208:	08008384 	.word	0x08008384
 800620c:	08008395 	.word	0x08008395

08006210 <__pow5mult>:
 8006210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006214:	4615      	mov	r5, r2
 8006216:	f012 0203 	ands.w	r2, r2, #3
 800621a:	4607      	mov	r7, r0
 800621c:	460e      	mov	r6, r1
 800621e:	d007      	beq.n	8006230 <__pow5mult+0x20>
 8006220:	4c25      	ldr	r4, [pc, #148]	@ (80062b8 <__pow5mult+0xa8>)
 8006222:	3a01      	subs	r2, #1
 8006224:	2300      	movs	r3, #0
 8006226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800622a:	f7ff fe9f 	bl	8005f6c <__multadd>
 800622e:	4606      	mov	r6, r0
 8006230:	10ad      	asrs	r5, r5, #2
 8006232:	d03d      	beq.n	80062b0 <__pow5mult+0xa0>
 8006234:	69fc      	ldr	r4, [r7, #28]
 8006236:	b97c      	cbnz	r4, 8006258 <__pow5mult+0x48>
 8006238:	2010      	movs	r0, #16
 800623a:	f7ff fd7f 	bl	8005d3c <malloc>
 800623e:	4602      	mov	r2, r0
 8006240:	61f8      	str	r0, [r7, #28]
 8006242:	b928      	cbnz	r0, 8006250 <__pow5mult+0x40>
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <__pow5mult+0xac>)
 8006246:	481e      	ldr	r0, [pc, #120]	@ (80062c0 <__pow5mult+0xb0>)
 8006248:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800624c:	f000 fbe4 	bl	8006a18 <__assert_func>
 8006250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006254:	6004      	str	r4, [r0, #0]
 8006256:	60c4      	str	r4, [r0, #12]
 8006258:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800625c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006260:	b94c      	cbnz	r4, 8006276 <__pow5mult+0x66>
 8006262:	f240 2171 	movw	r1, #625	@ 0x271
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ff12 	bl	8006090 <__i2b>
 800626c:	2300      	movs	r3, #0
 800626e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006272:	4604      	mov	r4, r0
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	f04f 0900 	mov.w	r9, #0
 800627a:	07eb      	lsls	r3, r5, #31
 800627c:	d50a      	bpl.n	8006294 <__pow5mult+0x84>
 800627e:	4631      	mov	r1, r6
 8006280:	4622      	mov	r2, r4
 8006282:	4638      	mov	r0, r7
 8006284:	f7ff ff1a 	bl	80060bc <__multiply>
 8006288:	4631      	mov	r1, r6
 800628a:	4680      	mov	r8, r0
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff fe4b 	bl	8005f28 <_Bfree>
 8006292:	4646      	mov	r6, r8
 8006294:	106d      	asrs	r5, r5, #1
 8006296:	d00b      	beq.n	80062b0 <__pow5mult+0xa0>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	b938      	cbnz	r0, 80062ac <__pow5mult+0x9c>
 800629c:	4622      	mov	r2, r4
 800629e:	4621      	mov	r1, r4
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff0b 	bl	80060bc <__multiply>
 80062a6:	6020      	str	r0, [r4, #0]
 80062a8:	f8c0 9000 	str.w	r9, [r0]
 80062ac:	4604      	mov	r4, r0
 80062ae:	e7e4      	b.n	800627a <__pow5mult+0x6a>
 80062b0:	4630      	mov	r0, r6
 80062b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b6:	bf00      	nop
 80062b8:	080083f0 	.word	0x080083f0
 80062bc:	08008315 	.word	0x08008315
 80062c0:	08008395 	.word	0x08008395

080062c4 <__lshift>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	6849      	ldr	r1, [r1, #4]
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062d2:	68a3      	ldr	r3, [r4, #8]
 80062d4:	4607      	mov	r7, r0
 80062d6:	4691      	mov	r9, r2
 80062d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062dc:	f108 0601 	add.w	r6, r8, #1
 80062e0:	42b3      	cmp	r3, r6
 80062e2:	db0b      	blt.n	80062fc <__lshift+0x38>
 80062e4:	4638      	mov	r0, r7
 80062e6:	f7ff fddf 	bl	8005ea8 <_Balloc>
 80062ea:	4605      	mov	r5, r0
 80062ec:	b948      	cbnz	r0, 8006302 <__lshift+0x3e>
 80062ee:	4602      	mov	r2, r0
 80062f0:	4b28      	ldr	r3, [pc, #160]	@ (8006394 <__lshift+0xd0>)
 80062f2:	4829      	ldr	r0, [pc, #164]	@ (8006398 <__lshift+0xd4>)
 80062f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80062f8:	f000 fb8e 	bl	8006a18 <__assert_func>
 80062fc:	3101      	adds	r1, #1
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	e7ee      	b.n	80062e0 <__lshift+0x1c>
 8006302:	2300      	movs	r3, #0
 8006304:	f100 0114 	add.w	r1, r0, #20
 8006308:	f100 0210 	add.w	r2, r0, #16
 800630c:	4618      	mov	r0, r3
 800630e:	4553      	cmp	r3, sl
 8006310:	db33      	blt.n	800637a <__lshift+0xb6>
 8006312:	6920      	ldr	r0, [r4, #16]
 8006314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006318:	f104 0314 	add.w	r3, r4, #20
 800631c:	f019 091f 	ands.w	r9, r9, #31
 8006320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006328:	d02b      	beq.n	8006382 <__lshift+0xbe>
 800632a:	f1c9 0e20 	rsb	lr, r9, #32
 800632e:	468a      	mov	sl, r1
 8006330:	2200      	movs	r2, #0
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	fa00 f009 	lsl.w	r0, r0, r9
 8006338:	4310      	orrs	r0, r2
 800633a:	f84a 0b04 	str.w	r0, [sl], #4
 800633e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006342:	459c      	cmp	ip, r3
 8006344:	fa22 f20e 	lsr.w	r2, r2, lr
 8006348:	d8f3      	bhi.n	8006332 <__lshift+0x6e>
 800634a:	ebac 0304 	sub.w	r3, ip, r4
 800634e:	3b15      	subs	r3, #21
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	3304      	adds	r3, #4
 8006356:	f104 0015 	add.w	r0, r4, #21
 800635a:	4584      	cmp	ip, r0
 800635c:	bf38      	it	cc
 800635e:	2304      	movcc	r3, #4
 8006360:	50ca      	str	r2, [r1, r3]
 8006362:	b10a      	cbz	r2, 8006368 <__lshift+0xa4>
 8006364:	f108 0602 	add.w	r6, r8, #2
 8006368:	3e01      	subs	r6, #1
 800636a:	4638      	mov	r0, r7
 800636c:	612e      	str	r6, [r5, #16]
 800636e:	4621      	mov	r1, r4
 8006370:	f7ff fdda 	bl	8005f28 <_Bfree>
 8006374:	4628      	mov	r0, r5
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	f842 0f04 	str.w	r0, [r2, #4]!
 800637e:	3301      	adds	r3, #1
 8006380:	e7c5      	b.n	800630e <__lshift+0x4a>
 8006382:	3904      	subs	r1, #4
 8006384:	f853 2b04 	ldr.w	r2, [r3], #4
 8006388:	f841 2f04 	str.w	r2, [r1, #4]!
 800638c:	459c      	cmp	ip, r3
 800638e:	d8f9      	bhi.n	8006384 <__lshift+0xc0>
 8006390:	e7ea      	b.n	8006368 <__lshift+0xa4>
 8006392:	bf00      	nop
 8006394:	08008384 	.word	0x08008384
 8006398:	08008395 	.word	0x08008395

0800639c <__mcmp>:
 800639c:	690a      	ldr	r2, [r1, #16]
 800639e:	4603      	mov	r3, r0
 80063a0:	6900      	ldr	r0, [r0, #16]
 80063a2:	1a80      	subs	r0, r0, r2
 80063a4:	b530      	push	{r4, r5, lr}
 80063a6:	d10e      	bne.n	80063c6 <__mcmp+0x2a>
 80063a8:	3314      	adds	r3, #20
 80063aa:	3114      	adds	r1, #20
 80063ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063bc:	4295      	cmp	r5, r2
 80063be:	d003      	beq.n	80063c8 <__mcmp+0x2c>
 80063c0:	d205      	bcs.n	80063ce <__mcmp+0x32>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063c6:	bd30      	pop	{r4, r5, pc}
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d3f3      	bcc.n	80063b4 <__mcmp+0x18>
 80063cc:	e7fb      	b.n	80063c6 <__mcmp+0x2a>
 80063ce:	2001      	movs	r0, #1
 80063d0:	e7f9      	b.n	80063c6 <__mcmp+0x2a>
	...

080063d4 <__mdiff>:
 80063d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4689      	mov	r9, r1
 80063da:	4606      	mov	r6, r0
 80063dc:	4611      	mov	r1, r2
 80063de:	4648      	mov	r0, r9
 80063e0:	4614      	mov	r4, r2
 80063e2:	f7ff ffdb 	bl	800639c <__mcmp>
 80063e6:	1e05      	subs	r5, r0, #0
 80063e8:	d112      	bne.n	8006410 <__mdiff+0x3c>
 80063ea:	4629      	mov	r1, r5
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff fd5b 	bl	8005ea8 <_Balloc>
 80063f2:	4602      	mov	r2, r0
 80063f4:	b928      	cbnz	r0, 8006402 <__mdiff+0x2e>
 80063f6:	4b3e      	ldr	r3, [pc, #248]	@ (80064f0 <__mdiff+0x11c>)
 80063f8:	f240 2137 	movw	r1, #567	@ 0x237
 80063fc:	483d      	ldr	r0, [pc, #244]	@ (80064f4 <__mdiff+0x120>)
 80063fe:	f000 fb0b 	bl	8006a18 <__assert_func>
 8006402:	2301      	movs	r3, #1
 8006404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006408:	4610      	mov	r0, r2
 800640a:	b003      	add	sp, #12
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	bfbc      	itt	lt
 8006412:	464b      	movlt	r3, r9
 8006414:	46a1      	movlt	r9, r4
 8006416:	4630      	mov	r0, r6
 8006418:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800641c:	bfba      	itte	lt
 800641e:	461c      	movlt	r4, r3
 8006420:	2501      	movlt	r5, #1
 8006422:	2500      	movge	r5, #0
 8006424:	f7ff fd40 	bl	8005ea8 <_Balloc>
 8006428:	4602      	mov	r2, r0
 800642a:	b918      	cbnz	r0, 8006434 <__mdiff+0x60>
 800642c:	4b30      	ldr	r3, [pc, #192]	@ (80064f0 <__mdiff+0x11c>)
 800642e:	f240 2145 	movw	r1, #581	@ 0x245
 8006432:	e7e3      	b.n	80063fc <__mdiff+0x28>
 8006434:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006438:	6926      	ldr	r6, [r4, #16]
 800643a:	60c5      	str	r5, [r0, #12]
 800643c:	f109 0310 	add.w	r3, r9, #16
 8006440:	f109 0514 	add.w	r5, r9, #20
 8006444:	f104 0e14 	add.w	lr, r4, #20
 8006448:	f100 0b14 	add.w	fp, r0, #20
 800644c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006450:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	46d9      	mov	r9, fp
 8006458:	f04f 0c00 	mov.w	ip, #0
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006462:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	b281      	uxth	r1, r0
 800646a:	fa1f f38a 	uxth.w	r3, sl
 800646e:	1a5b      	subs	r3, r3, r1
 8006470:	0c00      	lsrs	r0, r0, #16
 8006472:	4463      	add	r3, ip
 8006474:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006478:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006482:	4576      	cmp	r6, lr
 8006484:	f849 3b04 	str.w	r3, [r9], #4
 8006488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800648c:	d8e6      	bhi.n	800645c <__mdiff+0x88>
 800648e:	1b33      	subs	r3, r6, r4
 8006490:	3b15      	subs	r3, #21
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	3415      	adds	r4, #21
 8006498:	3304      	adds	r3, #4
 800649a:	42a6      	cmp	r6, r4
 800649c:	bf38      	it	cc
 800649e:	2304      	movcc	r3, #4
 80064a0:	441d      	add	r5, r3
 80064a2:	445b      	add	r3, fp
 80064a4:	461e      	mov	r6, r3
 80064a6:	462c      	mov	r4, r5
 80064a8:	4544      	cmp	r4, r8
 80064aa:	d30e      	bcc.n	80064ca <__mdiff+0xf6>
 80064ac:	f108 0103 	add.w	r1, r8, #3
 80064b0:	1b49      	subs	r1, r1, r5
 80064b2:	f021 0103 	bic.w	r1, r1, #3
 80064b6:	3d03      	subs	r5, #3
 80064b8:	45a8      	cmp	r8, r5
 80064ba:	bf38      	it	cc
 80064bc:	2100      	movcc	r1, #0
 80064be:	440b      	add	r3, r1
 80064c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064c4:	b191      	cbz	r1, 80064ec <__mdiff+0x118>
 80064c6:	6117      	str	r7, [r2, #16]
 80064c8:	e79e      	b.n	8006408 <__mdiff+0x34>
 80064ca:	f854 1b04 	ldr.w	r1, [r4], #4
 80064ce:	46e6      	mov	lr, ip
 80064d0:	0c08      	lsrs	r0, r1, #16
 80064d2:	fa1c fc81 	uxtah	ip, ip, r1
 80064d6:	4471      	add	r1, lr
 80064d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80064dc:	b289      	uxth	r1, r1
 80064de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064e2:	f846 1b04 	str.w	r1, [r6], #4
 80064e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064ea:	e7dd      	b.n	80064a8 <__mdiff+0xd4>
 80064ec:	3f01      	subs	r7, #1
 80064ee:	e7e7      	b.n	80064c0 <__mdiff+0xec>
 80064f0:	08008384 	.word	0x08008384
 80064f4:	08008395 	.word	0x08008395

080064f8 <__d2b>:
 80064f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064fc:	2101      	movs	r1, #1
 80064fe:	9e08      	ldr	r6, [sp, #32]
 8006500:	4690      	mov	r8, r2
 8006502:	4699      	mov	r9, r3
 8006504:	f7ff fcd0 	bl	8005ea8 <_Balloc>
 8006508:	4604      	mov	r4, r0
 800650a:	b930      	cbnz	r0, 800651a <__d2b+0x22>
 800650c:	4602      	mov	r2, r0
 800650e:	4b24      	ldr	r3, [pc, #144]	@ (80065a0 <__d2b+0xa8>)
 8006510:	4824      	ldr	r0, [pc, #144]	@ (80065a4 <__d2b+0xac>)
 8006512:	f240 310f 	movw	r1, #783	@ 0x30f
 8006516:	f000 fa7f 	bl	8006a18 <__assert_func>
 800651a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800651e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006522:	b10d      	cbz	r5, 8006528 <__d2b+0x30>
 8006524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	f1b8 0300 	subs.w	r3, r8, #0
 800652e:	d024      	beq.n	800657a <__d2b+0x82>
 8006530:	4668      	mov	r0, sp
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	f7ff fd7f 	bl	8006036 <__lo0bits>
 8006538:	e9dd 1200 	ldrd	r1, r2, [sp]
 800653c:	b1d8      	cbz	r0, 8006576 <__d2b+0x7e>
 800653e:	f1c0 0320 	rsb	r3, r0, #32
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	430b      	orrs	r3, r1
 8006548:	40c2      	lsrs	r2, r0
 800654a:	6163      	str	r3, [r4, #20]
 800654c:	9201      	str	r2, [sp, #4]
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	61a3      	str	r3, [r4, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf0c      	ite	eq
 8006556:	2201      	moveq	r2, #1
 8006558:	2202      	movne	r2, #2
 800655a:	6122      	str	r2, [r4, #16]
 800655c:	b1ad      	cbz	r5, 800658a <__d2b+0x92>
 800655e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006562:	4405      	add	r5, r0
 8006564:	6035      	str	r5, [r6, #0]
 8006566:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800656a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656c:	6018      	str	r0, [r3, #0]
 800656e:	4620      	mov	r0, r4
 8006570:	b002      	add	sp, #8
 8006572:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006576:	6161      	str	r1, [r4, #20]
 8006578:	e7e9      	b.n	800654e <__d2b+0x56>
 800657a:	a801      	add	r0, sp, #4
 800657c:	f7ff fd5b 	bl	8006036 <__lo0bits>
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	6163      	str	r3, [r4, #20]
 8006584:	3020      	adds	r0, #32
 8006586:	2201      	movs	r2, #1
 8006588:	e7e7      	b.n	800655a <__d2b+0x62>
 800658a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800658e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006592:	6030      	str	r0, [r6, #0]
 8006594:	6918      	ldr	r0, [r3, #16]
 8006596:	f7ff fd2f 	bl	8005ff8 <__hi0bits>
 800659a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800659e:	e7e4      	b.n	800656a <__d2b+0x72>
 80065a0:	08008384 	.word	0x08008384
 80065a4:	08008395 	.word	0x08008395

080065a8 <__ssputs_r>:
 80065a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ac:	688e      	ldr	r6, [r1, #8]
 80065ae:	461f      	mov	r7, r3
 80065b0:	42be      	cmp	r6, r7
 80065b2:	680b      	ldr	r3, [r1, #0]
 80065b4:	4682      	mov	sl, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4690      	mov	r8, r2
 80065ba:	d82d      	bhi.n	8006618 <__ssputs_r+0x70>
 80065bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065c4:	d026      	beq.n	8006614 <__ssputs_r+0x6c>
 80065c6:	6965      	ldr	r5, [r4, #20]
 80065c8:	6909      	ldr	r1, [r1, #16]
 80065ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ce:	eba3 0901 	sub.w	r9, r3, r1
 80065d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065d6:	1c7b      	adds	r3, r7, #1
 80065d8:	444b      	add	r3, r9
 80065da:	106d      	asrs	r5, r5, #1
 80065dc:	429d      	cmp	r5, r3
 80065de:	bf38      	it	cc
 80065e0:	461d      	movcc	r5, r3
 80065e2:	0553      	lsls	r3, r2, #21
 80065e4:	d527      	bpl.n	8006636 <__ssputs_r+0x8e>
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7ff fbd2 	bl	8005d90 <_malloc_r>
 80065ec:	4606      	mov	r6, r0
 80065ee:	b360      	cbz	r0, 800664a <__ssputs_r+0xa2>
 80065f0:	6921      	ldr	r1, [r4, #16]
 80065f2:	464a      	mov	r2, r9
 80065f4:	f000 fa02 	bl	80069fc <memcpy>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	6126      	str	r6, [r4, #16]
 8006606:	6165      	str	r5, [r4, #20]
 8006608:	444e      	add	r6, r9
 800660a:	eba5 0509 	sub.w	r5, r5, r9
 800660e:	6026      	str	r6, [r4, #0]
 8006610:	60a5      	str	r5, [r4, #8]
 8006612:	463e      	mov	r6, r7
 8006614:	42be      	cmp	r6, r7
 8006616:	d900      	bls.n	800661a <__ssputs_r+0x72>
 8006618:	463e      	mov	r6, r7
 800661a:	6820      	ldr	r0, [r4, #0]
 800661c:	4632      	mov	r2, r6
 800661e:	4641      	mov	r1, r8
 8006620:	f000 f9c2 	bl	80069a8 <memmove>
 8006624:	68a3      	ldr	r3, [r4, #8]
 8006626:	1b9b      	subs	r3, r3, r6
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	4433      	add	r3, r6
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	2000      	movs	r0, #0
 8006632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006636:	462a      	mov	r2, r5
 8006638:	f000 fa32 	bl	8006aa0 <_realloc_r>
 800663c:	4606      	mov	r6, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	d1e0      	bne.n	8006604 <__ssputs_r+0x5c>
 8006642:	6921      	ldr	r1, [r4, #16]
 8006644:	4650      	mov	r0, sl
 8006646:	f7ff fb2f 	bl	8005ca8 <_free_r>
 800664a:	230c      	movs	r3, #12
 800664c:	f8ca 3000 	str.w	r3, [sl]
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800665c:	e7e9      	b.n	8006632 <__ssputs_r+0x8a>
	...

08006660 <_svfiprintf_r>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	4698      	mov	r8, r3
 8006666:	898b      	ldrh	r3, [r1, #12]
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	b09d      	sub	sp, #116	@ 0x74
 800666c:	4607      	mov	r7, r0
 800666e:	460d      	mov	r5, r1
 8006670:	4614      	mov	r4, r2
 8006672:	d510      	bpl.n	8006696 <_svfiprintf_r+0x36>
 8006674:	690b      	ldr	r3, [r1, #16]
 8006676:	b973      	cbnz	r3, 8006696 <_svfiprintf_r+0x36>
 8006678:	2140      	movs	r1, #64	@ 0x40
 800667a:	f7ff fb89 	bl	8005d90 <_malloc_r>
 800667e:	6028      	str	r0, [r5, #0]
 8006680:	6128      	str	r0, [r5, #16]
 8006682:	b930      	cbnz	r0, 8006692 <_svfiprintf_r+0x32>
 8006684:	230c      	movs	r3, #12
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800668c:	b01d      	add	sp, #116	@ 0x74
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	2340      	movs	r3, #64	@ 0x40
 8006694:	616b      	str	r3, [r5, #20]
 8006696:	2300      	movs	r3, #0
 8006698:	9309      	str	r3, [sp, #36]	@ 0x24
 800669a:	2320      	movs	r3, #32
 800669c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a4:	2330      	movs	r3, #48	@ 0x30
 80066a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006844 <_svfiprintf_r+0x1e4>
 80066aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ae:	f04f 0901 	mov.w	r9, #1
 80066b2:	4623      	mov	r3, r4
 80066b4:	469a      	mov	sl, r3
 80066b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ba:	b10a      	cbz	r2, 80066c0 <_svfiprintf_r+0x60>
 80066bc:	2a25      	cmp	r2, #37	@ 0x25
 80066be:	d1f9      	bne.n	80066b4 <_svfiprintf_r+0x54>
 80066c0:	ebba 0b04 	subs.w	fp, sl, r4
 80066c4:	d00b      	beq.n	80066de <_svfiprintf_r+0x7e>
 80066c6:	465b      	mov	r3, fp
 80066c8:	4622      	mov	r2, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	4638      	mov	r0, r7
 80066ce:	f7ff ff6b 	bl	80065a8 <__ssputs_r>
 80066d2:	3001      	adds	r0, #1
 80066d4:	f000 80a7 	beq.w	8006826 <_svfiprintf_r+0x1c6>
 80066d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066da:	445a      	add	r2, fp
 80066dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066de:	f89a 3000 	ldrb.w	r3, [sl]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 809f 	beq.w	8006826 <_svfiprintf_r+0x1c6>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f2:	f10a 0a01 	add.w	sl, sl, #1
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	9307      	str	r3, [sp, #28]
 80066fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006700:	4654      	mov	r4, sl
 8006702:	2205      	movs	r2, #5
 8006704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006708:	484e      	ldr	r0, [pc, #312]	@ (8006844 <_svfiprintf_r+0x1e4>)
 800670a:	f7f9 fd61 	bl	80001d0 <memchr>
 800670e:	9a04      	ldr	r2, [sp, #16]
 8006710:	b9d8      	cbnz	r0, 800674a <_svfiprintf_r+0xea>
 8006712:	06d0      	lsls	r0, r2, #27
 8006714:	bf44      	itt	mi
 8006716:	2320      	movmi	r3, #32
 8006718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800671c:	0711      	lsls	r1, r2, #28
 800671e:	bf44      	itt	mi
 8006720:	232b      	movmi	r3, #43	@ 0x2b
 8006722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006726:	f89a 3000 	ldrb.w	r3, [sl]
 800672a:	2b2a      	cmp	r3, #42	@ 0x2a
 800672c:	d015      	beq.n	800675a <_svfiprintf_r+0xfa>
 800672e:	9a07      	ldr	r2, [sp, #28]
 8006730:	4654      	mov	r4, sl
 8006732:	2000      	movs	r0, #0
 8006734:	f04f 0c0a 	mov.w	ip, #10
 8006738:	4621      	mov	r1, r4
 800673a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800673e:	3b30      	subs	r3, #48	@ 0x30
 8006740:	2b09      	cmp	r3, #9
 8006742:	d94b      	bls.n	80067dc <_svfiprintf_r+0x17c>
 8006744:	b1b0      	cbz	r0, 8006774 <_svfiprintf_r+0x114>
 8006746:	9207      	str	r2, [sp, #28]
 8006748:	e014      	b.n	8006774 <_svfiprintf_r+0x114>
 800674a:	eba0 0308 	sub.w	r3, r0, r8
 800674e:	fa09 f303 	lsl.w	r3, r9, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	46a2      	mov	sl, r4
 8006758:	e7d2      	b.n	8006700 <_svfiprintf_r+0xa0>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	1d19      	adds	r1, r3, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	9103      	str	r1, [sp, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bfbb      	ittet	lt
 8006766:	425b      	neglt	r3, r3
 8006768:	f042 0202 	orrlt.w	r2, r2, #2
 800676c:	9307      	strge	r3, [sp, #28]
 800676e:	9307      	strlt	r3, [sp, #28]
 8006770:	bfb8      	it	lt
 8006772:	9204      	strlt	r2, [sp, #16]
 8006774:	7823      	ldrb	r3, [r4, #0]
 8006776:	2b2e      	cmp	r3, #46	@ 0x2e
 8006778:	d10a      	bne.n	8006790 <_svfiprintf_r+0x130>
 800677a:	7863      	ldrb	r3, [r4, #1]
 800677c:	2b2a      	cmp	r3, #42	@ 0x2a
 800677e:	d132      	bne.n	80067e6 <_svfiprintf_r+0x186>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	1d1a      	adds	r2, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9203      	str	r2, [sp, #12]
 8006788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800678c:	3402      	adds	r4, #2
 800678e:	9305      	str	r3, [sp, #20]
 8006790:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006848 <_svfiprintf_r+0x1e8>
 8006794:	7821      	ldrb	r1, [r4, #0]
 8006796:	2203      	movs	r2, #3
 8006798:	4650      	mov	r0, sl
 800679a:	f7f9 fd19 	bl	80001d0 <memchr>
 800679e:	b138      	cbz	r0, 80067b0 <_svfiprintf_r+0x150>
 80067a0:	9b04      	ldr	r3, [sp, #16]
 80067a2:	eba0 000a 	sub.w	r0, r0, sl
 80067a6:	2240      	movs	r2, #64	@ 0x40
 80067a8:	4082      	lsls	r2, r0
 80067aa:	4313      	orrs	r3, r2
 80067ac:	3401      	adds	r4, #1
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b4:	4825      	ldr	r0, [pc, #148]	@ (800684c <_svfiprintf_r+0x1ec>)
 80067b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067ba:	2206      	movs	r2, #6
 80067bc:	f7f9 fd08 	bl	80001d0 <memchr>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d036      	beq.n	8006832 <_svfiprintf_r+0x1d2>
 80067c4:	4b22      	ldr	r3, [pc, #136]	@ (8006850 <_svfiprintf_r+0x1f0>)
 80067c6:	bb1b      	cbnz	r3, 8006810 <_svfiprintf_r+0x1b0>
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	3307      	adds	r3, #7
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	3308      	adds	r3, #8
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d6:	4433      	add	r3, r6
 80067d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067da:	e76a      	b.n	80066b2 <_svfiprintf_r+0x52>
 80067dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e0:	460c      	mov	r4, r1
 80067e2:	2001      	movs	r0, #1
 80067e4:	e7a8      	b.n	8006738 <_svfiprintf_r+0xd8>
 80067e6:	2300      	movs	r3, #0
 80067e8:	3401      	adds	r4, #1
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	4619      	mov	r1, r3
 80067ee:	f04f 0c0a 	mov.w	ip, #10
 80067f2:	4620      	mov	r0, r4
 80067f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f8:	3a30      	subs	r2, #48	@ 0x30
 80067fa:	2a09      	cmp	r2, #9
 80067fc:	d903      	bls.n	8006806 <_svfiprintf_r+0x1a6>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0c6      	beq.n	8006790 <_svfiprintf_r+0x130>
 8006802:	9105      	str	r1, [sp, #20]
 8006804:	e7c4      	b.n	8006790 <_svfiprintf_r+0x130>
 8006806:	fb0c 2101 	mla	r1, ip, r1, r2
 800680a:	4604      	mov	r4, r0
 800680c:	2301      	movs	r3, #1
 800680e:	e7f0      	b.n	80067f2 <_svfiprintf_r+0x192>
 8006810:	ab03      	add	r3, sp, #12
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	462a      	mov	r2, r5
 8006816:	4b0f      	ldr	r3, [pc, #60]	@ (8006854 <_svfiprintf_r+0x1f4>)
 8006818:	a904      	add	r1, sp, #16
 800681a:	4638      	mov	r0, r7
 800681c:	f7fd fe92 	bl	8004544 <_printf_float>
 8006820:	1c42      	adds	r2, r0, #1
 8006822:	4606      	mov	r6, r0
 8006824:	d1d6      	bne.n	80067d4 <_svfiprintf_r+0x174>
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	065b      	lsls	r3, r3, #25
 800682a:	f53f af2d 	bmi.w	8006688 <_svfiprintf_r+0x28>
 800682e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006830:	e72c      	b.n	800668c <_svfiprintf_r+0x2c>
 8006832:	ab03      	add	r3, sp, #12
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	462a      	mov	r2, r5
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <_svfiprintf_r+0x1f4>)
 800683a:	a904      	add	r1, sp, #16
 800683c:	4638      	mov	r0, r7
 800683e:	f7fe f91b 	bl	8004a78 <_printf_i>
 8006842:	e7ed      	b.n	8006820 <_svfiprintf_r+0x1c0>
 8006844:	080084f0 	.word	0x080084f0
 8006848:	080084f6 	.word	0x080084f6
 800684c:	080084fa 	.word	0x080084fa
 8006850:	08004545 	.word	0x08004545
 8006854:	080065a9 	.word	0x080065a9

08006858 <__sflush_r>:
 8006858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	0716      	lsls	r6, r2, #28
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	d454      	bmi.n	8006910 <__sflush_r+0xb8>
 8006866:	684b      	ldr	r3, [r1, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc02      	bgt.n	8006872 <__sflush_r+0x1a>
 800686c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd48      	ble.n	8006904 <__sflush_r+0xac>
 8006872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006874:	2e00      	cmp	r6, #0
 8006876:	d045      	beq.n	8006904 <__sflush_r+0xac>
 8006878:	2300      	movs	r3, #0
 800687a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800687e:	682f      	ldr	r7, [r5, #0]
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	d030      	beq.n	80068e8 <__sflush_r+0x90>
 8006886:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	0759      	lsls	r1, r3, #29
 800688c:	d505      	bpl.n	800689a <__sflush_r+0x42>
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006894:	b10b      	cbz	r3, 800689a <__sflush_r+0x42>
 8006896:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800689e:	6a21      	ldr	r1, [r4, #32]
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b0      	blx	r6
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	d106      	bne.n	80068b8 <__sflush_r+0x60>
 80068aa:	6829      	ldr	r1, [r5, #0]
 80068ac:	291d      	cmp	r1, #29
 80068ae:	d82b      	bhi.n	8006908 <__sflush_r+0xb0>
 80068b0:	4a28      	ldr	r2, [pc, #160]	@ (8006954 <__sflush_r+0xfc>)
 80068b2:	410a      	asrs	r2, r1
 80068b4:	07d6      	lsls	r6, r2, #31
 80068b6:	d427      	bmi.n	8006908 <__sflush_r+0xb0>
 80068b8:	2200      	movs	r2, #0
 80068ba:	6062      	str	r2, [r4, #4]
 80068bc:	04d9      	lsls	r1, r3, #19
 80068be:	6922      	ldr	r2, [r4, #16]
 80068c0:	6022      	str	r2, [r4, #0]
 80068c2:	d504      	bpl.n	80068ce <__sflush_r+0x76>
 80068c4:	1c42      	adds	r2, r0, #1
 80068c6:	d101      	bne.n	80068cc <__sflush_r+0x74>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b903      	cbnz	r3, 80068ce <__sflush_r+0x76>
 80068cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80068ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d0:	602f      	str	r7, [r5, #0]
 80068d2:	b1b9      	cbz	r1, 8006904 <__sflush_r+0xac>
 80068d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <__sflush_r+0x8a>
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff f9e3 	bl	8005ca8 <_free_r>
 80068e2:	2300      	movs	r3, #0
 80068e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068e6:	e00d      	b.n	8006904 <__sflush_r+0xac>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b0      	blx	r6
 80068ee:	4602      	mov	r2, r0
 80068f0:	1c50      	adds	r0, r2, #1
 80068f2:	d1c9      	bne.n	8006888 <__sflush_r+0x30>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0c6      	beq.n	8006888 <__sflush_r+0x30>
 80068fa:	2b1d      	cmp	r3, #29
 80068fc:	d001      	beq.n	8006902 <__sflush_r+0xaa>
 80068fe:	2b16      	cmp	r3, #22
 8006900:	d11d      	bne.n	800693e <__sflush_r+0xe6>
 8006902:	602f      	str	r7, [r5, #0]
 8006904:	2000      	movs	r0, #0
 8006906:	e021      	b.n	800694c <__sflush_r+0xf4>
 8006908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800690c:	b21b      	sxth	r3, r3
 800690e:	e01a      	b.n	8006946 <__sflush_r+0xee>
 8006910:	690f      	ldr	r7, [r1, #16]
 8006912:	2f00      	cmp	r7, #0
 8006914:	d0f6      	beq.n	8006904 <__sflush_r+0xac>
 8006916:	0793      	lsls	r3, r2, #30
 8006918:	680e      	ldr	r6, [r1, #0]
 800691a:	bf08      	it	eq
 800691c:	694b      	ldreq	r3, [r1, #20]
 800691e:	600f      	str	r7, [r1, #0]
 8006920:	bf18      	it	ne
 8006922:	2300      	movne	r3, #0
 8006924:	1bf6      	subs	r6, r6, r7
 8006926:	608b      	str	r3, [r1, #8]
 8006928:	2e00      	cmp	r6, #0
 800692a:	ddeb      	ble.n	8006904 <__sflush_r+0xac>
 800692c:	6a21      	ldr	r1, [r4, #32]
 800692e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006932:	4633      	mov	r3, r6
 8006934:	463a      	mov	r2, r7
 8006936:	4628      	mov	r0, r5
 8006938:	47e0      	blx	ip
 800693a:	2800      	cmp	r0, #0
 800693c:	dc07      	bgt.n	800694e <__sflush_r+0xf6>
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800694c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694e:	4407      	add	r7, r0
 8006950:	1a36      	subs	r6, r6, r0
 8006952:	e7e9      	b.n	8006928 <__sflush_r+0xd0>
 8006954:	dfbffffe 	.word	0xdfbffffe

08006958 <_fflush_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	690b      	ldr	r3, [r1, #16]
 800695c:	4605      	mov	r5, r0
 800695e:	460c      	mov	r4, r1
 8006960:	b913      	cbnz	r3, 8006968 <_fflush_r+0x10>
 8006962:	2500      	movs	r5, #0
 8006964:	4628      	mov	r0, r5
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	b118      	cbz	r0, 8006972 <_fflush_r+0x1a>
 800696a:	6a03      	ldr	r3, [r0, #32]
 800696c:	b90b      	cbnz	r3, 8006972 <_fflush_r+0x1a>
 800696e:	f7fe fa2f 	bl	8004dd0 <__sinit>
 8006972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f3      	beq.n	8006962 <_fflush_r+0xa>
 800697a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800697c:	07d0      	lsls	r0, r2, #31
 800697e:	d404      	bmi.n	800698a <_fflush_r+0x32>
 8006980:	0599      	lsls	r1, r3, #22
 8006982:	d402      	bmi.n	800698a <_fflush_r+0x32>
 8006984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006986:	f7fe fb3a 	bl	8004ffe <__retarget_lock_acquire_recursive>
 800698a:	4628      	mov	r0, r5
 800698c:	4621      	mov	r1, r4
 800698e:	f7ff ff63 	bl	8006858 <__sflush_r>
 8006992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006994:	07da      	lsls	r2, r3, #31
 8006996:	4605      	mov	r5, r0
 8006998:	d4e4      	bmi.n	8006964 <_fflush_r+0xc>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	059b      	lsls	r3, r3, #22
 800699e:	d4e1      	bmi.n	8006964 <_fflush_r+0xc>
 80069a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a2:	f7fe fb2d 	bl	8005000 <__retarget_lock_release_recursive>
 80069a6:	e7dd      	b.n	8006964 <_fflush_r+0xc>

080069a8 <memmove>:
 80069a8:	4288      	cmp	r0, r1
 80069aa:	b510      	push	{r4, lr}
 80069ac:	eb01 0402 	add.w	r4, r1, r2
 80069b0:	d902      	bls.n	80069b8 <memmove+0x10>
 80069b2:	4284      	cmp	r4, r0
 80069b4:	4623      	mov	r3, r4
 80069b6:	d807      	bhi.n	80069c8 <memmove+0x20>
 80069b8:	1e43      	subs	r3, r0, #1
 80069ba:	42a1      	cmp	r1, r4
 80069bc:	d008      	beq.n	80069d0 <memmove+0x28>
 80069be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069c6:	e7f8      	b.n	80069ba <memmove+0x12>
 80069c8:	4402      	add	r2, r0
 80069ca:	4601      	mov	r1, r0
 80069cc:	428a      	cmp	r2, r1
 80069ce:	d100      	bne.n	80069d2 <memmove+0x2a>
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069da:	e7f7      	b.n	80069cc <memmove+0x24>

080069dc <_sbrk_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4d06      	ldr	r5, [pc, #24]	@ (80069f8 <_sbrk_r+0x1c>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	f7fb fa86 	bl	8001ef8 <_sbrk>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_sbrk_r+0x1a>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_sbrk_r+0x1a>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000490 	.word	0x20000490

080069fc <memcpy>:
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	4770      	bx	lr
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a12:	4291      	cmp	r1, r2
 8006a14:	d1f9      	bne.n	8006a0a <memcpy+0xe>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <__assert_func>:
 8006a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <__assert_func+0x2c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4605      	mov	r5, r0
 8006a24:	68d8      	ldr	r0, [r3, #12]
 8006a26:	b954      	cbnz	r4, 8006a3e <__assert_func+0x26>
 8006a28:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <__assert_func+0x30>)
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a30:	9100      	str	r1, [sp, #0]
 8006a32:	462b      	mov	r3, r5
 8006a34:	4905      	ldr	r1, [pc, #20]	@ (8006a4c <__assert_func+0x34>)
 8006a36:	f000 f86f 	bl	8006b18 <fiprintf>
 8006a3a:	f000 f87f 	bl	8006b3c <abort>
 8006a3e:	4b04      	ldr	r3, [pc, #16]	@ (8006a50 <__assert_func+0x38>)
 8006a40:	e7f4      	b.n	8006a2c <__assert_func+0x14>
 8006a42:	bf00      	nop
 8006a44:	20000018 	.word	0x20000018
 8006a48:	08008546 	.word	0x08008546
 8006a4c:	08008518 	.word	0x08008518
 8006a50:	0800850b 	.word	0x0800850b

08006a54 <_calloc_r>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	fba1 5402 	umull	r5, r4, r1, r2
 8006a5a:	b93c      	cbnz	r4, 8006a6c <_calloc_r+0x18>
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7ff f997 	bl	8005d90 <_malloc_r>
 8006a62:	4606      	mov	r6, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <_calloc_r+0x1e>
 8006a66:	2600      	movs	r6, #0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	220c      	movs	r2, #12
 8006a6e:	6002      	str	r2, [r0, #0]
 8006a70:	e7f9      	b.n	8006a66 <_calloc_r+0x12>
 8006a72:	462a      	mov	r2, r5
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7fe fa44 	bl	8004f02 <memset>
 8006a7a:	e7f5      	b.n	8006a68 <_calloc_r+0x14>

08006a7c <__ascii_mbtowc>:
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	b901      	cbnz	r1, 8006a82 <__ascii_mbtowc+0x6>
 8006a80:	a901      	add	r1, sp, #4
 8006a82:	b142      	cbz	r2, 8006a96 <__ascii_mbtowc+0x1a>
 8006a84:	b14b      	cbz	r3, 8006a9a <__ascii_mbtowc+0x1e>
 8006a86:	7813      	ldrb	r3, [r2, #0]
 8006a88:	600b      	str	r3, [r1, #0]
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	1e10      	subs	r0, r2, #0
 8006a8e:	bf18      	it	ne
 8006a90:	2001      	movne	r0, #1
 8006a92:	b002      	add	sp, #8
 8006a94:	4770      	bx	lr
 8006a96:	4610      	mov	r0, r2
 8006a98:	e7fb      	b.n	8006a92 <__ascii_mbtowc+0x16>
 8006a9a:	f06f 0001 	mvn.w	r0, #1
 8006a9e:	e7f8      	b.n	8006a92 <__ascii_mbtowc+0x16>

08006aa0 <_realloc_r>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	4615      	mov	r5, r2
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	b921      	cbnz	r1, 8006ab6 <_realloc_r+0x16>
 8006aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	f7ff b96d 	b.w	8005d90 <_malloc_r>
 8006ab6:	b92a      	cbnz	r2, 8006ac4 <_realloc_r+0x24>
 8006ab8:	f7ff f8f6 	bl	8005ca8 <_free_r>
 8006abc:	2400      	movs	r4, #0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac4:	f000 f841 	bl	8006b4a <_malloc_usable_size_r>
 8006ac8:	4285      	cmp	r5, r0
 8006aca:	4606      	mov	r6, r0
 8006acc:	d802      	bhi.n	8006ad4 <_realloc_r+0x34>
 8006ace:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ad2:	d8f4      	bhi.n	8006abe <_realloc_r+0x1e>
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7ff f95a 	bl	8005d90 <_malloc_r>
 8006adc:	4607      	mov	r7, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d0ec      	beq.n	8006abc <_realloc_r+0x1c>
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	462a      	mov	r2, r5
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	bf28      	it	cs
 8006aea:	4632      	movcs	r2, r6
 8006aec:	f7ff ff86 	bl	80069fc <memcpy>
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff f8d8 	bl	8005ca8 <_free_r>
 8006af8:	463c      	mov	r4, r7
 8006afa:	e7e0      	b.n	8006abe <_realloc_r+0x1e>

08006afc <__ascii_wctomb>:
 8006afc:	4603      	mov	r3, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	b141      	cbz	r1, 8006b14 <__ascii_wctomb+0x18>
 8006b02:	2aff      	cmp	r2, #255	@ 0xff
 8006b04:	d904      	bls.n	8006b10 <__ascii_wctomb+0x14>
 8006b06:	228a      	movs	r2, #138	@ 0x8a
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b0e:	4770      	bx	lr
 8006b10:	700a      	strb	r2, [r1, #0]
 8006b12:	2001      	movs	r0, #1
 8006b14:	4770      	bx	lr
	...

08006b18 <fiprintf>:
 8006b18:	b40e      	push	{r1, r2, r3}
 8006b1a:	b503      	push	{r0, r1, lr}
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <fiprintf+0x20>)
 8006b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b26:	6800      	ldr	r0, [r0, #0]
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	f000 f83d 	bl	8006ba8 <_vfiprintf_r>
 8006b2e:	b002      	add	sp, #8
 8006b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b34:	b003      	add	sp, #12
 8006b36:	4770      	bx	lr
 8006b38:	20000018 	.word	0x20000018

08006b3c <abort>:
 8006b3c:	b508      	push	{r3, lr}
 8006b3e:	2006      	movs	r0, #6
 8006b40:	f000 fa06 	bl	8006f50 <raise>
 8006b44:	2001      	movs	r0, #1
 8006b46:	f7fb f962 	bl	8001e0e <_exit>

08006b4a <_malloc_usable_size_r>:
 8006b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4e:	1f18      	subs	r0, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfbc      	itt	lt
 8006b54:	580b      	ldrlt	r3, [r1, r0]
 8006b56:	18c0      	addlt	r0, r0, r3
 8006b58:	4770      	bx	lr

08006b5a <__sfputc_r>:
 8006b5a:	6893      	ldr	r3, [r2, #8]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	b410      	push	{r4}
 8006b62:	6093      	str	r3, [r2, #8]
 8006b64:	da07      	bge.n	8006b76 <__sfputc_r+0x1c>
 8006b66:	6994      	ldr	r4, [r2, #24]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	db01      	blt.n	8006b70 <__sfputc_r+0x16>
 8006b6c:	290a      	cmp	r1, #10
 8006b6e:	d102      	bne.n	8006b76 <__sfputc_r+0x1c>
 8006b70:	bc10      	pop	{r4}
 8006b72:	f000 b931 	b.w	8006dd8 <__swbuf_r>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	7019      	strb	r1, [r3, #0]
 8006b7e:	4608      	mov	r0, r1
 8006b80:	bc10      	pop	{r4}
 8006b82:	4770      	bx	lr

08006b84 <__sfputs_r>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	4606      	mov	r6, r0
 8006b88:	460f      	mov	r7, r1
 8006b8a:	4614      	mov	r4, r2
 8006b8c:	18d5      	adds	r5, r2, r3
 8006b8e:	42ac      	cmp	r4, r5
 8006b90:	d101      	bne.n	8006b96 <__sfputs_r+0x12>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e007      	b.n	8006ba6 <__sfputs_r+0x22>
 8006b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9a:	463a      	mov	r2, r7
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f7ff ffdc 	bl	8006b5a <__sfputc_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d1f3      	bne.n	8006b8e <__sfputs_r+0xa>
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ba8 <_vfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	460d      	mov	r5, r1
 8006bae:	b09d      	sub	sp, #116	@ 0x74
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4698      	mov	r8, r3
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	b118      	cbz	r0, 8006bc0 <_vfiprintf_r+0x18>
 8006bb8:	6a03      	ldr	r3, [r0, #32]
 8006bba:	b90b      	cbnz	r3, 8006bc0 <_vfiprintf_r+0x18>
 8006bbc:	f7fe f908 	bl	8004dd0 <__sinit>
 8006bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d405      	bmi.n	8006bd2 <_vfiprintf_r+0x2a>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	059a      	lsls	r2, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_vfiprintf_r+0x2a>
 8006bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bce:	f7fe fa16 	bl	8004ffe <__retarget_lock_acquire_recursive>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	071b      	lsls	r3, r3, #28
 8006bd6:	d501      	bpl.n	8006bdc <_vfiprintf_r+0x34>
 8006bd8:	692b      	ldr	r3, [r5, #16]
 8006bda:	b99b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x5c>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4630      	mov	r0, r6
 8006be0:	f000 f938 	bl	8006e54 <__swsetup_r>
 8006be4:	b170      	cbz	r0, 8006c04 <_vfiprintf_r+0x5c>
 8006be6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006be8:	07dc      	lsls	r4, r3, #31
 8006bea:	d504      	bpl.n	8006bf6 <_vfiprintf_r+0x4e>
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bf0:	b01d      	add	sp, #116	@ 0x74
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d4f7      	bmi.n	8006bec <_vfiprintf_r+0x44>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bfe:	f7fe f9ff 	bl	8005000 <__retarget_lock_release_recursive>
 8006c02:	e7f3      	b.n	8006bec <_vfiprintf_r+0x44>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c12:	2330      	movs	r3, #48	@ 0x30
 8006c14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006dc4 <_vfiprintf_r+0x21c>
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c1c:	f04f 0901 	mov.w	r9, #1
 8006c20:	4623      	mov	r3, r4
 8006c22:	469a      	mov	sl, r3
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	b10a      	cbz	r2, 8006c2e <_vfiprintf_r+0x86>
 8006c2a:	2a25      	cmp	r2, #37	@ 0x25
 8006c2c:	d1f9      	bne.n	8006c22 <_vfiprintf_r+0x7a>
 8006c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c32:	d00b      	beq.n	8006c4c <_vfiprintf_r+0xa4>
 8006c34:	465b      	mov	r3, fp
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ffa2 	bl	8006b84 <__sfputs_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	f000 80a7 	beq.w	8006d94 <_vfiprintf_r+0x1ec>
 8006c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c48:	445a      	add	r2, fp
 8006c4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 809f 	beq.w	8006d94 <_vfiprintf_r+0x1ec>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c6e:	4654      	mov	r4, sl
 8006c70:	2205      	movs	r2, #5
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4853      	ldr	r0, [pc, #332]	@ (8006dc4 <_vfiprintf_r+0x21c>)
 8006c78:	f7f9 faaa 	bl	80001d0 <memchr>
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	b9d8      	cbnz	r0, 8006cb8 <_vfiprintf_r+0x110>
 8006c80:	06d1      	lsls	r1, r2, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2320      	movmi	r3, #32
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c8a:	0713      	lsls	r3, r2, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	232b      	movmi	r3, #43	@ 0x2b
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c9a:	d015      	beq.n	8006cc8 <_vfiprintf_r+0x120>
 8006c9c:	9a07      	ldr	r2, [sp, #28]
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f04f 0c0a 	mov.w	ip, #10
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cac:	3b30      	subs	r3, #48	@ 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d94b      	bls.n	8006d4a <_vfiprintf_r+0x1a2>
 8006cb2:	b1b0      	cbz	r0, 8006ce2 <_vfiprintf_r+0x13a>
 8006cb4:	9207      	str	r2, [sp, #28]
 8006cb6:	e014      	b.n	8006ce2 <_vfiprintf_r+0x13a>
 8006cb8:	eba0 0308 	sub.w	r3, r0, r8
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	e7d2      	b.n	8006c6e <_vfiprintf_r+0xc6>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d19      	adds	r1, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbb      	ittet	lt
 8006cd4:	425b      	neglt	r3, r3
 8006cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cda:	9307      	strge	r3, [sp, #28]
 8006cdc:	9307      	strlt	r3, [sp, #28]
 8006cde:	bfb8      	it	lt
 8006ce0:	9204      	strlt	r2, [sp, #16]
 8006ce2:	7823      	ldrb	r3, [r4, #0]
 8006ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ce6:	d10a      	bne.n	8006cfe <_vfiprintf_r+0x156>
 8006ce8:	7863      	ldrb	r3, [r4, #1]
 8006cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cec:	d132      	bne.n	8006d54 <_vfiprintf_r+0x1ac>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cfa:	3402      	adds	r4, #2
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006dc8 <_vfiprintf_r+0x220>
 8006d02:	7821      	ldrb	r1, [r4, #0]
 8006d04:	2203      	movs	r2, #3
 8006d06:	4650      	mov	r0, sl
 8006d08:	f7f9 fa62 	bl	80001d0 <memchr>
 8006d0c:	b138      	cbz	r0, 8006d1e <_vfiprintf_r+0x176>
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	eba0 000a 	sub.w	r0, r0, sl
 8006d14:	2240      	movs	r2, #64	@ 0x40
 8006d16:	4082      	lsls	r2, r0
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	3401      	adds	r4, #1
 8006d1c:	9304      	str	r3, [sp, #16]
 8006d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d22:	482a      	ldr	r0, [pc, #168]	@ (8006dcc <_vfiprintf_r+0x224>)
 8006d24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d28:	2206      	movs	r2, #6
 8006d2a:	f7f9 fa51 	bl	80001d0 <memchr>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d03f      	beq.n	8006db2 <_vfiprintf_r+0x20a>
 8006d32:	4b27      	ldr	r3, [pc, #156]	@ (8006dd0 <_vfiprintf_r+0x228>)
 8006d34:	bb1b      	cbnz	r3, 8006d7e <_vfiprintf_r+0x1d6>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	3307      	adds	r3, #7
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	3308      	adds	r3, #8
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d44:	443b      	add	r3, r7
 8006d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d48:	e76a      	b.n	8006c20 <_vfiprintf_r+0x78>
 8006d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d4e:	460c      	mov	r4, r1
 8006d50:	2001      	movs	r0, #1
 8006d52:	e7a8      	b.n	8006ca6 <_vfiprintf_r+0xfe>
 8006d54:	2300      	movs	r3, #0
 8006d56:	3401      	adds	r4, #1
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f04f 0c0a 	mov.w	ip, #10
 8006d60:	4620      	mov	r0, r4
 8006d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d66:	3a30      	subs	r2, #48	@ 0x30
 8006d68:	2a09      	cmp	r2, #9
 8006d6a:	d903      	bls.n	8006d74 <_vfiprintf_r+0x1cc>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0c6      	beq.n	8006cfe <_vfiprintf_r+0x156>
 8006d70:	9105      	str	r1, [sp, #20]
 8006d72:	e7c4      	b.n	8006cfe <_vfiprintf_r+0x156>
 8006d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d78:	4604      	mov	r4, r0
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e7f0      	b.n	8006d60 <_vfiprintf_r+0x1b8>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b13      	ldr	r3, [pc, #76]	@ (8006dd4 <_vfiprintf_r+0x22c>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7fd fbdb 	bl	8004544 <_printf_float>
 8006d8e:	4607      	mov	r7, r0
 8006d90:	1c78      	adds	r0, r7, #1
 8006d92:	d1d6      	bne.n	8006d42 <_vfiprintf_r+0x19a>
 8006d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_vfiprintf_r+0x1fe>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_vfiprintf_r+0x1fe>
 8006da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006da2:	f7fe f92d 	bl	8005000 <__retarget_lock_release_recursive>
 8006da6:	89ab      	ldrh	r3, [r5, #12]
 8006da8:	065b      	lsls	r3, r3, #25
 8006daa:	f53f af1f 	bmi.w	8006bec <_vfiprintf_r+0x44>
 8006dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006db0:	e71e      	b.n	8006bf0 <_vfiprintf_r+0x48>
 8006db2:	ab03      	add	r3, sp, #12
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	462a      	mov	r2, r5
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <_vfiprintf_r+0x22c>)
 8006dba:	a904      	add	r1, sp, #16
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7fd fe5b 	bl	8004a78 <_printf_i>
 8006dc2:	e7e4      	b.n	8006d8e <_vfiprintf_r+0x1e6>
 8006dc4:	080084f0 	.word	0x080084f0
 8006dc8:	080084f6 	.word	0x080084f6
 8006dcc:	080084fa 	.word	0x080084fa
 8006dd0:	08004545 	.word	0x08004545
 8006dd4:	08006b85 	.word	0x08006b85

08006dd8 <__swbuf_r>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	460e      	mov	r6, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	4605      	mov	r5, r0
 8006de0:	b118      	cbz	r0, 8006dea <__swbuf_r+0x12>
 8006de2:	6a03      	ldr	r3, [r0, #32]
 8006de4:	b90b      	cbnz	r3, 8006dea <__swbuf_r+0x12>
 8006de6:	f7fd fff3 	bl	8004dd0 <__sinit>
 8006dea:	69a3      	ldr	r3, [r4, #24]
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	d501      	bpl.n	8006df8 <__swbuf_r+0x20>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	b943      	cbnz	r3, 8006e0a <__swbuf_r+0x32>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f82a 	bl	8006e54 <__swsetup_r>
 8006e00:	b118      	cbz	r0, 8006e0a <__swbuf_r+0x32>
 8006e02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006e06:	4638      	mov	r0, r7
 8006e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	1a98      	subs	r0, r3, r2
 8006e10:	6963      	ldr	r3, [r4, #20]
 8006e12:	b2f6      	uxtb	r6, r6
 8006e14:	4283      	cmp	r3, r0
 8006e16:	4637      	mov	r7, r6
 8006e18:	dc05      	bgt.n	8006e26 <__swbuf_r+0x4e>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f7ff fd9b 	bl	8006958 <_fflush_r>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d1ed      	bne.n	8006e02 <__swbuf_r+0x2a>
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	701e      	strb	r6, [r3, #0]
 8006e34:	6962      	ldr	r2, [r4, #20]
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d004      	beq.n	8006e46 <__swbuf_r+0x6e>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	07db      	lsls	r3, r3, #31
 8006e40:	d5e1      	bpl.n	8006e06 <__swbuf_r+0x2e>
 8006e42:	2e0a      	cmp	r6, #10
 8006e44:	d1df      	bne.n	8006e06 <__swbuf_r+0x2e>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fd85 	bl	8006958 <_fflush_r>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d0d9      	beq.n	8006e06 <__swbuf_r+0x2e>
 8006e52:	e7d6      	b.n	8006e02 <__swbuf_r+0x2a>

08006e54 <__swsetup_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <__swsetup_r+0xa8>)
 8006e58:	4605      	mov	r5, r0
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	b118      	cbz	r0, 8006e68 <__swsetup_r+0x14>
 8006e60:	6a03      	ldr	r3, [r0, #32]
 8006e62:	b90b      	cbnz	r3, 8006e68 <__swsetup_r+0x14>
 8006e64:	f7fd ffb4 	bl	8004dd0 <__sinit>
 8006e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6c:	0719      	lsls	r1, r3, #28
 8006e6e:	d422      	bmi.n	8006eb6 <__swsetup_r+0x62>
 8006e70:	06da      	lsls	r2, r3, #27
 8006e72:	d407      	bmi.n	8006e84 <__swsetup_r+0x30>
 8006e74:	2209      	movs	r2, #9
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e82:	e033      	b.n	8006eec <__swsetup_r+0x98>
 8006e84:	0758      	lsls	r0, r3, #29
 8006e86:	d512      	bpl.n	8006eae <__swsetup_r+0x5a>
 8006e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8a:	b141      	cbz	r1, 8006e9e <__swsetup_r+0x4a>
 8006e8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <__swsetup_r+0x46>
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7fe ff07 	bl	8005ca8 <_free_r>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f043 0308 	orr.w	r3, r3, #8
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	b94b      	cbnz	r3, 8006ece <__swsetup_r+0x7a>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec4:	d003      	beq.n	8006ece <__swsetup_r+0x7a>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f883 	bl	8006fd4 <__smakebuf_r>
 8006ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed2:	f013 0201 	ands.w	r2, r3, #1
 8006ed6:	d00a      	beq.n	8006eee <__swsetup_r+0x9a>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	60a2      	str	r2, [r4, #8]
 8006edc:	6962      	ldr	r2, [r4, #20]
 8006ede:	4252      	negs	r2, r2
 8006ee0:	61a2      	str	r2, [r4, #24]
 8006ee2:	6922      	ldr	r2, [r4, #16]
 8006ee4:	b942      	cbnz	r2, 8006ef8 <__swsetup_r+0xa4>
 8006ee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eea:	d1c5      	bne.n	8006e78 <__swsetup_r+0x24>
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	0799      	lsls	r1, r3, #30
 8006ef0:	bf58      	it	pl
 8006ef2:	6962      	ldrpl	r2, [r4, #20]
 8006ef4:	60a2      	str	r2, [r4, #8]
 8006ef6:	e7f4      	b.n	8006ee2 <__swsetup_r+0x8e>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e7f7      	b.n	8006eec <__swsetup_r+0x98>
 8006efc:	20000018 	.word	0x20000018

08006f00 <_raise_r>:
 8006f00:	291f      	cmp	r1, #31
 8006f02:	b538      	push	{r3, r4, r5, lr}
 8006f04:	4605      	mov	r5, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	d904      	bls.n	8006f14 <_raise_r+0x14>
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f16:	b112      	cbz	r2, 8006f1e <_raise_r+0x1e>
 8006f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f1c:	b94b      	cbnz	r3, 8006f32 <_raise_r+0x32>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 f830 	bl	8006f84 <_getpid_r>
 8006f24:	4622      	mov	r2, r4
 8006f26:	4601      	mov	r1, r0
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2e:	f000 b817 	b.w	8006f60 <_kill_r>
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d00a      	beq.n	8006f4c <_raise_r+0x4c>
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	d103      	bne.n	8006f42 <_raise_r+0x42>
 8006f3a:	2316      	movs	r3, #22
 8006f3c:	6003      	str	r3, [r0, #0]
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7e7      	b.n	8006f12 <_raise_r+0x12>
 8006f42:	2100      	movs	r1, #0
 8006f44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4798      	blx	r3
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	e7e0      	b.n	8006f12 <_raise_r+0x12>

08006f50 <raise>:
 8006f50:	4b02      	ldr	r3, [pc, #8]	@ (8006f5c <raise+0xc>)
 8006f52:	4601      	mov	r1, r0
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f7ff bfd3 	b.w	8006f00 <_raise_r>
 8006f5a:	bf00      	nop
 8006f5c:	20000018 	.word	0x20000018

08006f60 <_kill_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_kill_r+0x20>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	f7fa ff3e 	bl	8001dee <_kill>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d102      	bne.n	8006f7c <_kill_r+0x1c>
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	b103      	cbz	r3, 8006f7c <_kill_r+0x1c>
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000490 	.word	0x20000490

08006f84 <_getpid_r>:
 8006f84:	f7fa bf2c 	b.w	8001de0 <_getpid>

08006f88 <__swhatbuf_r>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	2900      	cmp	r1, #0
 8006f92:	b096      	sub	sp, #88	@ 0x58
 8006f94:	4615      	mov	r5, r2
 8006f96:	461e      	mov	r6, r3
 8006f98:	da0d      	bge.n	8006fb6 <__swhatbuf_r+0x2e>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2340      	movne	r3, #64	@ 0x40
 8006fa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fac:	2000      	movs	r0, #0
 8006fae:	6031      	str	r1, [r6, #0]
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	b016      	add	sp, #88	@ 0x58
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	466a      	mov	r2, sp
 8006fb8:	f000 f848 	bl	800704c <_fstat_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	dbec      	blt.n	8006f9a <__swhatbuf_r+0x12>
 8006fc0:	9901      	ldr	r1, [sp, #4]
 8006fc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fca:	4259      	negs	r1, r3
 8006fcc:	4159      	adcs	r1, r3
 8006fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd2:	e7eb      	b.n	8006fac <__swhatbuf_r+0x24>

08006fd4 <__smakebuf_r>:
 8006fd4:	898b      	ldrh	r3, [r1, #12]
 8006fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd8:	079d      	lsls	r5, r3, #30
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	d507      	bpl.n	8006ff0 <__smakebuf_r+0x1c>
 8006fe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	2301      	movs	r3, #1
 8006fea:	6163      	str	r3, [r4, #20]
 8006fec:	b003      	add	sp, #12
 8006fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff0:	ab01      	add	r3, sp, #4
 8006ff2:	466a      	mov	r2, sp
 8006ff4:	f7ff ffc8 	bl	8006f88 <__swhatbuf_r>
 8006ff8:	9f00      	ldr	r7, [sp, #0]
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7fe fec6 	bl	8005d90 <_malloc_r>
 8007004:	b948      	cbnz	r0, 800701a <__smakebuf_r+0x46>
 8007006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700a:	059a      	lsls	r2, r3, #22
 800700c:	d4ee      	bmi.n	8006fec <__smakebuf_r+0x18>
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	f043 0302 	orr.w	r3, r3, #2
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	e7e2      	b.n	8006fe0 <__smakebuf_r+0xc>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	6020      	str	r0, [r4, #0]
 800701e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	9b01      	ldr	r3, [sp, #4]
 8007026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800702a:	b15b      	cbz	r3, 8007044 <__smakebuf_r+0x70>
 800702c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007030:	4630      	mov	r0, r6
 8007032:	f000 f81d 	bl	8007070 <_isatty_r>
 8007036:	b128      	cbz	r0, 8007044 <__smakebuf_r+0x70>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	431d      	orrs	r5, r3
 8007048:	81a5      	strh	r5, [r4, #12]
 800704a:	e7cf      	b.n	8006fec <__smakebuf_r+0x18>

0800704c <_fstat_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d07      	ldr	r5, [pc, #28]	@ (800706c <_fstat_r+0x20>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	f7fa ff27 	bl	8001eac <_fstat>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d102      	bne.n	8007068 <_fstat_r+0x1c>
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	b103      	cbz	r3, 8007068 <_fstat_r+0x1c>
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	20000490 	.word	0x20000490

08007070 <_isatty_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	@ (800708c <_isatty_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7fa ff25 	bl	8001eca <_isatty>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_isatty_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_isatty_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000490 	.word	0x20000490

08007090 <log>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	4604      	mov	r4, r0
 8007094:	460d      	mov	r5, r1
 8007096:	f000 f8a3 	bl	80071e0 <__ieee754_log>
 800709a:	4622      	mov	r2, r4
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	462b      	mov	r3, r5
 80070a2:	4620      	mov	r0, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	f7f9 fd41 	bl	8000b2c <__aeabi_dcmpun>
 80070aa:	b998      	cbnz	r0, 80070d4 <log+0x44>
 80070ac:	2200      	movs	r2, #0
 80070ae:	2300      	movs	r3, #0
 80070b0:	4620      	mov	r0, r4
 80070b2:	4629      	mov	r1, r5
 80070b4:	f7f9 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 80070b8:	b960      	cbnz	r0, 80070d4 <log+0x44>
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c6:	b140      	cbz	r0, 80070da <log+0x4a>
 80070c8:	f7fd ff6e 	bl	8004fa8 <__errno>
 80070cc:	4f07      	ldr	r7, [pc, #28]	@ (80070ec <log+0x5c>)
 80070ce:	2322      	movs	r3, #34	@ 0x22
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	2600      	movs	r6, #0
 80070d4:	4630      	mov	r0, r6
 80070d6:	4639      	mov	r1, r7
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070da:	f7fd ff65 	bl	8004fa8 <__errno>
 80070de:	2321      	movs	r3, #33	@ 0x21
 80070e0:	6003      	str	r3, [r0, #0]
 80070e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070e6:	4802      	ldr	r0, [pc, #8]	@ (80070f0 <log+0x60>)
 80070e8:	f000 b872 	b.w	80071d0 <nan>
 80070ec:	fff00000 	.word	0xfff00000
 80070f0:	08008546 	.word	0x08008546

080070f4 <pow>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	f000 fa22 	bl	8007548 <__ieee754_pow>
 8007104:	4622      	mov	r2, r4
 8007106:	4606      	mov	r6, r0
 8007108:	460f      	mov	r7, r1
 800710a:	462b      	mov	r3, r5
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 fd0c 	bl	8000b2c <__aeabi_dcmpun>
 8007114:	bbc8      	cbnz	r0, 800718a <pow+0x96>
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	4640      	mov	r0, r8
 800711c:	4649      	mov	r1, r9
 800711e:	f7f9 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007122:	b1b8      	cbz	r0, 8007154 <pow+0x60>
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007130:	2800      	cmp	r0, #0
 8007132:	d141      	bne.n	80071b8 <pow+0xc4>
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f000 f844 	bl	80071c4 <finite>
 800713c:	b328      	cbz	r0, 800718a <pow+0x96>
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	4620      	mov	r0, r4
 8007144:	4629      	mov	r1, r5
 8007146:	f7f9 fcc9 	bl	8000adc <__aeabi_dcmplt>
 800714a:	b1f0      	cbz	r0, 800718a <pow+0x96>
 800714c:	f7fd ff2c 	bl	8004fa8 <__errno>
 8007150:	2322      	movs	r3, #34	@ 0x22
 8007152:	e019      	b.n	8007188 <pow+0x94>
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f000 f834 	bl	80071c4 <finite>
 800715c:	b9c8      	cbnz	r0, 8007192 <pow+0x9e>
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f000 f82f 	bl	80071c4 <finite>
 8007166:	b1a0      	cbz	r0, 8007192 <pow+0x9e>
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f000 f82a 	bl	80071c4 <finite>
 8007170:	b178      	cbz	r0, 8007192 <pow+0x9e>
 8007172:	4632      	mov	r2, r6
 8007174:	463b      	mov	r3, r7
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fcd7 	bl	8000b2c <__aeabi_dcmpun>
 800717e:	2800      	cmp	r0, #0
 8007180:	d0e4      	beq.n	800714c <pow+0x58>
 8007182:	f7fd ff11 	bl	8004fa8 <__errno>
 8007186:	2321      	movs	r3, #33	@ 0x21
 8007188:	6003      	str	r3, [r0, #0]
 800718a:	4630      	mov	r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	2200      	movs	r2, #0
 8007194:	2300      	movs	r3, #0
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	f7f9 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d0f3      	beq.n	800718a <pow+0x96>
 80071a2:	4640      	mov	r0, r8
 80071a4:	4649      	mov	r1, r9
 80071a6:	f000 f80d 	bl	80071c4 <finite>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0ed      	beq.n	800718a <pow+0x96>
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f000 f807 	bl	80071c4 <finite>
 80071b6:	e7c8      	b.n	800714a <pow+0x56>
 80071b8:	4f01      	ldr	r7, [pc, #4]	@ (80071c0 <pow+0xcc>)
 80071ba:	2600      	movs	r6, #0
 80071bc:	e7e5      	b.n	800718a <pow+0x96>
 80071be:	bf00      	nop
 80071c0:	3ff00000 	.word	0x3ff00000

080071c4 <finite>:
 80071c4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80071c8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80071cc:	0fc0      	lsrs	r0, r0, #31
 80071ce:	4770      	bx	lr

080071d0 <nan>:
 80071d0:	4901      	ldr	r1, [pc, #4]	@ (80071d8 <nan+0x8>)
 80071d2:	2000      	movs	r0, #0
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	7ff80000 	.word	0x7ff80000
 80071dc:	00000000 	.word	0x00000000

080071e0 <__ieee754_log>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80071e8:	b087      	sub	sp, #28
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	460d      	mov	r5, r1
 80071f0:	da24      	bge.n	800723c <__ieee754_log+0x5c>
 80071f2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80071f6:	4304      	orrs	r4, r0
 80071f8:	d108      	bne.n	800720c <__ieee754_log+0x2c>
 80071fa:	49cd      	ldr	r1, [pc, #820]	@ (8007530 <__ieee754_log+0x350>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	2300      	movs	r3, #0
 8007200:	2000      	movs	r0, #0
 8007202:	f7f9 fb23 	bl	800084c <__aeabi_ddiv>
 8007206:	b007      	add	sp, #28
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	2900      	cmp	r1, #0
 800720e:	da04      	bge.n	800721a <__ieee754_log+0x3a>
 8007210:	f7f9 f83a 	bl	8000288 <__aeabi_dsub>
 8007214:	2200      	movs	r2, #0
 8007216:	2300      	movs	r3, #0
 8007218:	e7f3      	b.n	8007202 <__ieee754_log+0x22>
 800721a:	4bc6      	ldr	r3, [pc, #792]	@ (8007534 <__ieee754_log+0x354>)
 800721c:	2200      	movs	r2, #0
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	460b      	mov	r3, r1
 8007224:	460d      	mov	r5, r1
 8007226:	4602      	mov	r2, r0
 8007228:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800722c:	48c2      	ldr	r0, [pc, #776]	@ (8007538 <__ieee754_log+0x358>)
 800722e:	4285      	cmp	r5, r0
 8007230:	dd06      	ble.n	8007240 <__ieee754_log+0x60>
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	e7e4      	b.n	8007206 <__ieee754_log+0x26>
 800723c:	2100      	movs	r1, #0
 800723e:	e7f5      	b.n	800722c <__ieee754_log+0x4c>
 8007240:	152c      	asrs	r4, r5, #20
 8007242:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007246:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800724a:	440c      	add	r4, r1
 800724c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8007250:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8007254:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8007258:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800725c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8007260:	ea41 0305 	orr.w	r3, r1, r5
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	2200      	movs	r2, #0
 800726a:	4bb4      	ldr	r3, [pc, #720]	@ (800753c <__ieee754_log+0x35c>)
 800726c:	f7f9 f80c 	bl	8000288 <__aeabi_dsub>
 8007270:	1cab      	adds	r3, r5, #2
 8007272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007276:	2b02      	cmp	r3, #2
 8007278:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800727c:	4682      	mov	sl, r0
 800727e:	468b      	mov	fp, r1
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	dc53      	bgt.n	800732e <__ieee754_log+0x14e>
 8007286:	2300      	movs	r3, #0
 8007288:	f7f9 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800728c:	b1d0      	cbz	r0, 80072c4 <__ieee754_log+0xe4>
 800728e:	2c00      	cmp	r4, #0
 8007290:	f000 8120 	beq.w	80074d4 <__ieee754_log+0x2f4>
 8007294:	4620      	mov	r0, r4
 8007296:	f7f9 f945 	bl	8000524 <__aeabi_i2d>
 800729a:	a391      	add	r3, pc, #580	@ (adr r3, 80074e0 <__ieee754_log+0x300>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	4606      	mov	r6, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	f7f9 f9a8 	bl	80005f8 <__aeabi_dmul>
 80072a8:	a38f      	add	r3, pc, #572	@ (adr r3, 80074e8 <__ieee754_log+0x308>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	e7b8      	b.n	8007236 <__ieee754_log+0x56>
 80072c4:	a38a      	add	r3, pc, #552	@ (adr r3, 80074f0 <__ieee754_log+0x310>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	4650      	mov	r0, sl
 80072cc:	4659      	mov	r1, fp
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	2000      	movs	r0, #0
 80072d8:	4999      	ldr	r1, [pc, #612]	@ (8007540 <__ieee754_log+0x360>)
 80072da:	f7f8 ffd5 	bl	8000288 <__aeabi_dsub>
 80072de:	4652      	mov	r2, sl
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	465b      	mov	r3, fp
 80072e6:	4650      	mov	r0, sl
 80072e8:	4659      	mov	r1, fp
 80072ea:	f7f9 f985 	bl	80005f8 <__aeabi_dmul>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4630      	mov	r0, r6
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	b914      	cbnz	r4, 8007306 <__ieee754_log+0x126>
 8007300:	4632      	mov	r2, r6
 8007302:	463b      	mov	r3, r7
 8007304:	e0a0      	b.n	8007448 <__ieee754_log+0x268>
 8007306:	4620      	mov	r0, r4
 8007308:	f7f9 f90c 	bl	8000524 <__aeabi_i2d>
 800730c:	a374      	add	r3, pc, #464	@ (adr r3, 80074e0 <__ieee754_log+0x300>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	f7f9 f96f 	bl	80005f8 <__aeabi_dmul>
 800731a:	a373      	add	r3, pc, #460	@ (adr r3, 80074e8 <__ieee754_log+0x308>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f9 f966 	bl	80005f8 <__aeabi_dmul>
 800732c:	e0a5      	b.n	800747a <__ieee754_log+0x29a>
 800732e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007332:	f7f8 ffab 	bl	800028c <__adddf3>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4650      	mov	r0, sl
 800733c:	4659      	mov	r1, fp
 800733e:	f7f9 fa85 	bl	800084c <__aeabi_ddiv>
 8007342:	e9cd 0100 	strd	r0, r1, [sp]
 8007346:	4620      	mov	r0, r4
 8007348:	f7f9 f8ec 	bl	8000524 <__aeabi_i2d>
 800734c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007354:	4610      	mov	r0, r2
 8007356:	4619      	mov	r1, r3
 8007358:	f7f9 f94e 	bl	80005f8 <__aeabi_dmul>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007364:	f7f9 f948 	bl	80005f8 <__aeabi_dmul>
 8007368:	a363      	add	r3, pc, #396	@ (adr r3, 80074f8 <__ieee754_log+0x318>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	4680      	mov	r8, r0
 8007370:	4689      	mov	r9, r1
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	a362      	add	r3, pc, #392	@ (adr r3, 8007500 <__ieee754_log+0x320>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f8 ff86 	bl	800028c <__adddf3>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f9 f938 	bl	80005f8 <__aeabi_dmul>
 8007388:	a35f      	add	r3, pc, #380	@ (adr r3, 8007508 <__ieee754_log+0x328>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f8 ff7d 	bl	800028c <__adddf3>
 8007392:	4642      	mov	r2, r8
 8007394:	464b      	mov	r3, r9
 8007396:	f7f9 f92f 	bl	80005f8 <__aeabi_dmul>
 800739a:	a35d      	add	r3, pc, #372	@ (adr r3, 8007510 <__ieee754_log+0x330>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f8 ff74 	bl	800028c <__adddf3>
 80073a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a8:	f7f9 f926 	bl	80005f8 <__aeabi_dmul>
 80073ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8007518 <__ieee754_log+0x338>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	a358      	add	r3, pc, #352	@ (adr r3, 8007520 <__ieee754_log+0x340>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f7f8 ff62 	bl	800028c <__adddf3>
 80073c8:	4642      	mov	r2, r8
 80073ca:	464b      	mov	r3, r9
 80073cc:	f7f9 f914 	bl	80005f8 <__aeabi_dmul>
 80073d0:	a355      	add	r3, pc, #340	@ (adr r3, 8007528 <__ieee754_log+0x348>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	f7f8 ff59 	bl	800028c <__adddf3>
 80073da:	4642      	mov	r2, r8
 80073dc:	464b      	mov	r3, r9
 80073de:	f7f9 f90b 	bl	80005f8 <__aeabi_dmul>
 80073e2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80073ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f2:	f7f8 ff4b 	bl	800028c <__adddf3>
 80073f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80073fa:	3551      	adds	r5, #81	@ 0x51
 80073fc:	4335      	orrs	r5, r6
 80073fe:	2d00      	cmp	r5, #0
 8007400:	4680      	mov	r8, r0
 8007402:	4689      	mov	r9, r1
 8007404:	dd48      	ble.n	8007498 <__ieee754_log+0x2b8>
 8007406:	4b4e      	ldr	r3, [pc, #312]	@ (8007540 <__ieee754_log+0x360>)
 8007408:	2200      	movs	r2, #0
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f9 f8f3 	bl	80005f8 <__aeabi_dmul>
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	f7f9 f8ef 	bl	80005f8 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4606      	mov	r6, r0
 8007420:	460f      	mov	r7, r1
 8007422:	4640      	mov	r0, r8
 8007424:	4649      	mov	r1, r9
 8007426:	f7f8 ff31 	bl	800028c <__adddf3>
 800742a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742e:	f7f9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8007432:	4680      	mov	r8, r0
 8007434:	4689      	mov	r9, r1
 8007436:	b964      	cbnz	r4, 8007452 <__ieee754_log+0x272>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f7f8 ff22 	bl	8000288 <__aeabi_dsub>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4650      	mov	r0, sl
 800744a:	4659      	mov	r1, fp
 800744c:	f7f8 ff1c 	bl	8000288 <__aeabi_dsub>
 8007450:	e6d9      	b.n	8007206 <__ieee754_log+0x26>
 8007452:	a323      	add	r3, pc, #140	@ (adr r3, 80074e0 <__ieee754_log+0x300>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745c:	f7f9 f8cc 	bl	80005f8 <__aeabi_dmul>
 8007460:	a321      	add	r3, pc, #132	@ (adr r3, 80074e8 <__ieee754_log+0x308>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746e:	f7f9 f8c3 	bl	80005f8 <__aeabi_dmul>
 8007472:	4642      	mov	r2, r8
 8007474:	464b      	mov	r3, r9
 8007476:	f7f8 ff09 	bl	800028c <__adddf3>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4630      	mov	r0, r6
 8007480:	4639      	mov	r1, r7
 8007482:	f7f8 ff01 	bl	8000288 <__aeabi_dsub>
 8007486:	4652      	mov	r2, sl
 8007488:	465b      	mov	r3, fp
 800748a:	f7f8 fefd 	bl	8000288 <__aeabi_dsub>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4620      	mov	r0, r4
 8007494:	4629      	mov	r1, r5
 8007496:	e7d9      	b.n	800744c <__ieee754_log+0x26c>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4650      	mov	r0, sl
 800749e:	4659      	mov	r1, fp
 80074a0:	f7f8 fef2 	bl	8000288 <__aeabi_dsub>
 80074a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a8:	f7f9 f8a6 	bl	80005f8 <__aeabi_dmul>
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	2c00      	cmp	r4, #0
 80074b2:	f43f af25 	beq.w	8007300 <__ieee754_log+0x120>
 80074b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80074e0 <__ieee754_log+0x300>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c0:	f7f9 f89a 	bl	80005f8 <__aeabi_dmul>
 80074c4:	a308      	add	r3, pc, #32	@ (adr r3, 80074e8 <__ieee754_log+0x308>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	4604      	mov	r4, r0
 80074cc:	460d      	mov	r5, r1
 80074ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d2:	e729      	b.n	8007328 <__ieee754_log+0x148>
 80074d4:	2000      	movs	r0, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	e695      	b.n	8007206 <__ieee754_log+0x26>
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w
 80074e0:	fee00000 	.word	0xfee00000
 80074e4:	3fe62e42 	.word	0x3fe62e42
 80074e8:	35793c76 	.word	0x35793c76
 80074ec:	3dea39ef 	.word	0x3dea39ef
 80074f0:	55555555 	.word	0x55555555
 80074f4:	3fd55555 	.word	0x3fd55555
 80074f8:	df3e5244 	.word	0xdf3e5244
 80074fc:	3fc2f112 	.word	0x3fc2f112
 8007500:	96cb03de 	.word	0x96cb03de
 8007504:	3fc74664 	.word	0x3fc74664
 8007508:	94229359 	.word	0x94229359
 800750c:	3fd24924 	.word	0x3fd24924
 8007510:	55555593 	.word	0x55555593
 8007514:	3fe55555 	.word	0x3fe55555
 8007518:	d078c69f 	.word	0xd078c69f
 800751c:	3fc39a09 	.word	0x3fc39a09
 8007520:	1d8e78af 	.word	0x1d8e78af
 8007524:	3fcc71c5 	.word	0x3fcc71c5
 8007528:	9997fa04 	.word	0x9997fa04
 800752c:	3fd99999 	.word	0x3fd99999
 8007530:	c3500000 	.word	0xc3500000
 8007534:	43500000 	.word	0x43500000
 8007538:	7fefffff 	.word	0x7fefffff
 800753c:	3ff00000 	.word	0x3ff00000
 8007540:	3fe00000 	.word	0x3fe00000
 8007544:	00000000 	.word	0x00000000

08007548 <__ieee754_pow>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	b091      	sub	sp, #68	@ 0x44
 800754e:	e9cd 2300 	strd	r2, r3, [sp]
 8007552:	468b      	mov	fp, r1
 8007554:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007558:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800755c:	4682      	mov	sl, r0
 800755e:	ea57 0001 	orrs.w	r0, r7, r1
 8007562:	d112      	bne.n	800758a <__ieee754_pow+0x42>
 8007564:	4653      	mov	r3, sl
 8007566:	18db      	adds	r3, r3, r3
 8007568:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800756c:	4152      	adcs	r2, r2
 800756e:	4298      	cmp	r0, r3
 8007570:	4b92      	ldr	r3, [pc, #584]	@ (80077bc <__ieee754_pow+0x274>)
 8007572:	4193      	sbcs	r3, r2
 8007574:	f080 84ce 	bcs.w	8007f14 <__ieee754_pow+0x9cc>
 8007578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800757c:	4650      	mov	r0, sl
 800757e:	4659      	mov	r1, fp
 8007580:	f7f8 fe84 	bl	800028c <__adddf3>
 8007584:	b011      	add	sp, #68	@ 0x44
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	4b8d      	ldr	r3, [pc, #564]	@ (80077c0 <__ieee754_pow+0x278>)
 800758c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007590:	429e      	cmp	r6, r3
 8007592:	465d      	mov	r5, fp
 8007594:	46d1      	mov	r9, sl
 8007596:	d807      	bhi.n	80075a8 <__ieee754_pow+0x60>
 8007598:	d102      	bne.n	80075a0 <__ieee754_pow+0x58>
 800759a:	f1ba 0f00 	cmp.w	sl, #0
 800759e:	d1eb      	bne.n	8007578 <__ieee754_pow+0x30>
 80075a0:	429f      	cmp	r7, r3
 80075a2:	d801      	bhi.n	80075a8 <__ieee754_pow+0x60>
 80075a4:	d10f      	bne.n	80075c6 <__ieee754_pow+0x7e>
 80075a6:	b171      	cbz	r1, 80075c6 <__ieee754_pow+0x7e>
 80075a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80075ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80075b0:	ea55 0509 	orrs.w	r5, r5, r9
 80075b4:	d1e0      	bne.n	8007578 <__ieee754_pow+0x30>
 80075b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80075ba:	18db      	adds	r3, r3, r3
 80075bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80075c0:	4152      	adcs	r2, r2
 80075c2:	429d      	cmp	r5, r3
 80075c4:	e7d4      	b.n	8007570 <__ieee754_pow+0x28>
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	4633      	mov	r3, r6
 80075ca:	da39      	bge.n	8007640 <__ieee754_pow+0xf8>
 80075cc:	4a7d      	ldr	r2, [pc, #500]	@ (80077c4 <__ieee754_pow+0x27c>)
 80075ce:	4297      	cmp	r7, r2
 80075d0:	d84e      	bhi.n	8007670 <__ieee754_pow+0x128>
 80075d2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80075d6:	4297      	cmp	r7, r2
 80075d8:	f240 84ab 	bls.w	8007f32 <__ieee754_pow+0x9ea>
 80075dc:	153a      	asrs	r2, r7, #20
 80075de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80075e2:	2a14      	cmp	r2, #20
 80075e4:	dd0f      	ble.n	8007606 <__ieee754_pow+0xbe>
 80075e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80075ea:	fa21 f402 	lsr.w	r4, r1, r2
 80075ee:	fa04 f202 	lsl.w	r2, r4, r2
 80075f2:	428a      	cmp	r2, r1
 80075f4:	f040 849d 	bne.w	8007f32 <__ieee754_pow+0x9ea>
 80075f8:	f004 0401 	and.w	r4, r4, #1
 80075fc:	f1c4 0402 	rsb	r4, r4, #2
 8007600:	2900      	cmp	r1, #0
 8007602:	d15a      	bne.n	80076ba <__ieee754_pow+0x172>
 8007604:	e00e      	b.n	8007624 <__ieee754_pow+0xdc>
 8007606:	2900      	cmp	r1, #0
 8007608:	d156      	bne.n	80076b8 <__ieee754_pow+0x170>
 800760a:	f1c2 0214 	rsb	r2, r2, #20
 800760e:	fa47 f402 	asr.w	r4, r7, r2
 8007612:	fa04 f202 	lsl.w	r2, r4, r2
 8007616:	42ba      	cmp	r2, r7
 8007618:	f040 8488 	bne.w	8007f2c <__ieee754_pow+0x9e4>
 800761c:	f004 0401 	and.w	r4, r4, #1
 8007620:	f1c4 0402 	rsb	r4, r4, #2
 8007624:	4a68      	ldr	r2, [pc, #416]	@ (80077c8 <__ieee754_pow+0x280>)
 8007626:	4297      	cmp	r7, r2
 8007628:	d130      	bne.n	800768c <__ieee754_pow+0x144>
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	f280 8479 	bge.w	8007f24 <__ieee754_pow+0x9dc>
 8007632:	4965      	ldr	r1, [pc, #404]	@ (80077c8 <__ieee754_pow+0x280>)
 8007634:	4652      	mov	r2, sl
 8007636:	465b      	mov	r3, fp
 8007638:	2000      	movs	r0, #0
 800763a:	f7f9 f907 	bl	800084c <__aeabi_ddiv>
 800763e:	e7a1      	b.n	8007584 <__ieee754_pow+0x3c>
 8007640:	2400      	movs	r4, #0
 8007642:	2900      	cmp	r1, #0
 8007644:	d139      	bne.n	80076ba <__ieee754_pow+0x172>
 8007646:	4a5e      	ldr	r2, [pc, #376]	@ (80077c0 <__ieee754_pow+0x278>)
 8007648:	4297      	cmp	r7, r2
 800764a:	d1eb      	bne.n	8007624 <__ieee754_pow+0xdc>
 800764c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007650:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007654:	ea53 0309 	orrs.w	r3, r3, r9
 8007658:	f000 845c 	beq.w	8007f14 <__ieee754_pow+0x9cc>
 800765c:	4b5b      	ldr	r3, [pc, #364]	@ (80077cc <__ieee754_pow+0x284>)
 800765e:	429e      	cmp	r6, r3
 8007660:	d908      	bls.n	8007674 <__ieee754_pow+0x12c>
 8007662:	f1b8 0f00 	cmp.w	r8, #0
 8007666:	f2c0 8459 	blt.w	8007f1c <__ieee754_pow+0x9d4>
 800766a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766e:	e789      	b.n	8007584 <__ieee754_pow+0x3c>
 8007670:	2402      	movs	r4, #2
 8007672:	e7e6      	b.n	8007642 <__ieee754_pow+0xfa>
 8007674:	f1b8 0f00 	cmp.w	r8, #0
 8007678:	f04f 0000 	mov.w	r0, #0
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	da80      	bge.n	8007584 <__ieee754_pow+0x3c>
 8007682:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007686:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800768a:	e77b      	b.n	8007584 <__ieee754_pow+0x3c>
 800768c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007690:	d106      	bne.n	80076a0 <__ieee754_pow+0x158>
 8007692:	4652      	mov	r2, sl
 8007694:	465b      	mov	r3, fp
 8007696:	4650      	mov	r0, sl
 8007698:	4659      	mov	r1, fp
 800769a:	f7f8 ffad 	bl	80005f8 <__aeabi_dmul>
 800769e:	e771      	b.n	8007584 <__ieee754_pow+0x3c>
 80076a0:	4a4b      	ldr	r2, [pc, #300]	@ (80077d0 <__ieee754_pow+0x288>)
 80076a2:	4590      	cmp	r8, r2
 80076a4:	d109      	bne.n	80076ba <__ieee754_pow+0x172>
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	db07      	blt.n	80076ba <__ieee754_pow+0x172>
 80076aa:	4650      	mov	r0, sl
 80076ac:	4659      	mov	r1, fp
 80076ae:	b011      	add	sp, #68	@ 0x44
 80076b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	f000 bd12 	b.w	80080dc <__ieee754_sqrt>
 80076b8:	2400      	movs	r4, #0
 80076ba:	4650      	mov	r0, sl
 80076bc:	4659      	mov	r1, fp
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	f000 fc6a 	bl	8007f98 <fabs>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	f1b9 0f00 	cmp.w	r9, #0
 80076ca:	d127      	bne.n	800771c <__ieee754_pow+0x1d4>
 80076cc:	4a3e      	ldr	r2, [pc, #248]	@ (80077c8 <__ieee754_pow+0x280>)
 80076ce:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80076d2:	4594      	cmp	ip, r2
 80076d4:	d000      	beq.n	80076d8 <__ieee754_pow+0x190>
 80076d6:	bb0e      	cbnz	r6, 800771c <__ieee754_pow+0x1d4>
 80076d8:	f1b8 0f00 	cmp.w	r8, #0
 80076dc:	da05      	bge.n	80076ea <__ieee754_pow+0x1a2>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	2000      	movs	r0, #0
 80076e4:	4938      	ldr	r1, [pc, #224]	@ (80077c8 <__ieee754_pow+0x280>)
 80076e6:	f7f9 f8b1 	bl	800084c <__aeabi_ddiv>
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	f6bf af4a 	bge.w	8007584 <__ieee754_pow+0x3c>
 80076f0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80076f4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80076f8:	4326      	orrs	r6, r4
 80076fa:	d108      	bne.n	800770e <__ieee754_pow+0x1c6>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f8 fdc0 	bl	8000288 <__aeabi_dsub>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	e795      	b.n	800763a <__ieee754_pow+0xf2>
 800770e:	2c01      	cmp	r4, #1
 8007710:	f47f af38 	bne.w	8007584 <__ieee754_pow+0x3c>
 8007714:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007718:	4619      	mov	r1, r3
 800771a:	e733      	b.n	8007584 <__ieee754_pow+0x3c>
 800771c:	0fea      	lsrs	r2, r5, #31
 800771e:	3a01      	subs	r2, #1
 8007720:	ea52 0c04 	orrs.w	ip, r2, r4
 8007724:	d102      	bne.n	800772c <__ieee754_pow+0x1e4>
 8007726:	4652      	mov	r2, sl
 8007728:	465b      	mov	r3, fp
 800772a:	e7e9      	b.n	8007700 <__ieee754_pow+0x1b8>
 800772c:	3c01      	subs	r4, #1
 800772e:	4314      	orrs	r4, r2
 8007730:	bf14      	ite	ne
 8007732:	f8df a094 	ldrne.w	sl, [pc, #148]	@ 80077c8 <__ieee754_pow+0x280>
 8007736:	f8df a09c 	ldreq.w	sl, [pc, #156]	@ 80077d4 <__ieee754_pow+0x28c>
 800773a:	f04f 0900 	mov.w	r9, #0
 800773e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007742:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8007746:	f240 8107 	bls.w	8007958 <__ieee754_pow+0x410>
 800774a:	4b23      	ldr	r3, [pc, #140]	@ (80077d8 <__ieee754_pow+0x290>)
 800774c:	429f      	cmp	r7, r3
 800774e:	4b1f      	ldr	r3, [pc, #124]	@ (80077cc <__ieee754_pow+0x284>)
 8007750:	d913      	bls.n	800777a <__ieee754_pow+0x232>
 8007752:	429e      	cmp	r6, r3
 8007754:	d808      	bhi.n	8007768 <__ieee754_pow+0x220>
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	da08      	bge.n	800776e <__ieee754_pow+0x226>
 800775c:	2000      	movs	r0, #0
 800775e:	b011      	add	sp, #68	@ 0x44
 8007760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	f000 bcb4 	b.w	80080d0 <__math_oflow>
 8007768:	f1b8 0f00 	cmp.w	r8, #0
 800776c:	dcf6      	bgt.n	800775c <__ieee754_pow+0x214>
 800776e:	2000      	movs	r0, #0
 8007770:	b011      	add	sp, #68	@ 0x44
 8007772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007776:	f000 bca6 	b.w	80080c6 <__math_uflow>
 800777a:	429e      	cmp	r6, r3
 800777c:	d20c      	bcs.n	8007798 <__ieee754_pow+0x250>
 800777e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	f7f9 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800778a:	3800      	subs	r0, #0
 800778c:	bf18      	it	ne
 800778e:	2001      	movne	r0, #1
 8007790:	f1b8 0f00 	cmp.w	r8, #0
 8007794:	daec      	bge.n	8007770 <__ieee754_pow+0x228>
 8007796:	e7e2      	b.n	800775e <__ieee754_pow+0x216>
 8007798:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <__ieee754_pow+0x280>)
 800779a:	429e      	cmp	r6, r3
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	d91c      	bls.n	80077dc <__ieee754_pow+0x294>
 80077a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a6:	2300      	movs	r3, #0
 80077a8:	f7f9 f998 	bl	8000adc <__aeabi_dcmplt>
 80077ac:	3800      	subs	r0, #0
 80077ae:	bf18      	it	ne
 80077b0:	2001      	movne	r0, #1
 80077b2:	f1b8 0f00 	cmp.w	r8, #0
 80077b6:	dcd2      	bgt.n	800775e <__ieee754_pow+0x216>
 80077b8:	e7da      	b.n	8007770 <__ieee754_pow+0x228>
 80077ba:	bf00      	nop
 80077bc:	fff00000 	.word	0xfff00000
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	433fffff 	.word	0x433fffff
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	3fefffff 	.word	0x3fefffff
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	bff00000 	.word	0xbff00000
 80077d8:	43f00000 	.word	0x43f00000
 80077dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007948 <__ieee754_pow+0x400>)
 80077de:	f7f8 fd53 	bl	8000288 <__aeabi_dsub>
 80077e2:	a351      	add	r3, pc, #324	@ (adr r3, 8007928 <__ieee754_pow+0x3e0>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	f7f8 ff04 	bl	80005f8 <__aeabi_dmul>
 80077f0:	a34f      	add	r3, pc, #316	@ (adr r3, 8007930 <__ieee754_pow+0x3e8>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	4620      	mov	r0, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	4b52      	ldr	r3, [pc, #328]	@ (800794c <__ieee754_pow+0x404>)
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	2200      	movs	r2, #0
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f8 fef3 	bl	80005f8 <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	a148      	add	r1, pc, #288	@ (adr r1, 8007938 <__ieee754_pow+0x3f0>)
 8007818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800781c:	f7f8 fd34 	bl	8000288 <__aeabi_dsub>
 8007820:	4622      	mov	r2, r4
 8007822:	462b      	mov	r3, r5
 8007824:	f7f8 fee8 	bl	80005f8 <__aeabi_dmul>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	2000      	movs	r0, #0
 800782e:	4948      	ldr	r1, [pc, #288]	@ (8007950 <__ieee754_pow+0x408>)
 8007830:	f7f8 fd2a 	bl	8000288 <__aeabi_dsub>
 8007834:	4622      	mov	r2, r4
 8007836:	4680      	mov	r8, r0
 8007838:	4689      	mov	r9, r1
 800783a:	462b      	mov	r3, r5
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	a33b      	add	r3, pc, #236	@ (adr r3, 8007940 <__ieee754_pow+0x3f8>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4650      	mov	r0, sl
 8007860:	4659      	mov	r1, fp
 8007862:	f7f8 fd11 	bl	8000288 <__aeabi_dsub>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4680      	mov	r8, r0
 800786c:	4689      	mov	r9, r1
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fd0b 	bl	800028c <__adddf3>
 8007876:	2400      	movs	r4, #0
 8007878:	4632      	mov	r2, r6
 800787a:	463b      	mov	r3, r7
 800787c:	4620      	mov	r0, r4
 800787e:	460d      	mov	r5, r1
 8007880:	f7f8 fd02 	bl	8000288 <__aeabi_dsub>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4640      	mov	r0, r8
 800788a:	4649      	mov	r1, r9
 800788c:	f7f8 fcfc 	bl	8000288 <__aeabi_dsub>
 8007890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007894:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007898:	2300      	movs	r3, #0
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80078a0:	4606      	mov	r6, r0
 80078a2:	460f      	mov	r7, r1
 80078a4:	4652      	mov	r2, sl
 80078a6:	465b      	mov	r3, fp
 80078a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ac:	f7f8 fcec 	bl	8000288 <__aeabi_dsub>
 80078b0:	4622      	mov	r2, r4
 80078b2:	462b      	mov	r3, r5
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078bc:	4680      	mov	r8, r0
 80078be:	4689      	mov	r9, r1
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f8 fe98 	bl	80005f8 <__aeabi_dmul>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4640      	mov	r0, r8
 80078ce:	4649      	mov	r1, r9
 80078d0:	f7f8 fcdc 	bl	800028c <__adddf3>
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	4606      	mov	r6, r0
 80078da:	460f      	mov	r7, r1
 80078dc:	4620      	mov	r0, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	460b      	mov	r3, r1
 80078e6:	4602      	mov	r2, r0
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	4630      	mov	r0, r6
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f8 fccc 	bl	800028c <__adddf3>
 80078f4:	4b17      	ldr	r3, [pc, #92]	@ (8007954 <__ieee754_pow+0x40c>)
 80078f6:	4299      	cmp	r1, r3
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	468a      	mov	sl, r1
 80078fe:	468b      	mov	fp, r1
 8007900:	f340 82de 	ble.w	8007ec0 <__ieee754_pow+0x978>
 8007904:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007908:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800790c:	4303      	orrs	r3, r0
 800790e:	f000 81dd 	beq.w	8007ccc <__ieee754_pow+0x784>
 8007912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	f7f9 f8df 	bl	8000adc <__aeabi_dcmplt>
 800791e:	3800      	subs	r0, #0
 8007920:	bf18      	it	ne
 8007922:	2001      	movne	r0, #1
 8007924:	e71b      	b.n	800775e <__ieee754_pow+0x216>
 8007926:	bf00      	nop
 8007928:	60000000 	.word	0x60000000
 800792c:	3ff71547 	.word	0x3ff71547
 8007930:	f85ddf44 	.word	0xf85ddf44
 8007934:	3e54ae0b 	.word	0x3e54ae0b
 8007938:	55555555 	.word	0x55555555
 800793c:	3fd55555 	.word	0x3fd55555
 8007940:	652b82fe 	.word	0x652b82fe
 8007944:	3ff71547 	.word	0x3ff71547
 8007948:	3ff00000 	.word	0x3ff00000
 800794c:	3fd00000 	.word	0x3fd00000
 8007950:	3fe00000 	.word	0x3fe00000
 8007954:	408fffff 	.word	0x408fffff
 8007958:	4ad3      	ldr	r2, [pc, #844]	@ (8007ca8 <__ieee754_pow+0x760>)
 800795a:	402a      	ands	r2, r5
 800795c:	2a00      	cmp	r2, #0
 800795e:	f040 817a 	bne.w	8007c56 <__ieee754_pow+0x70e>
 8007962:	4bd2      	ldr	r3, [pc, #840]	@ (8007cac <__ieee754_pow+0x764>)
 8007964:	2200      	movs	r2, #0
 8007966:	f7f8 fe47 	bl	80005f8 <__aeabi_dmul>
 800796a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800796e:	460b      	mov	r3, r1
 8007970:	151a      	asrs	r2, r3, #20
 8007972:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007976:	4422      	add	r2, r4
 8007978:	920a      	str	r2, [sp, #40]	@ 0x28
 800797a:	4acd      	ldr	r2, [pc, #820]	@ (8007cb0 <__ieee754_pow+0x768>)
 800797c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007980:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007984:	4293      	cmp	r3, r2
 8007986:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800798a:	dd08      	ble.n	800799e <__ieee754_pow+0x456>
 800798c:	4ac9      	ldr	r2, [pc, #804]	@ (8007cb4 <__ieee754_pow+0x76c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f340 8163 	ble.w	8007c5a <__ieee754_pow+0x712>
 8007994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007996:	3301      	adds	r3, #1
 8007998:	930a      	str	r3, [sp, #40]	@ 0x28
 800799a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800799e:	2600      	movs	r6, #0
 80079a0:	00f3      	lsls	r3, r6, #3
 80079a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a4:	4bc4      	ldr	r3, [pc, #784]	@ (8007cb8 <__ieee754_pow+0x770>)
 80079a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079ae:	4629      	mov	r1, r5
 80079b0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80079b4:	461a      	mov	r2, r3
 80079b6:	4623      	mov	r3, r4
 80079b8:	4682      	mov	sl, r0
 80079ba:	f7f8 fc65 	bl	8000288 <__aeabi_dsub>
 80079be:	4652      	mov	r2, sl
 80079c0:	462b      	mov	r3, r5
 80079c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80079c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079ca:	f7f8 fc5f 	bl	800028c <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	2000      	movs	r0, #0
 80079d4:	49b9      	ldr	r1, [pc, #740]	@ (8007cbc <__ieee754_pow+0x774>)
 80079d6:	f7f8 ff39 	bl	800084c <__aeabi_ddiv>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079e6:	f7f8 fe07 	bl	80005f8 <__aeabi_dmul>
 80079ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80079f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80079fe:	46ab      	mov	fp, r5
 8007a00:	106d      	asrs	r5, r5, #1
 8007a02:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007a06:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007a0a:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	4614      	mov	r4, r2
 8007a16:	461d      	mov	r5, r3
 8007a18:	f7f8 fdee 	bl	80005f8 <__aeabi_dmul>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a24:	f7f8 fc30 	bl	8000288 <__aeabi_dsub>
 8007a28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	460f      	mov	r7, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fc28 	bl	8000288 <__aeabi_dsub>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4650      	mov	r0, sl
 8007a3e:	4659      	mov	r1, fp
 8007a40:	f7f8 fc22 	bl	8000288 <__aeabi_dsub>
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	f7f8 fdd6 	bl	80005f8 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f8 fc18 	bl	8000288 <__aeabi_dsub>
 8007a58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	f7f8 fdc4 	bl	80005f8 <__aeabi_dmul>
 8007a70:	a37b      	add	r3, pc, #492	@ (adr r3, 8007c60 <__ieee754_pow+0x718>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	f7f8 fdbd 	bl	80005f8 <__aeabi_dmul>
 8007a7e:	a37a      	add	r3, pc, #488	@ (adr r3, 8007c68 <__ieee754_pow+0x720>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fc02 	bl	800028c <__adddf3>
 8007a88:	4622      	mov	r2, r4
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	a377      	add	r3, pc, #476	@ (adr r3, 8007c70 <__ieee754_pow+0x728>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fbf9 	bl	800028c <__adddf3>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	a375      	add	r3, pc, #468	@ (adr r3, 8007c78 <__ieee754_pow+0x730>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fbf0 	bl	800028c <__adddf3>
 8007aac:	4622      	mov	r2, r4
 8007aae:	462b      	mov	r3, r5
 8007ab0:	f7f8 fda2 	bl	80005f8 <__aeabi_dmul>
 8007ab4:	a372      	add	r3, pc, #456	@ (adr r3, 8007c80 <__ieee754_pow+0x738>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fbe7 	bl	800028c <__adddf3>
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f7f8 fd99 	bl	80005f8 <__aeabi_dmul>
 8007ac6:	a370      	add	r3, pc, #448	@ (adr r3, 8007c88 <__ieee754_pow+0x740>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f7f8 fbde 	bl	800028c <__adddf3>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	4620      	mov	r0, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	f7f8 fd8c 	bl	80005f8 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f8 fd86 	bl	80005f8 <__aeabi_dmul>
 8007aec:	4642      	mov	r2, r8
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
 8007af2:	464b      	mov	r3, r9
 8007af4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007af8:	f7f8 fbc8 	bl	800028c <__adddf3>
 8007afc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b00:	f7f8 fd7a 	bl	80005f8 <__aeabi_dmul>
 8007b04:	4622      	mov	r2, r4
 8007b06:	462b      	mov	r3, r5
 8007b08:	f7f8 fbc0 	bl	800028c <__adddf3>
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	4682      	mov	sl, r0
 8007b10:	468b      	mov	fp, r1
 8007b12:	464b      	mov	r3, r9
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	4b68      	ldr	r3, [pc, #416]	@ (8007cc0 <__ieee754_pow+0x778>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4606      	mov	r6, r0
 8007b22:	460f      	mov	r7, r1
 8007b24:	f7f8 fbb2 	bl	800028c <__adddf3>
 8007b28:	4652      	mov	r2, sl
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	f7f8 fbae 	bl	800028c <__adddf3>
 8007b30:	2400      	movs	r4, #0
 8007b32:	460d      	mov	r5, r1
 8007b34:	4622      	mov	r2, r4
 8007b36:	460b      	mov	r3, r1
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fd5c 	bl	80005f8 <__aeabi_dmul>
 8007b40:	4b5f      	ldr	r3, [pc, #380]	@ (8007cc0 <__ieee754_pow+0x778>)
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	2200      	movs	r2, #0
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 fb9c 	bl	8000288 <__aeabi_dsub>
 8007b50:	4632      	mov	r2, r6
 8007b52:	463b      	mov	r3, r7
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4650      	mov	r0, sl
 8007b5e:	4659      	mov	r1, fp
 8007b60:	f7f8 fb92 	bl	8000288 <__aeabi_dsub>
 8007b64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b68:	f7f8 fd46 	bl	80005f8 <__aeabi_dmul>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	462b      	mov	r3, r5
 8007b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 fb82 	bl	800028c <__adddf3>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4640      	mov	r0, r8
 8007b92:	4649      	mov	r1, r9
 8007b94:	f7f8 fb7a 	bl	800028c <__adddf3>
 8007b98:	2400      	movs	r4, #0
 8007b9a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007c90 <__ieee754_pow+0x748>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fd28 	bl	80005f8 <__aeabi_dmul>
 8007ba8:	4642      	mov	r2, r8
 8007baa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007bae:	464b      	mov	r3, r9
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fb68 	bl	8000288 <__aeabi_dsub>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fb62 	bl	8000288 <__aeabi_dsub>
 8007bc4:	a334      	add	r3, pc, #208	@ (adr r3, 8007c98 <__ieee754_pow+0x750>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fd15 	bl	80005f8 <__aeabi_dmul>
 8007bce:	a334      	add	r3, pc, #208	@ (adr r3, 8007ca0 <__ieee754_pow+0x758>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 fd0c 	bl	80005f8 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 fb50 	bl	800028c <__adddf3>
 8007bec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007bee:	4b35      	ldr	r3, [pc, #212]	@ (8007cc4 <__ieee754_pow+0x77c>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fb49 	bl	800028c <__adddf3>
 8007bfa:	4682      	mov	sl, r0
 8007bfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007bfe:	468b      	mov	fp, r1
 8007c00:	f7f8 fc90 	bl	8000524 <__aeabi_i2d>
 8007c04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c06:	4b30      	ldr	r3, [pc, #192]	@ (8007cc8 <__ieee754_pow+0x780>)
 8007c08:	4413      	add	r3, r2
 8007c0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	4652      	mov	r2, sl
 8007c14:	465b      	mov	r3, fp
 8007c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c1a:	f7f8 fb37 	bl	800028c <__adddf3>
 8007c1e:	4642      	mov	r2, r8
 8007c20:	464b      	mov	r3, r9
 8007c22:	f7f8 fb33 	bl	800028c <__adddf3>
 8007c26:	4632      	mov	r2, r6
 8007c28:	463b      	mov	r3, r7
 8007c2a:	f7f8 fb2f 	bl	800028c <__adddf3>
 8007c2e:	2400      	movs	r4, #0
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	4620      	mov	r0, r4
 8007c36:	460d      	mov	r5, r1
 8007c38:	f7f8 fb26 	bl	8000288 <__aeabi_dsub>
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	f7f8 fb22 	bl	8000288 <__aeabi_dsub>
 8007c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c48:	f7f8 fb1e 	bl	8000288 <__aeabi_dsub>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	e61a      	b.n	800788c <__ieee754_pow+0x344>
 8007c56:	2400      	movs	r4, #0
 8007c58:	e68a      	b.n	8007970 <__ieee754_pow+0x428>
 8007c5a:	2601      	movs	r6, #1
 8007c5c:	e6a0      	b.n	80079a0 <__ieee754_pow+0x458>
 8007c5e:	bf00      	nop
 8007c60:	4a454eef 	.word	0x4a454eef
 8007c64:	3fca7e28 	.word	0x3fca7e28
 8007c68:	93c9db65 	.word	0x93c9db65
 8007c6c:	3fcd864a 	.word	0x3fcd864a
 8007c70:	a91d4101 	.word	0xa91d4101
 8007c74:	3fd17460 	.word	0x3fd17460
 8007c78:	518f264d 	.word	0x518f264d
 8007c7c:	3fd55555 	.word	0x3fd55555
 8007c80:	db6fabff 	.word	0xdb6fabff
 8007c84:	3fdb6db6 	.word	0x3fdb6db6
 8007c88:	33333303 	.word	0x33333303
 8007c8c:	3fe33333 	.word	0x3fe33333
 8007c90:	e0000000 	.word	0xe0000000
 8007c94:	3feec709 	.word	0x3feec709
 8007c98:	dc3a03fd 	.word	0xdc3a03fd
 8007c9c:	3feec709 	.word	0x3feec709
 8007ca0:	145b01f5 	.word	0x145b01f5
 8007ca4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	43400000 	.word	0x43400000
 8007cb0:	0003988e 	.word	0x0003988e
 8007cb4:	000bb679 	.word	0x000bb679
 8007cb8:	08008668 	.word	0x08008668
 8007cbc:	3ff00000 	.word	0x3ff00000
 8007cc0:	40080000 	.word	0x40080000
 8007cc4:	08008648 	.word	0x08008648
 8007cc8:	08008658 	.word	0x08008658
 8007ccc:	a39a      	add	r3, pc, #616	@ (adr r3, 8007f38 <__ieee754_pow+0x9f0>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 fad9 	bl	800028c <__adddf3>
 8007cda:	4642      	mov	r2, r8
 8007cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 facf 	bl	8000288 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cf2:	f7f8 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f47f ae0b 	bne.w	8007912 <__ieee754_pow+0x3ca>
 8007cfc:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007d00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007d04:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007d08:	fa43 fa0a 	asr.w	sl, r3, sl
 8007d0c:	44da      	add	sl, fp
 8007d0e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007d12:	489b      	ldr	r0, [pc, #620]	@ (8007f80 <__ieee754_pow+0xa38>)
 8007d14:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007d18:	4108      	asrs	r0, r1
 8007d1a:	ea00 030a 	and.w	r3, r0, sl
 8007d1e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007d22:	f1c1 0114 	rsb	r1, r1, #20
 8007d26:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007d2a:	fa4a fa01 	asr.w	sl, sl, r1
 8007d2e:	f1bb 0f00 	cmp.w	fp, #0
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	bfb8      	it	lt
 8007d3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d40:	f7f8 faa2 	bl	8000288 <__aeabi_dsub>
 8007d44:	4680      	mov	r8, r0
 8007d46:	4689      	mov	r9, r1
 8007d48:	4632      	mov	r2, r6
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4649      	mov	r1, r9
 8007d50:	f7f8 fa9c 	bl	800028c <__adddf3>
 8007d54:	2400      	movs	r4, #0
 8007d56:	a37a      	add	r3, pc, #488	@ (adr r3, 8007f40 <__ieee754_pow+0x9f8>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	460d      	mov	r5, r1
 8007d60:	f7f8 fc4a 	bl	80005f8 <__aeabi_dmul>
 8007d64:	4642      	mov	r2, r8
 8007d66:	e9cd 0100 	strd	r0, r1, [sp]
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fa8a 	bl	8000288 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fa84 	bl	8000288 <__aeabi_dsub>
 8007d80:	a371      	add	r3, pc, #452	@ (adr r3, 8007f48 <__ieee754_pow+0xa00>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	a371      	add	r3, pc, #452	@ (adr r3, 8007f50 <__ieee754_pow+0xa08>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	4680      	mov	r8, r0
 8007d92:	4689      	mov	r9, r1
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fc2e 	bl	80005f8 <__aeabi_dmul>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	f7f8 fa72 	bl	800028c <__adddf3>
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db4:	f7f8 fa6a 	bl	800028c <__adddf3>
 8007db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	f7f8 fa62 	bl	8000288 <__aeabi_dsub>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fa5c 	bl	8000288 <__aeabi_dsub>
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	a35d      	add	r3, pc, #372	@ (adr r3, 8007f58 <__ieee754_pow+0xa10>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	a35c      	add	r3, pc, #368	@ (adr r3, 8007f60 <__ieee754_pow+0xa18>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fa48 	bl	8000288 <__aeabi_dsub>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	f7f8 fbfc 	bl	80005f8 <__aeabi_dmul>
 8007e00:	a359      	add	r3, pc, #356	@ (adr r3, 8007f68 <__ieee754_pow+0xa20>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fa41 	bl	800028c <__adddf3>
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	a357      	add	r3, pc, #348	@ (adr r3, 8007f70 <__ieee754_pow+0xa28>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 fa36 	bl	8000288 <__aeabi_dsub>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	462b      	mov	r3, r5
 8007e20:	f7f8 fbea 	bl	80005f8 <__aeabi_dmul>
 8007e24:	a354      	add	r3, pc, #336	@ (adr r3, 8007f78 <__ieee754_pow+0xa30>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fa2f 	bl	800028c <__adddf3>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	f7f8 fbe1 	bl	80005f8 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fa23 	bl	8000288 <__aeabi_dsub>
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fbd3 	bl	80005f8 <__aeabi_dmul>
 8007e52:	2200      	movs	r2, #0
 8007e54:	e9cd 0100 	strd	r0, r1, [sp]
 8007e58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f7f8 fa12 	bl	8000288 <__aeabi_dsub>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6c:	f7f8 fcee 	bl	800084c <__aeabi_ddiv>
 8007e70:	4632      	mov	r2, r6
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	463b      	mov	r3, r7
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 fbbc 	bl	80005f8 <__aeabi_dmul>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fa02 	bl	800028c <__adddf3>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f7f8 f9fa 	bl	8000288 <__aeabi_dsub>
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 f9f6 	bl	8000288 <__aeabi_dsub>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4938      	ldr	r1, [pc, #224]	@ (8007f84 <__ieee754_pow+0xa3c>)
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007eac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007eb0:	da2e      	bge.n	8007f10 <__ieee754_pow+0x9c8>
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	f000 f874 	bl	8007fa0 <scalbn>
 8007eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebc:	f7ff bbed 	b.w	800769a <__ieee754_pow+0x152>
 8007ec0:	4c31      	ldr	r4, [pc, #196]	@ (8007f88 <__ieee754_pow+0xa40>)
 8007ec2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	d91a      	bls.n	8007f00 <__ieee754_pow+0x9b8>
 8007eca:	4b30      	ldr	r3, [pc, #192]	@ (8007f8c <__ieee754_pow+0xa44>)
 8007ecc:	440b      	add	r3, r1
 8007ece:	4303      	orrs	r3, r0
 8007ed0:	d009      	beq.n	8007ee6 <__ieee754_pow+0x99e>
 8007ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f7f8 fdff 	bl	8000adc <__aeabi_dcmplt>
 8007ede:	3800      	subs	r0, #0
 8007ee0:	bf18      	it	ne
 8007ee2:	2001      	movne	r0, #1
 8007ee4:	e444      	b.n	8007770 <__ieee754_pow+0x228>
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	464b      	mov	r3, r9
 8007eea:	f7f8 f9cd 	bl	8000288 <__aeabi_dsub>
 8007eee:	4632      	mov	r2, r6
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	f7f8 fe07 	bl	8000b04 <__aeabi_dcmpge>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d1eb      	bne.n	8007ed2 <__ieee754_pow+0x98a>
 8007efa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007f90 <__ieee754_pow+0xa48>
 8007efe:	e6fd      	b.n	8007cfc <__ieee754_pow+0x7b4>
 8007f00:	469a      	mov	sl, r3
 8007f02:	4b24      	ldr	r3, [pc, #144]	@ (8007f94 <__ieee754_pow+0xa4c>)
 8007f04:	459a      	cmp	sl, r3
 8007f06:	f63f aef9 	bhi.w	8007cfc <__ieee754_pow+0x7b4>
 8007f0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007f0e:	e71b      	b.n	8007d48 <__ieee754_pow+0x800>
 8007f10:	4621      	mov	r1, r4
 8007f12:	e7d1      	b.n	8007eb8 <__ieee754_pow+0x970>
 8007f14:	491b      	ldr	r1, [pc, #108]	@ (8007f84 <__ieee754_pow+0xa3c>)
 8007f16:	2000      	movs	r0, #0
 8007f18:	f7ff bb34 	b.w	8007584 <__ieee754_pow+0x3c>
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	f7ff bb30 	b.w	8007584 <__ieee754_pow+0x3c>
 8007f24:	4650      	mov	r0, sl
 8007f26:	4659      	mov	r1, fp
 8007f28:	f7ff bb2c 	b.w	8007584 <__ieee754_pow+0x3c>
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f7ff bb79 	b.w	8007624 <__ieee754_pow+0xdc>
 8007f32:	2400      	movs	r4, #0
 8007f34:	f7ff bb64 	b.w	8007600 <__ieee754_pow+0xb8>
 8007f38:	652b82fe 	.word	0x652b82fe
 8007f3c:	3c971547 	.word	0x3c971547
 8007f40:	00000000 	.word	0x00000000
 8007f44:	3fe62e43 	.word	0x3fe62e43
 8007f48:	fefa39ef 	.word	0xfefa39ef
 8007f4c:	3fe62e42 	.word	0x3fe62e42
 8007f50:	0ca86c39 	.word	0x0ca86c39
 8007f54:	be205c61 	.word	0xbe205c61
 8007f58:	72bea4d0 	.word	0x72bea4d0
 8007f5c:	3e663769 	.word	0x3e663769
 8007f60:	c5d26bf1 	.word	0xc5d26bf1
 8007f64:	3ebbbd41 	.word	0x3ebbbd41
 8007f68:	af25de2c 	.word	0xaf25de2c
 8007f6c:	3f11566a 	.word	0x3f11566a
 8007f70:	16bebd93 	.word	0x16bebd93
 8007f74:	3f66c16c 	.word	0x3f66c16c
 8007f78:	5555553e 	.word	0x5555553e
 8007f7c:	3fc55555 	.word	0x3fc55555
 8007f80:	fff00000 	.word	0xfff00000
 8007f84:	3ff00000 	.word	0x3ff00000
 8007f88:	4090cbff 	.word	0x4090cbff
 8007f8c:	3f6f3400 	.word	0x3f6f3400
 8007f90:	4090cc00 	.word	0x4090cc00
 8007f94:	3fe00000 	.word	0x3fe00000

08007f98 <fabs>:
 8007f98:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4770      	bx	lr

08007fa0 <scalbn>:
 8007fa0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007faa:	4683      	mov	fp, r0
 8007fac:	468c      	mov	ip, r1
 8007fae:	460b      	mov	r3, r1
 8007fb0:	b982      	cbnz	r2, 8007fd4 <scalbn+0x34>
 8007fb2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007fb6:	4303      	orrs	r3, r0
 8007fb8:	d039      	beq.n	800802e <scalbn+0x8e>
 8007fba:	4b2f      	ldr	r3, [pc, #188]	@ (8008078 <scalbn+0xd8>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800807c <scalbn+0xdc>)
 8007fc4:	429e      	cmp	r6, r3
 8007fc6:	4683      	mov	fp, r0
 8007fc8:	468c      	mov	ip, r1
 8007fca:	da0d      	bge.n	8007fe8 <scalbn+0x48>
 8007fcc:	a326      	add	r3, pc, #152	@ (adr r3, 8008068 <scalbn+0xc8>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e01b      	b.n	800800c <scalbn+0x6c>
 8007fd4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007fd8:	42ba      	cmp	r2, r7
 8007fda:	d109      	bne.n	8007ff0 <scalbn+0x50>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	f7f8 f955 	bl	800028c <__adddf3>
 8007fe2:	4683      	mov	fp, r0
 8007fe4:	468c      	mov	ip, r1
 8007fe6:	e022      	b.n	800802e <scalbn+0x8e>
 8007fe8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007fec:	460b      	mov	r3, r1
 8007fee:	3a36      	subs	r2, #54	@ 0x36
 8007ff0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007ff4:	428e      	cmp	r6, r1
 8007ff6:	dd0c      	ble.n	8008012 <scalbn+0x72>
 8007ff8:	a31d      	add	r3, pc, #116	@ (adr r3, 8008070 <scalbn+0xd0>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008002:	461c      	mov	r4, r3
 8008004:	f361 74df 	bfi	r4, r1, #31, #1
 8008008:	481d      	ldr	r0, [pc, #116]	@ (8008080 <scalbn+0xe0>)
 800800a:	4621      	mov	r1, r4
 800800c:	f7f8 faf4 	bl	80005f8 <__aeabi_dmul>
 8008010:	e7e7      	b.n	8007fe2 <scalbn+0x42>
 8008012:	4432      	add	r2, r6
 8008014:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008018:	428a      	cmp	r2, r1
 800801a:	dced      	bgt.n	8007ff8 <scalbn+0x58>
 800801c:	2a00      	cmp	r2, #0
 800801e:	dd0a      	ble.n	8008036 <scalbn+0x96>
 8008020:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008024:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008028:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800802c:	46ac      	mov	ip, r5
 800802e:	4658      	mov	r0, fp
 8008030:	4661      	mov	r1, ip
 8008032:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008036:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800803a:	da09      	bge.n	8008050 <scalbn+0xb0>
 800803c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008040:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008044:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008048:	480e      	ldr	r0, [pc, #56]	@ (8008084 <scalbn+0xe4>)
 800804a:	f041 011f 	orr.w	r1, r1, #31
 800804e:	e7bd      	b.n	8007fcc <scalbn+0x2c>
 8008050:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008054:	3236      	adds	r2, #54	@ 0x36
 8008056:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800805a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800805e:	4658      	mov	r0, fp
 8008060:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <scalbn+0xe8>)
 8008062:	4629      	mov	r1, r5
 8008064:	2200      	movs	r2, #0
 8008066:	e7d1      	b.n	800800c <scalbn+0x6c>
 8008068:	c2f8f359 	.word	0xc2f8f359
 800806c:	01a56e1f 	.word	0x01a56e1f
 8008070:	8800759c 	.word	0x8800759c
 8008074:	7e37e43c 	.word	0x7e37e43c
 8008078:	43500000 	.word	0x43500000
 800807c:	ffff3cb0 	.word	0xffff3cb0
 8008080:	8800759c 	.word	0x8800759c
 8008084:	c2f8f359 	.word	0xc2f8f359
 8008088:	3c900000 	.word	0x3c900000

0800808c <with_errno>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	4616      	mov	r6, r2
 8008094:	f7fc ff88 	bl	8004fa8 <__errno>
 8008098:	4629      	mov	r1, r5
 800809a:	6006      	str	r6, [r0, #0]
 800809c:	4620      	mov	r0, r4
 800809e:	bd70      	pop	{r4, r5, r6, pc}

080080a0 <xflow>:
 80080a0:	b513      	push	{r0, r1, r4, lr}
 80080a2:	4604      	mov	r4, r0
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	b10c      	cbz	r4, 80080ae <xflow+0xe>
 80080aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80080ae:	e9cd 2300 	strd	r2, r3, [sp]
 80080b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b6:	f7f8 fa9f 	bl	80005f8 <__aeabi_dmul>
 80080ba:	2222      	movs	r2, #34	@ 0x22
 80080bc:	b002      	add	sp, #8
 80080be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c2:	f7ff bfe3 	b.w	800808c <with_errno>

080080c6 <__math_uflow>:
 80080c6:	2200      	movs	r2, #0
 80080c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80080cc:	f7ff bfe8 	b.w	80080a0 <xflow>

080080d0 <__math_oflow>:
 80080d0:	2200      	movs	r2, #0
 80080d2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80080d6:	f7ff bfe3 	b.w	80080a0 <xflow>
	...

080080dc <__ieee754_sqrt>:
 80080dc:	4a67      	ldr	r2, [pc, #412]	@ (800827c <__ieee754_sqrt+0x1a0>)
 80080de:	438a      	bics	r2, r1
 80080e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	4606      	mov	r6, r0
 80080e6:	460f      	mov	r7, r1
 80080e8:	460b      	mov	r3, r1
 80080ea:	4604      	mov	r4, r0
 80080ec:	d10e      	bne.n	800810c <__ieee754_sqrt+0x30>
 80080ee:	4602      	mov	r2, r0
 80080f0:	f7f8 fa82 	bl	80005f8 <__aeabi_dmul>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 f8c6 	bl	800028c <__adddf3>
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	2900      	cmp	r1, #0
 800810e:	dc0c      	bgt.n	800812a <__ieee754_sqrt+0x4e>
 8008110:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008114:	4302      	orrs	r2, r0
 8008116:	d0f5      	beq.n	8008104 <__ieee754_sqrt+0x28>
 8008118:	b189      	cbz	r1, 800813e <__ieee754_sqrt+0x62>
 800811a:	4602      	mov	r2, r0
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	f7f8 fb92 	bl	800084c <__aeabi_ddiv>
 8008128:	e7ea      	b.n	8008100 <__ieee754_sqrt+0x24>
 800812a:	150a      	asrs	r2, r1, #20
 800812c:	d115      	bne.n	800815a <__ieee754_sqrt+0x7e>
 800812e:	2100      	movs	r1, #0
 8008130:	e009      	b.n	8008146 <__ieee754_sqrt+0x6a>
 8008132:	0ae3      	lsrs	r3, r4, #11
 8008134:	3a15      	subs	r2, #21
 8008136:	0564      	lsls	r4, r4, #21
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0fa      	beq.n	8008132 <__ieee754_sqrt+0x56>
 800813c:	e7f7      	b.n	800812e <__ieee754_sqrt+0x52>
 800813e:	460a      	mov	r2, r1
 8008140:	e7fa      	b.n	8008138 <__ieee754_sqrt+0x5c>
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	3101      	adds	r1, #1
 8008146:	02d8      	lsls	r0, r3, #11
 8008148:	d5fb      	bpl.n	8008142 <__ieee754_sqrt+0x66>
 800814a:	1e48      	subs	r0, r1, #1
 800814c:	1a12      	subs	r2, r2, r0
 800814e:	f1c1 0020 	rsb	r0, r1, #32
 8008152:	fa24 f000 	lsr.w	r0, r4, r0
 8008156:	4303      	orrs	r3, r0
 8008158:	408c      	lsls	r4, r1
 800815a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008166:	07d2      	lsls	r2, r2, #31
 8008168:	bf5c      	itt	pl
 800816a:	005b      	lslpl	r3, r3, #1
 800816c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008170:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008174:	bf58      	it	pl
 8008176:	0064      	lslpl	r4, r4, #1
 8008178:	2600      	movs	r6, #0
 800817a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800817e:	107f      	asrs	r7, r7, #1
 8008180:	0064      	lsls	r4, r4, #1
 8008182:	2116      	movs	r1, #22
 8008184:	4632      	mov	r2, r6
 8008186:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800818a:	1815      	adds	r5, r2, r0
 800818c:	429d      	cmp	r5, r3
 800818e:	bfde      	ittt	le
 8008190:	182a      	addle	r2, r5, r0
 8008192:	1b5b      	suble	r3, r3, r5
 8008194:	1836      	addle	r6, r6, r0
 8008196:	0fe5      	lsrs	r5, r4, #31
 8008198:	3901      	subs	r1, #1
 800819a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800819e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80081a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80081a6:	d1f0      	bne.n	800818a <__ieee754_sqrt+0xae>
 80081a8:	460d      	mov	r5, r1
 80081aa:	f04f 0a20 	mov.w	sl, #32
 80081ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80081b2:	429a      	cmp	r2, r3
 80081b4:	eb01 0c00 	add.w	ip, r1, r0
 80081b8:	db02      	blt.n	80081c0 <__ieee754_sqrt+0xe4>
 80081ba:	d113      	bne.n	80081e4 <__ieee754_sqrt+0x108>
 80081bc:	45a4      	cmp	ip, r4
 80081be:	d811      	bhi.n	80081e4 <__ieee754_sqrt+0x108>
 80081c0:	f1bc 0f00 	cmp.w	ip, #0
 80081c4:	eb0c 0100 	add.w	r1, ip, r0
 80081c8:	da42      	bge.n	8008250 <__ieee754_sqrt+0x174>
 80081ca:	2900      	cmp	r1, #0
 80081cc:	db40      	blt.n	8008250 <__ieee754_sqrt+0x174>
 80081ce:	f102 0e01 	add.w	lr, r2, #1
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	45a4      	cmp	ip, r4
 80081d6:	bf88      	it	hi
 80081d8:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80081dc:	eba4 040c 	sub.w	r4, r4, ip
 80081e0:	4405      	add	r5, r0
 80081e2:	4672      	mov	r2, lr
 80081e4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80081e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80081ec:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80081f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80081f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80081f8:	d1db      	bne.n	80081b2 <__ieee754_sqrt+0xd6>
 80081fa:	431c      	orrs	r4, r3
 80081fc:	d01a      	beq.n	8008234 <__ieee754_sqrt+0x158>
 80081fe:	4c20      	ldr	r4, [pc, #128]	@ (8008280 <__ieee754_sqrt+0x1a4>)
 8008200:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008284 <__ieee754_sqrt+0x1a8>
 8008204:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008208:	e9db 2300 	ldrd	r2, r3, [fp]
 800820c:	f7f8 f83c 	bl	8000288 <__aeabi_dsub>
 8008210:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4640      	mov	r0, r8
 800821a:	4649      	mov	r1, r9
 800821c:	f7f8 fc68 	bl	8000af0 <__aeabi_dcmple>
 8008220:	b140      	cbz	r0, 8008234 <__ieee754_sqrt+0x158>
 8008222:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008226:	e9d4 0100 	ldrd	r0, r1, [r4]
 800822a:	e9db 2300 	ldrd	r2, r3, [fp]
 800822e:	d111      	bne.n	8008254 <__ieee754_sqrt+0x178>
 8008230:	3601      	adds	r6, #1
 8008232:	4655      	mov	r5, sl
 8008234:	1072      	asrs	r2, r6, #1
 8008236:	086b      	lsrs	r3, r5, #1
 8008238:	07f1      	lsls	r1, r6, #31
 800823a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800823e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008242:	bf48      	it	mi
 8008244:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008248:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800824c:	4618      	mov	r0, r3
 800824e:	e757      	b.n	8008100 <__ieee754_sqrt+0x24>
 8008250:	4696      	mov	lr, r2
 8008252:	e7be      	b.n	80081d2 <__ieee754_sqrt+0xf6>
 8008254:	f7f8 f81a 	bl	800028c <__adddf3>
 8008258:	e9d4 8900 	ldrd	r8, r9, [r4]
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 fc3a 	bl	8000adc <__aeabi_dcmplt>
 8008268:	b120      	cbz	r0, 8008274 <__ieee754_sqrt+0x198>
 800826a:	1ca8      	adds	r0, r5, #2
 800826c:	bf08      	it	eq
 800826e:	3601      	addeq	r6, #1
 8008270:	3502      	adds	r5, #2
 8008272:	e7df      	b.n	8008234 <__ieee754_sqrt+0x158>
 8008274:	1c6b      	adds	r3, r5, #1
 8008276:	f023 0501 	bic.w	r5, r3, #1
 800827a:	e7db      	b.n	8008234 <__ieee754_sqrt+0x158>
 800827c:	7ff00000 	.word	0x7ff00000
 8008280:	200001e0 	.word	0x200001e0
 8008284:	200001d8 	.word	0x200001d8

08008288 <_init>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr

08008294 <_fini>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr
